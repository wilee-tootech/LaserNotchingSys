// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "ctlist.h"

// Dispatch interfaces referenced by this interface
#include "./EXTERN/font.h"
#include "./EXTERN/picture.h"

/////////////////////////////////////////////////////////////////////////////
// CctList

IMPLEMENT_DYNCREATE(CctList, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CctList properties

OLE_COLOR CctList::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CctList::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

BOOL CctList::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

COleFont CctList::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CctList::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

OLE_COLOR CctList::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CctList::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

OLE_HANDLE CctList::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CctList::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

unsigned long CctList::GetBorderColor()
{
	unsigned long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CctList::SetBorderColor(unsigned long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

long CctList::GetBorderType()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CctList::SetBorderType(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

unsigned long CctList::GetTitleBackColor()
{
	unsigned long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CctList::SetTitleBackColor(unsigned long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

unsigned long CctList::GetTitleForeColor()
{
	unsigned long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CctList::SetTitleForeColor(unsigned long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

COleFont CctList::GetTitleFont()
{
	LPDISPATCH pDispatch;
	GetProperty(0x6, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CctList::SetTitleFont(LPDISPATCH propVal)
{
	SetProperty(0x6, VT_DISPATCH, propVal);
}

CString CctList::GetTitleText()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}

void CctList::SetTitleText(LPCTSTR propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}

CPicture CctList::GetTitleBackImage()
{
	LPDISPATCH pDispatch;
	GetProperty(0x8, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CctList::SetTitleBackImage(LPDISPATCH propVal)
{
	SetProperty(0x8, VT_DISPATCH, propVal);
}

COleFont CctList::GetHeaderFont()
{
	LPDISPATCH pDispatch;
	GetProperty(0xa, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CctList::SetHeaderFont(LPDISPATCH propVal)
{
	SetProperty(0xa, VT_DISPATCH, propVal);
}

unsigned long CctList::GetShadowColor()
{
	unsigned long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CctList::SetShadowColor(unsigned long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

long CctList::GetHeaderAlign()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CctList::SetHeaderAlign(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

unsigned long CctList::GetHeaderBackColor()
{
	unsigned long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CctList::SetHeaderBackColor(unsigned long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

unsigned long CctList::GetHeaderForeColor()
{
	unsigned long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CctList::SetHeaderForeColor(unsigned long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

long CctList::GetHeaderBorder()
{
	long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CctList::SetHeaderBorder(long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

short CctList::GetHeaderOffset()
{
	short result;
	GetProperty(0x10, VT_I2, (void*)&result);
	return result;
}

void CctList::SetHeaderOffset(short propVal)
{
	SetProperty(0x10, VT_I2, propVal);
}

short CctList::GetTitleOffset()
{
	short result;
	GetProperty(0x11, VT_I2, (void*)&result);
	return result;
}

void CctList::SetTitleOffset(short propVal)
{
	SetProperty(0x11, VT_I2, propVal);
}

short CctList::GetHeaderXOffset()
{
	short result;
	GetProperty(0x12, VT_I2, (void*)&result);
	return result;
}

void CctList::SetHeaderXOffset(short propVal)
{
	SetProperty(0x12, VT_I2, propVal);
}

short CctList::GetHeaderYOffset()
{
	short result;
	GetProperty(0x13, VT_I2, (void*)&result);
	return result;
}

void CctList::SetHeaderYOffset(short propVal)
{
	SetProperty(0x13, VT_I2, propVal);
}

long CctList::GetTitleAlign()
{
	long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}

void CctList::SetTitleAlign(long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}

long CctList::GetTitleBorder()
{
	long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}

void CctList::SetTitleBorder(long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}

short CctList::GetTitleXOffset()
{
	short result;
	GetProperty(0x16, VT_I2, (void*)&result);
	return result;
}

void CctList::SetTitleXOffset(short propVal)
{
	SetProperty(0x16, VT_I2, propVal);
}

short CctList::GetTitleYOffset()
{
	short result;
	GetProperty(0x17, VT_I2, (void*)&result);
	return result;
}

void CctList::SetTitleYOffset(short propVal)
{
	SetProperty(0x17, VT_I2, propVal);
}

unsigned long CctList::GetAltColorOdd()
{
	unsigned long result;
	GetProperty(0x18, VT_I4, (void*)&result);
	return result;
}

void CctList::SetAltColorOdd(unsigned long propVal)
{
	SetProperty(0x18, VT_I4, propVal);
}

unsigned long CctList::GetAltColorEven()
{
	unsigned long result;
	GetProperty(0x19, VT_I4, (void*)&result);
	return result;
}

void CctList::SetAltColorEven(unsigned long propVal)
{
	SetProperty(0x19, VT_I4, propVal);
}

BOOL CctList::GetAlternateColor()
{
	BOOL result;
	GetProperty(0x1a, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetAlternateColor(BOOL propVal)
{
	SetProperty(0x1a, VT_BOOL, propVal);
}

BOOL CctList::GetMaskBitmap()
{
	BOOL result;
	GetProperty(0x1b, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetMaskBitmap(BOOL propVal)
{
	SetProperty(0x1b, VT_BOOL, propVal);
}

unsigned long CctList::GetMaskColor()
{
	unsigned long result;
	GetProperty(0x1c, VT_I4, (void*)&result);
	return result;
}

void CctList::SetMaskColor(unsigned long propVal)
{
	SetProperty(0x1c, VT_I4, propVal);
}

short CctList::GetHeightOffset()
{
	short result;
	GetProperty(0x1d, VT_I2, (void*)&result);
	return result;
}

void CctList::SetHeightOffset(short propVal)
{
	SetProperty(0x1d, VT_I2, propVal);
}

BOOL CctList::GetHorzScroll()
{
	BOOL result;
	GetProperty(0x1e, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetHorzScroll(BOOL propVal)
{
	SetProperty(0x1e, VT_BOOL, propVal);
}

unsigned long CctList::GetSelectedBackColor()
{
	unsigned long result;
	GetProperty(0x1f, VT_I4, (void*)&result);
	return result;
}

void CctList::SetSelectedBackColor(unsigned long propVal)
{
	SetProperty(0x1f, VT_I4, propVal);
}

unsigned long CctList::GetSelectedForeColor()
{
	unsigned long result;
	GetProperty(0x20, VT_I4, (void*)&result);
	return result;
}

void CctList::SetSelectedForeColor(unsigned long propVal)
{
	SetProperty(0x20, VT_I4, propVal);
}

short CctList::GetHorzRange()
{
	short result;
	GetProperty(0x21, VT_I2, (void*)&result);
	return result;
}

void CctList::SetHorzRange(short propVal)
{
	SetProperty(0x21, VT_I2, propVal);
}

BOOL CctList::GetHorzAutoSize()
{
	BOOL result;
	GetProperty(0x22, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetHorzAutoSize(BOOL propVal)
{
	SetProperty(0x22, VT_BOOL, propVal);
}

long CctList::GetPreColumnType()
{
	long result;
	GetProperty(0x23, VT_I4, (void*)&result);
	return result;
}

void CctList::SetPreColumnType(long propVal)
{
	SetProperty(0x23, VT_I4, propVal);
}

short CctList::GetPreColumnWidth()
{
	short result;
	GetProperty(0x24, VT_I2, (void*)&result);
	return result;
}

void CctList::SetPreColumnWidth(short propVal)
{
	SetProperty(0x24, VT_I2, propVal);
}

BOOL CctList::GetMultiSelect()
{
	BOOL result;
	GetProperty(0x25, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetMultiSelect(BOOL propVal)
{
	SetProperty(0x25, VT_BOOL, propVal);
}

long CctList::GetListAlign()
{
	long result;
	GetProperty(0x26, VT_I4, (void*)&result);
	return result;
}

void CctList::SetListAlign(long propVal)
{
	SetProperty(0x26, VT_I4, propVal);
}

long CctList::GetSelected()
{
	long result;
	GetProperty(0x27, VT_I4, (void*)&result);
	return result;
}

void CctList::SetSelected(long propVal)
{
	SetProperty(0x27, VT_I4, propVal);
}

long CctList::GetListIndex()
{
	long result;
	GetProperty(0x28, VT_I4, (void*)&result);
	return result;
}

void CctList::SetListIndex(long propVal)
{
	SetProperty(0x28, VT_I4, propVal);
}

BOOL CctList::GetHorzGridLines()
{
	BOOL result;
	GetProperty(0x29, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetHorzGridLines(BOOL propVal)
{
	SetProperty(0x29, VT_BOOL, propVal);
}

unsigned long CctList::GetHorzGridColor()
{
	unsigned long result;
	GetProperty(0x2a, VT_I4, (void*)&result);
	return result;
}

void CctList::SetHorzGridColor(unsigned long propVal)
{
	SetProperty(0x2a, VT_I4, propVal);
}

BOOL CctList::GetVertGridLines()
{
	BOOL result;
	GetProperty(0x2b, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetVertGridLines(BOOL propVal)
{
	SetProperty(0x2b, VT_BOOL, propVal);
}

unsigned long CctList::GetVertGridColor()
{
	unsigned long result;
	GetProperty(0x2c, VT_I4, (void*)&result);
	return result;
}

void CctList::SetVertGridColor(unsigned long propVal)
{
	SetProperty(0x2c, VT_I4, propVal);
}

long CctList::GetTitleTextStyle()
{
	long result;
	GetProperty(0x2d, VT_I4, (void*)&result);
	return result;
}

void CctList::SetTitleTextStyle(long propVal)
{
	SetProperty(0x2d, VT_I4, propVal);
}

long CctList::GetFocusType()
{
	long result;
	GetProperty(0x2e, VT_I4, (void*)&result);
	return result;
}

void CctList::SetFocusType(long propVal)
{
	SetProperty(0x2e, VT_I4, propVal);
}

unsigned long CctList::GetSubTextColor()
{
	unsigned long result;
	GetProperty(0x2f, VT_I4, (void*)&result);
	return result;
}

void CctList::SetSubTextColor(unsigned long propVal)
{
	SetProperty(0x2f, VT_I4, propVal);
}

COleFont CctList::GetSubTextFont()
{
	LPDISPATCH pDispatch;
	GetProperty(0x30, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CctList::SetSubTextFont(LPDISPATCH propVal)
{
	SetProperty(0x30, VT_DISPATCH, propVal);
}

short CctList::GetSubTextIndent()
{
	short result;
	GetProperty(0x31, VT_I2, (void*)&result);
	return result;
}

void CctList::SetSubTextIndent(short propVal)
{
	SetProperty(0x31, VT_I2, propVal);
}

BOOL CctList::GetScrollOnVThumb()
{
	BOOL result;
	GetProperty(0x32, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetScrollOnVThumb(BOOL propVal)
{
	SetProperty(0x32, VT_BOOL, propVal);
}

BOOL CctList::GetScrollOnHThumb()
{
	BOOL result;
	GetProperty(0x33, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetScrollOnHThumb(BOOL propVal)
{
	SetProperty(0x33, VT_BOOL, propVal);
}

unsigned long CctList::GetTipsBackColor()
{
	unsigned long result;
	GetProperty(0x34, VT_I4, (void*)&result);
	return result;
}

void CctList::SetTipsBackColor(unsigned long propVal)
{
	SetProperty(0x34, VT_I4, propVal);
}

unsigned long CctList::GetTipsForeColor()
{
	unsigned long result;
	GetProperty(0x35, VT_I4, (void*)&result);
	return result;
}

void CctList::SetTipsForeColor(unsigned long propVal)
{
	SetProperty(0x35, VT_I4, propVal);
}

short CctList::GetTipsDistance()
{
	short result;
	GetProperty(0x36, VT_I2, (void*)&result);
	return result;
}

void CctList::SetTipsDistance(short propVal)
{
	SetProperty(0x36, VT_I2, propVal);
}

long CctList::GetTipsPosition()
{
	long result;
	GetProperty(0x37, VT_I4, (void*)&result);
	return result;
}

void CctList::SetTipsPosition(long propVal)
{
	SetProperty(0x37, VT_I4, propVal);
}

CString CctList::GetTipsText()
{
	CString result;
	GetProperty(0x38, VT_BSTR, (void*)&result);
	return result;
}

void CctList::SetTipsText(LPCTSTR propVal)
{
	SetProperty(0x38, VT_BSTR, propVal);
}

COleFont CctList::GetTipsFont()
{
	LPDISPATCH pDispatch;
	GetProperty(0x39, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CctList::SetTipsFont(LPDISPATCH propVal)
{
	SetProperty(0x39, VT_DISPATCH, propVal);
}

long CctList::GetPicAlign()
{
	long result;
	GetProperty(0x3a, VT_I4, (void*)&result);
	return result;
}

void CctList::SetPicAlign(long propVal)
{
	SetProperty(0x3a, VT_I4, propVal);
}

short CctList::GetPicXOffset()
{
	short result;
	GetProperty(0x3b, VT_I2, (void*)&result);
	return result;
}

void CctList::SetPicXOffset(short propVal)
{
	SetProperty(0x3b, VT_I2, propVal);
}

short CctList::GetPicYOffset()
{
	short result;
	GetProperty(0x3c, VT_I2, (void*)&result);
	return result;
}

void CctList::SetPicYOffset(short propVal)
{
	SetProperty(0x3c, VT_I2, propVal);
}

long CctList::GetCheckAlign()
{
	long result;
	GetProperty(0x3d, VT_I4, (void*)&result);
	return result;
}

void CctList::SetCheckAlign(long propVal)
{
	SetProperty(0x3d, VT_I4, propVal);
}

short CctList::GetCheckXOffset()
{
	short result;
	GetProperty(0x3e, VT_I2, (void*)&result);
	return result;
}

void CctList::SetCheckXOffset(short propVal)
{
	SetProperty(0x3e, VT_I2, propVal);
}

short CctList::GetCheckYOffset()
{
	short result;
	GetProperty(0x3f, VT_I2, (void*)&result);
	return result;
}

void CctList::SetCheckYOffset(short propVal)
{
	SetProperty(0x3f, VT_I2, propVal);
}

BOOL CctList::GetMultiLine()
{
	BOOL result;
	GetProperty(0x40, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetMultiLine(BOOL propVal)
{
	SetProperty(0x40, VT_BOOL, propVal);
}

BOOL CctList::GetSelectOnScroll()
{
	BOOL result;
	GetProperty(0x41, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetSelectOnScroll(BOOL propVal)
{
	SetProperty(0x41, VT_BOOL, propVal);
}

short CctList::GetSortColumn()
{
	short result;
	GetProperty(0x42, VT_I2, (void*)&result);
	return result;
}

void CctList::SetSortColumn(short propVal)
{
	SetProperty(0x42, VT_I2, propVal);
}

long CctList::GetSortDirection()
{
	long result;
	GetProperty(0x43, VT_I4, (void*)&result);
	return result;
}

void CctList::SetSortDirection(long propVal)
{
	SetProperty(0x43, VT_I4, propVal);
}

BOOL CctList::GetSortOnCase()
{
	BOOL result;
	GetProperty(0x44, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetSortOnCase(BOOL propVal)
{
	SetProperty(0x44, VT_BOOL, propVal);
}

BOOL CctList::GetSortArrows()
{
	BOOL result;
	GetProperty(0x45, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetSortArrows(BOOL propVal)
{
	SetProperty(0x45, VT_BOOL, propVal);
}

CPicture CctList::GetCheckPicDown()
{
	LPDISPATCH pDispatch;
	GetProperty(0x46, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CctList::SetCheckPicDown(LPDISPATCH propVal)
{
	SetProperty(0x46, VT_DISPATCH, propVal);
}

CPicture CctList::GetCheckPicUp()
{
	LPDISPATCH pDispatch;
	GetProperty(0x47, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CctList::SetCheckPicUp(LPDISPATCH propVal)
{
	SetProperty(0x47, VT_DISPATCH, propVal);
}

CString CctList::GetBreakChar()
{
	CString result;
	GetProperty(0x48, VT_BSTR, (void*)&result);
	return result;
}

void CctList::SetBreakChar(LPCTSTR propVal)
{
	SetProperty(0x48, VT_BSTR, propVal);
}

short CctList::GetSubColumnStart()
{
	short result;
	GetProperty(0x49, VT_I2, (void*)&result);
	return result;
}

void CctList::SetSubColumnStart(short propVal)
{
	SetProperty(0x49, VT_I2, propVal);
}

short CctList::GetSubColumnEnd()
{
	short result;
	GetProperty(0x4a, VT_I2, (void*)&result);
	return result;
}

void CctList::SetSubColumnEnd(short propVal)
{
	SetProperty(0x4a, VT_I2, propVal);
}

BOOL CctList::GetSmoothScroll()
{
	BOOL result;
	GetProperty(0x4b, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetSmoothScroll(BOOL propVal)
{
	SetProperty(0x4b, VT_BOOL, propVal);
}

short CctList::GetScrollSpeed()
{
	short result;
	GetProperty(0x4c, VT_I2, (void*)&result);
	return result;
}

void CctList::SetScrollSpeed(short propVal)
{
	SetProperty(0x4c, VT_I2, propVal);
}

short CctList::GetImageListCount()
{
	short result;
	GetProperty(0x4d, VT_I2, (void*)&result);
	return result;
}

void CctList::SetImageListCount(short propVal)
{
	SetProperty(0x4d, VT_I2, propVal);
}

BOOL CctList::GetSmallIcons()
{
	BOOL result;
	GetProperty(0x4e, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetSmallIcons(BOOL propVal)
{
	SetProperty(0x4e, VT_BOOL, propVal);
}

CPicture CctList::GetBackImage()
{
	LPDISPATCH pDispatch;
	GetProperty(0x4f, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CctList::SetBackImage(LPDISPATCH propVal)
{
	SetProperty(0x4f, VT_DISPATCH, propVal);
}

unsigned long CctList::GetNoFocusBackColor()
{
	unsigned long result;
	GetProperty(0x50, VT_I4, (void*)&result);
	return result;
}

void CctList::SetNoFocusBackColor(unsigned long propVal)
{
	SetProperty(0x50, VT_I4, propVal);
}

unsigned long CctList::GetNoFocusForeColor()
{
	unsigned long result;
	GetProperty(0x51, VT_I4, (void*)&result);
	return result;
}

void CctList::SetNoFocusForeColor(unsigned long propVal)
{
	SetProperty(0x51, VT_I4, propVal);
}

BOOL CctList::GetLabelEdit()
{
	BOOL result;
	GetProperty(0x52, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetLabelEdit(BOOL propVal)
{
	SetProperty(0x52, VT_BOOL, propVal);
}

long CctList::GetSelectedStyle()
{
	long result;
	GetProperty(0x53, VT_I4, (void*)&result);
	return result;
}

void CctList::SetSelectedStyle(long propVal)
{
	SetProperty(0x53, VT_I4, propVal);
}

long CctList::GetArrowAlign()
{
	long result;
	GetProperty(0x54, VT_I4, (void*)&result);
	return result;
}

void CctList::SetArrowAlign(long propVal)
{
	SetProperty(0x54, VT_I4, propVal);
}

short CctList::GetArrowXOffset()
{
	short result;
	GetProperty(0x55, VT_I2, (void*)&result);
	return result;
}

void CctList::SetArrowXOffset(short propVal)
{
	SetProperty(0x55, VT_I2, propVal);
}

short CctList::GetArrowYOffset()
{
	short result;
	GetProperty(0x56, VT_I2, (void*)&result);
	return result;
}

void CctList::SetArrowYOffset(short propVal)
{
	SetProperty(0x56, VT_I2, propVal);
}

CPicture CctList::GetCheckPicDisabled()
{
	LPDISPATCH pDispatch;
	GetProperty(0x57, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CctList::SetCheckPicDisabled(LPDISPATCH propVal)
{
	SetProperty(0x57, VT_DISPATCH, propVal);
}

COleFont CctList::GetPrintTitleFont()
{
	LPDISPATCH pDispatch;
	GetProperty(0x58, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CctList::SetPrintTitleFont(LPDISPATCH propVal)
{
	SetProperty(0x58, VT_DISPATCH, propVal);
}

CString CctList::GetPrintTitle()
{
	CString result;
	GetProperty(0x59, VT_BSTR, (void*)&result);
	return result;
}

void CctList::SetPrintTitle(LPCTSTR propVal)
{
	SetProperty(0x59, VT_BSTR, propVal);
}

CString CctList::GetPrintSubTitle()
{
	CString result;
	GetProperty(0x5a, VT_BSTR, (void*)&result);
	return result;
}

void CctList::SetPrintSubTitle(LPCTSTR propVal)
{
	SetProperty(0x5a, VT_BSTR, propVal);
}

short CctList::GetPageXOffset()
{
	short result;
	GetProperty(0x5b, VT_I2, (void*)&result);
	return result;
}

void CctList::SetPageXOffset(short propVal)
{
	SetProperty(0x5b, VT_I2, propVal);
}

short CctList::GetPageYOffset()
{
	short result;
	GetProperty(0x5c, VT_I2, (void*)&result);
	return result;
}

void CctList::SetPageYOffset(short propVal)
{
	SetProperty(0x5c, VT_I2, propVal);
}

short CctList::GetPrintOffset()
{
	short result;
	GetProperty(0x5d, VT_I2, (void*)&result);
	return result;
}

void CctList::SetPrintOffset(short propVal)
{
	SetProperty(0x5d, VT_I2, propVal);
}

long CctList::GetPrintTitleAlign()
{
	long result;
	GetProperty(0x5e, VT_I4, (void*)&result);
	return result;
}

void CctList::SetPrintTitleAlign(long propVal)
{
	SetProperty(0x5e, VT_I4, propVal);
}

unsigned long CctList::GetPrintBackColor()
{
	unsigned long result;
	GetProperty(0x5f, VT_I4, (void*)&result);
	return result;
}

void CctList::SetPrintBackColor(unsigned long propVal)
{
	SetProperty(0x5f, VT_I4, propVal);
}

short CctList::GetAlternateItems()
{
	short result;
	GetProperty(0x61, VT_I2, (void*)&result);
	return result;
}

void CctList::SetAlternateItems(short propVal)
{
	SetProperty(0x61, VT_I2, propVal);
}

CPicture CctList::GetMouseIcon()
{
	LPDISPATCH pDispatch;
	GetProperty(0x62, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CctList::SetMouseIcon(LPDISPATCH propVal)
{
	SetProperty(0x62, VT_DISPATCH, propVal);
}

long CctList::GetMousePointer()
{
	long result;
	GetProperty(0x63, VT_I4, (void*)&result);
	return result;
}

void CctList::SetMousePointer(long propVal)
{
	SetProperty(0x63, VT_I4, propVal);
}

long CctList::GetPreColumnBorder()
{
	long result;
	GetProperty(0x65, VT_I4, (void*)&result);
	return result;
}

void CctList::SetPreColumnBorder(long propVal)
{
	SetProperty(0x65, VT_I4, propVal);
}

unsigned long CctList::GetPreColumnBackColor()
{
	unsigned long result;
	GetProperty(0x66, VT_I4, (void*)&result);
	return result;
}

void CctList::SetPreColumnBackColor(unsigned long propVal)
{
	SetProperty(0x66, VT_I4, propVal);
}

unsigned long CctList::GetPreColumnForeColor()
{
	unsigned long result;
	GetProperty(0x67, VT_I4, (void*)&result);
	return result;
}

void CctList::SetPreColumnForeColor(unsigned long propVal)
{
	SetProperty(0x67, VT_I4, propVal);
}

CPicture CctList::GetPreColumnPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0x68, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CctList::SetPreColumnPicture(LPDISPATCH propVal)
{
	SetProperty(0x68, VT_DISPATCH, propVal);
}

long CctList::GetPreSelectBorder()
{
	long result;
	GetProperty(0x69, VT_I4, (void*)&result);
	return result;
}

void CctList::SetPreSelectBorder(long propVal)
{
	SetProperty(0x69, VT_I4, propVal);
}

unsigned long CctList::GetPreSelectBackColor()
{
	unsigned long result;
	GetProperty(0x6a, VT_I4, (void*)&result);
	return result;
}

void CctList::SetPreSelectBackColor(unsigned long propVal)
{
	SetProperty(0x6a, VT_I4, propVal);
}

unsigned long CctList::GetPreSelectForeColor()
{
	unsigned long result;
	GetProperty(0x6b, VT_I4, (void*)&result);
	return result;
}

void CctList::SetPreSelectForeColor(unsigned long propVal)
{
	SetProperty(0x6b, VT_I4, propVal);
}

BOOL CctList::GetHeaderMultiLine()
{
	BOOL result;
	GetProperty(0x6c, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetHeaderMultiLine(BOOL propVal)
{
	SetProperty(0x6c, VT_BOOL, propVal);
}

long CctList::GetPrintMapMode()
{
	long result;
	GetProperty(0x6d, VT_I4, (void*)&result);
	return result;
}

void CctList::SetPrintMapMode(long propVal)
{
	SetProperty(0x6d, VT_I4, propVal);
}

long CctList::GetTipsType()
{
	long result;
	GetProperty(0x6e, VT_I4, (void*)&result);
	return result;
}

void CctList::SetTipsType(long propVal)
{
	SetProperty(0x6e, VT_I4, propVal);
}

BOOL CctList::GetColumnPriority()
{
	BOOL result;
	GetProperty(0x6f, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetColumnPriority(BOOL propVal)
{
	SetProperty(0x6f, VT_BOOL, propVal);
}

BOOL CctList::GetDisplayTitle()
{
	BOOL result;
	GetProperty(0x70, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetDisplayTitle(BOOL propVal)
{
	SetProperty(0x70, VT_BOOL, propVal);
}

BOOL CctList::GetDisplayHeader()
{
	BOOL result;
	GetProperty(0x71, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetDisplayHeader(BOOL propVal)
{
	SetProperty(0x71, VT_BOOL, propVal);
}

short CctList::GetTipsDelay()
{
	short result;
	GetProperty(0x72, VT_I2, (void*)&result);
	return result;
}

void CctList::SetTipsDelay(short propVal)
{
	SetProperty(0x72, VT_I2, propVal);
}

long CctList::GetTipsTextAlign()
{
	long result;
	GetProperty(0x73, VT_I4, (void*)&result);
	return result;
}

void CctList::SetTipsTextAlign(long propVal)
{
	SetProperty(0x73, VT_I4, propVal);
}

short CctList::GetDateOffset()
{
	short result;
	GetProperty(0x74, VT_I2, (void*)&result);
	return result;
}

void CctList::SetDateOffset(short propVal)
{
	SetProperty(0x74, VT_I2, propVal);
}

long CctList::GetDateFormat()
{
	long result;
	GetProperty(0x75, VT_I4, (void*)&result);
	return result;
}

void CctList::SetDateFormat(long propVal)
{
	SetProperty(0x75, VT_I4, propVal);
}

BOOL CctList::GetIncludeSeconds()
{
	BOOL result;
	GetProperty(0x76, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetIncludeSeconds(BOOL propVal)
{
	SetProperty(0x76, VT_BOOL, propVal);
}

BOOL CctList::GetIncludeAmPm()
{
	BOOL result;
	GetProperty(0x77, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetIncludeAmPm(BOOL propVal)
{
	SetProperty(0x77, VT_BOOL, propVal);
}

BOOL CctList::GetIncludeTime()
{
	BOOL result;
	GetProperty(0x78, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetIncludeTime(BOOL propVal)
{
	SetProperty(0x78, VT_BOOL, propVal);
}

CString CctList::GetDateSepChar()
{
	CString result;
	GetProperty(0x79, VT_BSTR, (void*)&result);
	return result;
}

void CctList::SetDateSepChar(LPCTSTR propVal)
{
	SetProperty(0x79, VT_BSTR, propVal);
}

CString CctList::GetTimeSepChar()
{
	CString result;
	GetProperty(0x7a, VT_BSTR, (void*)&result);
	return result;
}

void CctList::SetTimeSepChar(LPCTSTR propVal)
{
	SetProperty(0x7a, VT_BSTR, propVal);
}

BOOL CctList::GetLongYear()
{
	BOOL result;
	GetProperty(0x7b, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetLongYear(BOOL propVal)
{
	SetProperty(0x7b, VT_BOOL, propVal);
}

long CctList::GetHeaderPicAlign()
{
	long result;
	GetProperty(0x7c, VT_I4, (void*)&result);
	return result;
}

void CctList::SetHeaderPicAlign(long propVal)
{
	SetProperty(0x7c, VT_I4, propVal);
}

CString CctList::GetDecimalChar()
{
	CString result;
	GetProperty(0x7d, VT_BSTR, (void*)&result);
	return result;
}

void CctList::SetDecimalChar(LPCTSTR propVal)
{
	SetProperty(0x7d, VT_BSTR, propVal);
}

BOOL CctList::GetSorted()
{
	BOOL result;
	GetProperty(0x7e, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetSorted(BOOL propVal)
{
	SetProperty(0x7e, VT_BOOL, propVal);
}

long CctList::GetTopRow()
{
	long result;
	GetProperty(0x7f, VT_I4, (void*)&result);
	return result;
}

void CctList::SetTopRow(long propVal)
{
	SetProperty(0x7f, VT_I4, propVal);
}

BOOL CctList::GetSubTextNodes()
{
	BOOL result;
	GetProperty(0x80, VT_BOOL, (void*)&result);
	return result;
}

void CctList::SetSubTextNodes(BOOL propVal)
{
	SetProperty(0x80, VT_BOOL, propVal);
}

unsigned long CctList::GetTitleBackColorTo()
{
	unsigned long result;
	GetProperty(0x81, VT_I4, (void*)&result);
	return result;
}

void CctList::SetTitleBackColorTo(unsigned long propVal)
{
	SetProperty(0x81, VT_I4, propVal);
}

long CctList::GetTitleFillType()
{
	long result;
	GetProperty(0x82, VT_I4, (void*)&result);
	return result;
}

void CctList::SetTitleFillType(long propVal)
{
	SetProperty(0x82, VT_I4, propVal);
}

unsigned long CctList::GetHeaderBackColorTo()
{
	unsigned long result;
	GetProperty(0x83, VT_I4, (void*)&result);
	return result;
}

void CctList::SetHeaderBackColorTo(unsigned long propVal)
{
	SetProperty(0x83, VT_I4, propVal);
}

long CctList::GetHeaderFillType()
{
	long result;
	GetProperty(0x84, VT_I4, (void*)&result);
	return result;
}

void CctList::SetHeaderFillType(long propVal)
{
	SetProperty(0x84, VT_I4, propVal);
}

unsigned long CctList::GetPreColumnBackColorTo()
{
	unsigned long result;
	GetProperty(0x85, VT_I4, (void*)&result);
	return result;
}

void CctList::SetPreColumnBackColorTo(unsigned long propVal)
{
	SetProperty(0x85, VT_I4, propVal);
}

long CctList::GetPreColumnFillType()
{
	long result;
	GetProperty(0x86, VT_I4, (void*)&result);
	return result;
}

void CctList::SetPreColumnFillType(long propVal)
{
	SetProperty(0x86, VT_I4, propVal);
}

unsigned long CctList::GetBackColorTo()
{
	unsigned long result;
	GetProperty(0x87, VT_I4, (void*)&result);
	return result;
}

void CctList::SetBackColorTo(unsigned long propVal)
{
	SetProperty(0x87, VT_I4, propVal);
}

long CctList::GetBackFillType()
{
	long result;
	GetProperty(0x88, VT_I4, (void*)&result);
	return result;
}

void CctList::SetBackFillType(long propVal)
{
	SetProperty(0x88, VT_I4, propVal);
}

long CctList::GetNodeType()
{
	long result;
	GetProperty(0x89, VT_I4, (void*)&result);
	return result;
}

void CctList::SetNodeType(long propVal)
{
	SetProperty(0x89, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CctList operations

short CctList::ColumnCount()
{
	short result;
	InvokeHelper(0x8a, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CctList::AddColumn(LPCTSTR strCaption, short nWidth)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x8b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strCaption, nWidth);
	return result;
}

BOOL CctList::ClearColumns()
{
	BOOL result;
	InvokeHelper(0x8c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long CctList::AddItem(LPCTSTR strText)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		strText);
	return result;
}

long CctList::ListCount()
{
	long result;
	InvokeHelper(0x8e, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CctList::InsertColumn(LPCTSTR strCaption, short nWidth, short nIndex)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2;
	InvokeHelper(0x8f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strCaption, nWidth, nIndex);
	return result;
}

long CctList::InsertItem(LPCTSTR strCaption, long nIndex)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x90, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		strCaption, nIndex);
	return result;
}

BOOL CctList::ClearList()
{
	BOOL result;
	InvokeHelper(0x91, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CctList::RemoveColumn(short nIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x92, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nIndex);
	return result;
}

BOOL CctList::RemoveItem(long nIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x93, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::ClearFont(long nIndex)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x94, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nIndex);
}

void CctList::ListFont(LPDISPATCH fntFont, long nIndex)
{
	static BYTE parms[] =
		VTS_DISPATCH VTS_I4;
	InvokeHelper(0x95, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 fntFont, nIndex);
}

short CctList::ItemHeight()
{
	short result;
	InvokeHelper(0x96, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

long CctList::DragDrop(short nxPosn, short nyPosn)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x97, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nxPosn, nyPosn);
	return result;
}

long CctList::DragOver(short nxPosn, short nyPosn, short nState)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x98, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nxPosn, nyPosn, nState);
	return result;
}

void CctList::ReDraw(BOOL nType)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x99, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nType);
}

BOOL CctList::SortList()
{
	BOOL result;
	InvokeHelper(0x9a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CctList::CancelSort()
{
	InvokeHelper(0x9b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CctList::SortNewColumn(short nColumn)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x9c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nColumn);
	return result;
}

short CctList::SubTextHeight()
{
	short result;
	InvokeHelper(0x9d, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CctList::CalcSubTextHeight(long nIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		nIndex);
	return result;
}

long CctList::ctDragDrop(short nxPosn, short nyPosn)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x9f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nxPosn, nyPosn);
	return result;
}

long CctList::ctDragOver(short nxPosn, short nyPosn, short nState)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0xa0, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nxPosn, nyPosn, nState);
	return result;
}

short CctList::AddImage(LPDISPATCH piC_Image)
{
	short result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xa1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		piC_Image);
	return result;
}

BOOL CctList::RemoveImage(short nIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xa2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nIndex);
	return result;
}

long CctList::RemoveSelected()
{
	long result;
	InvokeHelper(0xa3, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CctList::CancelEdit()
{
	InvokeHelper(0xa4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CctList::StartLabelEdit()
{
	BOOL result;
	InvokeHelper(0xa5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CctList::PrintList()
{
	BOOL result;
	InvokeHelper(0xa6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CctList::AbortPrint()
{
	InvokeHelper(0xa7, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CctList::PrintInWindow(long nHDC, short nLeft, short nTop, short nRight, short nBottom)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0xa8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nHDC, nLeft, nTop, nRight, nBottom);
	return result;
}

long CctList::FindText(LPCTSTR strText, long nIndex, short nColumn, BOOL bSoftSeek, BOOL bMatchCase)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I2 VTS_BOOL VTS_BOOL;
	InvokeHelper(0xa9, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		strText, nIndex, nColumn, bSoftSeek, bMatchCase);
	return result;
}

void CctList::SortMultiColumns(short nColumn1, short nColumn2, short nColumn3)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0xaa, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nColumn1, nColumn2, nColumn3);
}

short CctList::GetColumnWidth(short nIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xab, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetColumnWidth(short nIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nNewValue);
}

short CctList::GetColumnTextAlign(short nIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xac, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetColumnTextAlign(short nIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xac, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nNewValue);
}

short CctList::GetColumnPicture(short nIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xad, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetColumnPicture(short nIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xad, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nNewValue);
}

CString CctList::GetColumnText(short nIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xae, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetColumnText(short nIndex, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0xae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, lpszNewValue);
}

BOOL CctList::GetColumnLock(short nIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xaf, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetColumnLock(short nIndex, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0xaf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, bNewValue);
}

short CctList::GetColumnCheckBox(short nIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xb0, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetColumnCheckBox(short nIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xb0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nNewValue);
}

CString CctList::GetListText(long nIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetListText(long nIndex, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0xb1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, lpszNewValue);
}

unsigned long CctList::GetListBackColor(long nIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetListBackColor(long nIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xb2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, newValue);
}

unsigned long CctList::GetListForeColor(long nIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetListForeColor(long nIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xb3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, newValue);
}

unsigned long CctList::GetColumnBackColor(short nIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xb4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetColumnBackColor(short nIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0xb4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, newValue);
}

BOOL CctList::GetColumnSortable(short nIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xb5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetColumnSortable(short nIndex, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0xb5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, bNewValue);
}

unsigned long CctList::GetColumnForeColor(short nIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xb6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetColumnForeColor(short nIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0xb6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, newValue);
}

CString CctList::GetListSubText(long nIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetListSubText(long nIndex, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0xb7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, lpszNewValue);
}

CString CctList::GetListCargo(long nIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetListCargo(long nIndex, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0xb8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, lpszNewValue);
}

short CctList::GetListSubHeight(long nIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb9, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetListSubHeight(long nIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0xb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nNewValue);
}

CString CctList::GetCellText(long nIndex, short nColumn)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0xba, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nIndex, nColumn);
	return result;
}

void CctList::SetCellText(long nIndex, short nColumn, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR;
	InvokeHelper(0xba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nColumn, lpszNewValue);
}

short CctList::GetCellPicture(long nIndex, short nColumn)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0xbb, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nIndex, nColumn);
	return result;
}

void CctList::SetCellPicture(long nIndex, short nColumn, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2;
	InvokeHelper(0xbb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nColumn, nNewValue);
}

short CctList::GetColumnPictureAlign(short nIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xbc, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetColumnPictureAlign(short nIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xbc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nNewValue);
}

short CctList::GetColumnCheckAlign(short nIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xbd, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetColumnCheckAlign(short nIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xbd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nNewValue);
}

short CctList::GetCellCheck(long nIndex, short nColumn)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0xbe, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nIndex, nColumn);
	return result;
}

void CctList::SetCellCheck(long nIndex, short nColumn, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2;
	InvokeHelper(0xbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nColumn, nNewValue);
}

short CctList::GetCellPicSelect(long nIndex, short nColumn)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0xbf, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nIndex, nColumn);
	return result;
}

void CctList::SetCellPicSelect(long nIndex, short nColumn, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2;
	InvokeHelper(0xbf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nColumn, nNewValue);
}

long CctList::GetListData(long nIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetListData(long nIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xc0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nNewValue);
}

BOOL CctList::GetListSelect(long nIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetListSelect(long nIndex, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, bNewValue);
}

short CctList::GetListIndent(long nIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc2, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetListIndent(long nIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0xc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nNewValue);
}

short CctList::GetListFontBold(long nIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc3, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetListFontBold(long nIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0xc3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nNewValue);
}

CPicture CctList::GetListImage(short nIndex)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xc4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		nIndex);
	return CPicture(pDispatch);
}

void CctList::SetListImage(short nIndex, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_DISPATCH;
	InvokeHelper(0xc4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, newValue);
}

BOOL CctList::GetListHeader(long nIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetListHeader(long nIndex, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0xc5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, bNewValue);
}

short CctList::GetColumnDataType(short nColumn)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xc6, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nColumn);
	return result;
}

void CctList::SetColumnDataType(short nColumn, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xc6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nColumn, nNewValue);
}

BOOL CctList::GetListSubVisible(long nIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		nIndex);
	return result;
}

void CctList::SetListSubVisible(long nIndex, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0xc7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, bNewValue);
}

short CctList::GetColumnHeaderAlign(short nColumn)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xc8, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nColumn);
	return result;
}

void CctList::SetColumnHeaderAlign(short nColumn, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xc8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nColumn, nNewValue);
}

void CctList::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
