#if !defined(AFX_SPREADSHEET_H__652D885D_A2FF_4CFA_87EB_6A0DA3CA2377__INCLUDED_)
#define AFX_SPREADSHEET_H__652D885D_A2FF_4CFA_87EB_6A0DA3CA2377__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class CPicture;
class COleFont;


class CFpspread8 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CFpspread8)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x71146838, 0x20D, 0x4D16, { 0x80, 0xFD, 0x6A, 0xCE, 0x38, 0x4B, 0x66, 0xDF } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID, 
		CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

	BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
		UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
			pPersist, bStorage, bstrLicKey); 
	}

	// 특성입니다.
public:
	enum
	{
		SpreadHeader = -1000
	}CoordConstants;
	enum
	{
		BorderStyleNone = 0,
		BorderStyleFixedSingle = 1
	}BorderStyleConstants;
	enum
	{
		DispBlank = 0,
		DispNumbers = 1,
		DispLetters = 2
	}HeaderDisplayConstants;
	enum
	{
		EditEnterActionNone = 0,
		EditEnterActionUp = 1,
		EditEnterActionDown = 2,
		EditEnterActionLeft = 3,
		EditEnterActionRight = 4,
		EditEnterActionNext = 5,
		EditEnterActionPrevious = 6,
		EditEnterActionSame = 7,
		EditEnterActionNextRow = 8
	}EditEnterActionConstants;
	enum
	{
		OperationModeNormal = 0,
		OperationModeRead = 1,
		OperationModeRow = 2,
		OperationModeSingle = 3,
		OperationModeMulti = 4,
		OperationModeExtended = 5
	}OperationModeConstants;
	enum
	{
		PositionUpperLeft = 0,
		PositionUpperCenter = 1,
		PositionUpperRight = 2,
		PositionCenterLeft = 3,
		PositionCenter = 4,
		PositionCenterRight = 5,
		PositionBottomLeft = 6,
		PositionBottomCenter = 7,
		PositionBottomRight = 8
	}PositionConstants;
	enum
	{
		ScrollBarsNone = 0,
		ScrollBarsHorizontal = 1,
		ScrollBarsVertical = 2,
		ScrollBarsBoth = 3
	}ScrollBarsConstants;
	enum
	{
		UnitTypeNormal = 0,
		UnitTypeVGABase = 1,
		UnitTypeTwips = 2
	}UnitTypeConstants;
	enum
	{
		BackColorStyleOverGrid = 0,
		BackColorStyleUnderGrid = 1,
		BackColorStyleOverHorzGridOnly = 2,
		BackColorStyleOverVertGridOnly = 3
	}BackColorStyleConstants;
	enum
	{
		DAutoSizeColsNone = 0,
		DAutoSizeColsMax = 1,
		DAutoSizeColsBest = 2
	}DAutoSizeColsConstants;
	enum
	{
		ActionActiveCell = 0,
		ActionGotoCell = 1,
		ActionSelectBlock = 2,
		ActionClear = 3,
		ActionDeleteCol = 4,
		ActionDeleteRow = 5,
		ActionInsertCol = 6,
		ActionInsertRow = 7,
		ActionReCalc = 11,
		ActionClearText = 12,
		ActionPrint = 13,
		ActionDeselectBlock = 14,
		ActionDSave = 15,
		ActionSetCellBorder = 16,
		ActionAddMultiSelBlock = 17,
		ActionGetMultiSelection = 18,
		ActionCopyRange = 19,
		ActionMoveRange = 20,
		ActionSwapRange = 21,
		ActionClipboardCopy = 22,
		ActionClipboardCut = 23,
		ActionClipboardPaste = 24,
		ActionSort = 25,
		ActionComboClear = 26,
		ActionComboRemove = 27,
		ActionReset = 28,
		ActionSelModeClear = 29,
		ActionVModeRefresh = 30,
		ActionSmartPrint = 32
	}ActionConstants;
	enum
	{
		CellBorderStyleDefault = 0,
		CellBorderStyleSolid = 1,
		CellBorderStyleDash = 2,
		CellBorderStyleDot = 3,
		CellBorderStyleDashDot = 4,
		CellBorderStyleDashDotDot = 5,
		CellBorderStyleBlank = 6,
		CellBorderStyleFineSolid = 11,
		CellBorderStyleFineDash = 12,
		CellBorderStyleFineDot = 13,
		CellBorderStyleFineDashDot = 14,
		CellBorderStyleFineDashDotDot = 15
	}CellBorderStyleConstants;
	enum
	{
		CellTypeDate = 0,
		CellTypeEdit = 1,
		CellTypeFloat = 2,
		CellTypeInteger = 3,
		CellTypePic = 4,
		CellTypeStaticText = 5,
		CellTypeTime = 6,
		CellTypeButton = 7,
		CellTypeComboBox = 8,
		CellTypePicture = 9,
		CellTypeCheckBox = 10,
		CellTypeOwnerDrawn = 11,
		CellTypeCurrency = 12,
		CellTypeNumber = 13,
		CellTypePercent = 14,
		CellTypeScientific = 15
	}CellTypeConstants;
	enum
	{
		CursorStyleUserDefined = 0,
		CursorStyleDefault = 1,
		CursorStyleArrow = 2,
		CursorStyleDefColResize = 3,
		CursorStyleDefRowResize = 4
	}CursorStyleConstants;
	enum
	{
		CursorTypeDefault = 0,
		CursorTypeColResize = 1,
		CursorTypeRowResize = 2,
		CursorTypeButton = 3,
		CursorTypeGrayArea = 4,
		CursorTypeLockedCell = 5,
		CursorTypeColHeader = 6,
		CursorTypeRowHeader = 7,
		CursorTypeDragDropArea = 8,
		CursorTypeDragDrop = 9
	}CursorTypeConstants;
	enum
	{
		PrintOrientationDefault = 0,
		PrintOrientationPortrait = 1,
		PrintOrientationLandscape = 2
	}PrintOrientationConstants;
	enum
	{
		PrintTypeAll = 0,
		PrintTypeCellRange = 1,
		PrintTypeCurrentPage = 2,
		PrintTypePageRange = 3
	}PrintTypeConstants;
	enum
	{
		SortByRow = 0,
		SortByCol = 1
	}SortByConstants;
	enum
	{
		SortKeyOrderNone = 0,
		SortKeyOrderAscending = 1,
		SortKeyOrderDescending = 2
	}SortKeyOrderConstants;
	enum
	{
		TypeButtonAlignBottom = 0,
		TypeButtonAlignTop = 1,
		TypeButtonAlignLeft = 2,
		TypeButtonAlignRight = 3
	}TypeButtonAlignConstants;
	enum
	{
		TypeButtonTypeNormal = 0,
		TypeButtonTypeTwoState = 1
	}TypeButtonTypeConstants;
	enum
	{
		TypeCheckTextAlignLeft = 0,
		TypeCheckTextAlignRight = 1
	}TypeCheckTextAlignConstants;
	enum
	{
		TypeCheckTypeNormal = 0,
		TypeCheckTypeThreeState = 1
	}TypeCheckTypeConstants;
	enum
	{
		TypeDateFormatDDMONYY = 0,
		TypeDateFormatDDMMYY = 1,
		TypeDateFormatMMDDYY = 2,
		TypeDateFormatYYMMDD = 3,
		TypeDateFormatDefault = 99
	}TypeDateFormatConstants;
	enum
	{
		TypeEditCharCaseSetLower = 0,
		TypeEditCharCaseSetNone = 1,
		TypeEditCharCaseSetUpper = 2
	}TypeEditCharCaseConstants;
	enum
	{
		TypeEditCharSetASCII = 0,
		TypeEditCharSetAlpha = 1,
		TypeEditCharSetAlphanumeric = 2,
		TypeEditCharSetNumeric = 3
	}TypeEditCharSetConstants;
	enum
	{
		TypeHAlignLeft = 0,
		TypeHAlignRight = 1,
		TypeHAlignCenter = 2
	}TypeHAlignConstants;
	enum
	{
		TypeTextAlignVertBottom = 0,
		TypeTextAlignVertCenter = 1,
		TypeTextAlignVertTop = 2
	}TypeTextAlignVertConstants;
	enum
	{
		TypeTime24Hour12HourClock = 0,
		TypeTime24Hour24HourClock = 1,
		TypeTime24HourDefault = 2
	}TypeTime24HourConstants;
	enum
	{
		UserResizeNone = 0,
		UserResizeColumns = 1,
		UserResizeRows = 2,
		UserResizeBoth = 3
	}UserResizeConstants;
	enum
	{
		UserResizeDefault = 0,
		UserResizeOn = 1,
		UserResizeOff = 2
	}UserResizeConstants2;
	enum
	{
		AppearanceFlat = 0,
		Appearance3D = 1,
		Appearance3DWithBorder = 2
	}AppearanceConstants;
	enum
	{
		TextTipOff = 0,
		TextTipFixed = 1,
		TextTipFloating = 2,
		TextTipFixedFocusOnly = 3,
		TextTipFloatingFocusOnly = 4
	}TextTipConstants;
	enum
	{
		ScrollBarTrackOff = 0,
		ScrollBarTrackVertical = 1,
		ScrollBarTrackHorizontal = 2,
		ScrollBarTrackBoth = 3
	}ScrollBarTrackConstants;
	enum
	{
		Default = 0,
		Arrow = 1,
		Cross = 2,
		IBeam = 3,
		Icon = 4,
		Sizing = 5,
		SizeNESW = 6,
		SizeNS = 7,
		SizeNWSE = 8,
		SizeWE = 9,
		UpArrow = 10,
		Hourglass = 11,
		NoDrop = 12,
		ArrowHourglass = 13,
		ArrowQuestion = 14,
		SizeAll = 15,
		Custom = 99
	}MousePointerConstants;
	enum
	{
		PageOrderAuto = 0,
		PageOrderDownThenOver = 1,
		PageOrderOverThenDown = 2
	}PrintPageOrderConstants;
	enum
	{
		TypeVAlignTop = 0,
		TypeVAlignBottom = 1,
		TypeVAlignCenter = 2
	}TypeVAlignConstants;
	enum
	{
		ScrollBarShow = 0,
		ScrollBarAuto = 1,
		ScrollBarHide = 2
	}PVScrollBarConstants;
	enum
	{
		GrayAreaMarginTypeScaled = 0,
		GrayAreaMarginTypeActual = 1
	}PVGrayAreaMarginTypeConstants;
	enum
	{
		PageViewTypeWholePage = 0,
		PageViewTypeNormalSize = 1,
		PageViewTypePercentage = 2,
		PageViewTypePageWidth = 3,
		PageViewTypePageHeight = 4,
		PageViewTypeMultiplePages = 5
	}PVPageViewTypeConstants;
	enum
	{
		ZoomStateIndeterminate = 0,
		ZoomStateIn = 1,
		ZoomStateOut = 2,
		ZoomStateSwitch = 3
	}PVZoomStateConstants;
	enum
	{
		ColUserSortIndicatorNone = 0,
		ColUserSortIndicatorAscending = 1,
		ColUserSortIndicatorDescending = 2,
		ColUserSortIndicatorDisabled = 3
	}ColUserSortIndicatorConstants;
	enum
	{
		UserColActionDefault = 0,
		UserColActionSort = 1,
		UserColActionSortNoIndicator = 2,
		UserColActionAutoSize = 3
	}UserColActionConstants;
	enum
	{
		ShowScrollTipsOff = 0,
		ShowScrollTipsVertical = 1,
		ShowScrollTipsHorizontal = 2,
		ShowScrollTipsBoth = 3
	}ShowScrollTipsConstants;
	enum
	{
		CellNoteIndicatorShowAndFireEvent = 0,
		CellNoteIndicatorShowAndDoNotFireEvent = 1,
		CellNoteIndicatorDoNotShowAndFireEvent = 2,
		CellNoteIndicatorDoNotShowAndDoNotFireEvent = 3
	}CellNoteIndicatorConstants;
	enum
	{
		ExportRangeToTextFileCreateNewFile = 1,
		ExportRangeToTextFileAppendToExistingFile = 2,
		ExportRangeToTextFileUnformattedData = 4,
		ExportRangeToTextFileColHeaders = 8,
		ExportRangeToTextFileRowHeaders = 16,
		ExportRangeToTextFileAllHeaders = 24
	}ExportRangeToTextFileConstants;
	enum
	{
		ExportToTextFileCreateNewFile = 1,
		ExportToTextFileAppendToExistingFile = 2,
		ExportToTextFileUnformattedData = 4,
		ExportToTextFileColHeaders = 8,
		ExportToTextFileRowHeaders = 16
	}ExportToTextFileConstants;
	enum
	{
		LoadTextFileNoHeaders = 0,
		LoadTextFileColHeaders = 1,
		LoadTextFileRowHeaders = 2,
		LoadTextFileClearDataOnly = 4
	}LoadTextFileConstants;
	enum
	{
		ExportToXMLFormattedData = 0,
		ExportToXMLUnFormattedData = 1
	}ExportToXMLConstants;
	enum
	{
		PrintFlagsNone = 0,
		PrintFlagsShowCommonDialog = 1
	}PrintFlagsConstants;
	enum
	{
		MergeNone = 0,
		MergeAlways = 1,
		MergeRestricted = 2
	}MergeConstants;
	enum
	{
		TypeComboBoxAutoSearchNone = 0,
		TypeComboBoxAutoSearchSingleChar = 1,
		TypeComboBoxAutoSearchMultipleChar = 2,
		TypeComboBoxAutoSearchSingleCharGreater = 3
	}TypeComboAutoSearchConstants;
	enum
	{
		SearchFlagsNone = 0,
		SearchFlagsGreaterOrEqual = 1,
		SearchFlagsPartialMatch = 2,
		SearchFlagsValue = 4,
		SearchFlagsCaseSensitive = 8,
		SearchFlagsSortedAscending = 16,
		SearchFlagsSortedDescending = 32
	}SearchFlagsConstants;
	enum
	{
		TypeLeadingZeroIntl = 0,
		TypeLeadingZeroNo = 1,
		TypeLeadingZeroYes = 2
	}TypeLeadingZeroConstants;
	enum
	{
		TypeCurrencyNegStyleIntl = 0,
		TypeCurrencyNegStyle1 = 1,
		TypeCurrencyNegStyle2 = 2,
		TypeCurrencyNegStyle3 = 3,
		TypeCurrencyNegStyle4 = 4,
		TypeCurrencyNegStyle5 = 5,
		TypeCurrencyNegStyle6 = 6,
		TypeCurrencyNegStyle7 = 7,
		TypeCurrencyNegStyle8 = 8,
		TypeCurrencyNegStyle9 = 9,
		TypeCurrencyNegStyle10 = 10,
		TypeCurrencyNegStyle11 = 11,
		TypeCurrencyNegStyle12 = 12,
		TypeCurrencyNegStyle13 = 13,
		TypeCurrencyNegStyle14 = 14,
		TypeCurrencyNegStyle15 = 15,
		TypeCurrencyNegStyle16 = 16
	}TypeCurrencyNegStyleConstants;
	enum
	{
		TypeCurrencyPosStyleIntl = 0,
		TypeCurrencyPosStyle1 = 1,
		TypeCurrencyPosStyle2 = 2,
		TypeCurrencyPosStyle3 = 3,
		TypeCurrencyPosStyle4 = 4
	}TypeCurrencyPosStyleConstants;
	enum
	{
		TypeNumberNegStyleIntl = 0,
		TypeNumberNegStyle1 = 1,
		TypeNumberNegStyle2 = 2,
		TypeNumberNegStyle3 = 3,
		TypeNumberNegStyle4 = 4,
		TypeNumberNegStyle5 = 5
	}TypeNumberNegStyleConstants;
	enum
	{
		TypePercentNegStyleIntl = 0,
		TypePercentNegStyle1 = 1,
		TypePercentNegStyle2 = 2,
		TypePercentNegStyle3 = 3,
		TypePercentNegStyle4 = 4,
		TypePercentNegStyle5 = 5,
		TypePercentNegStyle6 = 6,
		TypePercentNegStyle7 = 7,
		TypePercentNegStyle8 = 8
	}TypePercentNegStyleConstants;
	enum
	{
		TypeTextOrientHorizontal = 0,
		TypeTextOrientVerticalLTR = 1,
		TypeTextOrientDown = 2,
		TypeTextOrientUp = 3,
		TypeTextOrientInvert = 4,
		TypeTextOrientVerticalRTL = 5
	}TypeTextOrientConstants;
	enum
	{
		GetCellSpanNo = 0,
		GetCellSpanYes = 1,
		GetCellSpanAnchor = 2
	}GetCellSpanConstants;
	enum
	{
		EventAllEvents = 0,
		EventAdvance = 1,
		EventAfterUserSort = 2,
		EventBeforeUserSort = 3,
		EventBlockSelected = 4,
		EventButtonClicked = 5,
		EventChange = 6,
		EventClick = 7,
		EventColWidthChange = 8,
		EventComboCloseUp = 9,
		EventComboDropDown = 10,
		EventComboSelChange = 11,
		EventCustomFunction = 12,
		EventDataColConfig = 13,
		EventDataFill = 14,
		EventDblClick = 15,
		EventDragDropBlock = 16,
		EventDrawItem = 17,
		EventEditChange = 18,
		EventEditError = 19,
		EventEditMode = 20,
		EventEnterRow = 21,
		EventKeyDown = 22,
		EventKeyPress = 23,
		EventKeyUp = 24,
		EventLeaveCell = 25,
		EventLeaveRow = 26,
		EventOLECompleteDrag = 27,
		EventOLEDragDrop = 28,
		EventOLEDragOver = 29,
		EventOLEGiveFeedback = 30,
		EventOLESetData = 31,
		EventOLEStartDrag = 32,
		EventPrintAbort = 33,
		EventPrintMsgBox = 34,
		EventQueryAdvance = 35,
		EventQueryData = 36,
		EventRightClick = 37,
		EventRowHeightChange = 38,
		EventSelChange = 39,
		EventTextTipFetch = 40,
		EventTopLeftChange = 41,
		EventUserFormulaEntered = 42,
		EventVirtualClearData = 43,
		EventSheetChanging = 44,
		EventSheetChanged = 45,
		EventTabScrolling = 46,
		EventTabScrolled = 47,
		EventBeforeEditMode = 48,
		EventDataLoaded = 49,
		EventBeforeScrollTip = 50,
		EventBeforeColMove = 51,
		EventBeforeRowMove = 52
	}EVENTENABLEDConstants;
	enum
	{
		TabStripPolicyAsNeeded = 0,
		TabStripPolicyAlways = 1,
		TabStripPolicyNever = 2
	}TabStripPolicyConstants;
	enum
	{
		ActiveCellHighlightStyleOff = 0,
		ActiveCellHighlightStyleNormal = 1
	}ActiveCellHighlightStyleConstants;
	enum
	{
		BeforeEditModeKeyboard = 0,
		BeforeEditModeMouse = 1,
		BeforeEditModeCode = 2
	}BeforeEditModeActionConstants;
	enum
	{
		BeforeEditModeCursorPosDefault = 0,
		BeforeEditModeCursorPosSelectAll = 1,
		BeforeEditModeCursorPosBeginning = 2,
		BeforeEditModeCursorPosEnd = 3,
		BeforeEditModeCursorPosMouse = 4,
		BeforeEditModeCursorPosDecimal = 5
	}BeforeEditModeCursorPosConstants;
	enum
	{
		PrintScalingMethodNone = 0,
		PrintScalingMethodSmartPrint = 1,
		PrintScalingMethodZoom = 2,
		PrintScalingMethodBestFit = 3
	}PrintScalingMethodConstants;
	enum
	{
		ButtonDrawModeAlways = 0,
		ButtonDrawModeCurrentCell = 1,
		ButtonDrawModeCurrentColumn = 2,
		ButtonDrawModeCurrentRow = 4,
		ButtonDrawModeAlwaysButton = 8,
		ButtonDrawModeAlwaysCombo = 16
	}ButtonDrawModeConstants;
	enum
	{
		ClipboardOptionsNoHeaders = 0,
		ClipboardOptionsCopyRowHeaders = 1,
		ClipboardOptionsPasteRowHeaders = 2,
		ClipboardOptionsCopyColumnHeaders = 4,
		ClipboardOptionsPasteColumnHeaders = 8,
		ClipboardOptionsCopyPasteAllHeaders = 15
	}ClipboardOptionsConstants;
	enum
	{
		SelectBlockOptionsColumns = 1,
		SelectBlockOptionsRows = 2,
		SelectBlockOptionsBlocks = 4,
		SelectBlockOptionsAll = 8
	}SelectBlockOptionsConstants;
	enum
	{
		VScrollSpecialTypeNoHomeEnd = 1,
		VScrollSpecialNoPageUpDown = 2,
		VScrollSpecialTypeNoLineUpDown = 4
	}VScrollSpecialTypeConstants;
	enum
	{
		CustomFunctionFlagsNone = 0,
		CustomFunctionFlagsWantCellRef = 1,
		CustomFunctionFlagsWantRangeRef = 2
	}CustomFunctionFlagsConstants;
	enum
	{
		ValueTypeLong = 0,
		ValueTypeDouble = 1,
		ValueTypeString = 2,
		ValueTypeCellRef = 3,
		ValueTypeRangeRef = 4
	}ValueTypeConstants;
	enum
	{
		ValueStatusOK = 0,
		ValueStatusError = 1,
		ValueStatusEmpty = 2
	}ValueStatusConstants;
	enum
	{
		ActionKeyClear = 0,
		ActionKeyCurrent = 1,
		ActionKeyPopup = 2
	}ActionKeyConstants;
	enum
	{
		CellBorderIndexLeft = 1,
		CellBorderIndexRight = 2,
		CellBorderIndexTop = 4,
		CellBorderIndexBottom = 8,
		CellBorderIndexOutline = 16
	}CellBorderIndexConstants;
	enum
	{
		RefStyleDefault = 0,
		RefStyleA1 = 1,
		RefStyleR1C1 = 2
	}RefStyleConstants;
	enum
	{
		BeforeUserSortStateNone = 0,
		BeforeUserSortStateAcending = 1,
		BeforeUserSortStateDescending = 2
	}BeforeUserSortStateConstants;
	enum
	{
		BeforeUserSortDefaultActionCancel = 0,
		BeforeUserSortDefaultActionAutoSort = 1,
		BeforeUserSortDefaultActionManualSort = 2
	}BeforeUserSortDefaultActionConstants;
	enum
	{
		TextTipFetchMultilineSingle = 0,
		TextTipFetchMultilineMultiple = 1,
		TextTipFetchMultilineAuto = 2
	}TextTipFetchMultilineConstants;
	enum
	{
		PictureTypeUnknown = 0,
		PictureTypeBMP = 1,
		PictureTypeGIF = 2,
		PictureTypeJPEG = 3,
		PictureTypePNG = 4,
		PictureTypeICO = 5,
		PictureTypeTIFF = 6,
		PictureTypeTGA = 7,
		PictureTypePCX = 8,
		PictureTypeWBMP = 9,
		PictureTypeWMF = 10,
		PictureTypeJP2 = 11,
		PictureTypeJPC = 12,
		PictureTypePGX = 13,
		PictureTypePNM = 14,
		PictureTypeRAS = 15
	}PictureTypeConstants;
	enum
	{
		ExcelSaveFlagNone = 0,
		ExcelSaveFlagNoFormulas = 1
	}ExcelSaveFlagConstants;
	enum
	{
		fpOLEDropNone = 0,
		fpOLEDropManual = 1
	}OLEDropModeConstants;
	enum
	{
		fpEnter = 0,
		fpLeave = 1,
		fpOver = 2
	}OLEDragOverConstants;
	enum
	{
		fpCFText = 1,
		fpCFBitmap = 2,
		fpCFMetafile = 3,
		fpCFDIB = 8,
		fpCFPalette = 9,
		fpCFEMetafile = 14,
		fpCFFiles = 15,
		fpCFRTF = -16639
	}ClipFormatConstants;
	enum
	{
		fpOLEDropEffectNone = 0,
		fpOLEDropEffectCopy = 1,
		fpOLEDropEffectMove = 2,
		fpOLEDropEffectScroll = 7483648
	}OLEDropModeEffectConstants;


	// Attributes
public:
	long GetActiveCol();
	void SetActiveCol(long);
	long GetActiveRow();
	void SetActiveRow(long);
	BOOL GetAllowCellOverflow();
	void SetAllowCellOverflow(BOOL);
	BOOL GetAllowDragDrop();
	void SetAllowDragDrop(BOOL);
	BOOL GetAllowMultiBlocks();
	void SetAllowMultiBlocks(BOOL);
	BOOL GetAllowUserFormulas();
	void SetAllowUserFormulas(BOOL);
	BOOL GetArrowsExitEditMode();
	void SetArrowsExitEditMode(BOOL);
	BOOL GetAutoCalc();
	void SetAutoCalc(BOOL);
	BOOL GetAutoClipboard();
	void SetAutoClipboard(BOOL);
	BOOL GetAutoSize();
	void SetAutoSize(BOOL);
	BOOL GetBlockMode();
	void SetBlockMode(BOOL);
	long GetButtonDrawMode();
	void SetButtonDrawMode(long);
	long GetCellType();
	void SetCellType(long);
	BOOL GetChangeMade();
	void SetChangeMade(BOOL);
	CString GetClip();
	void SetClip(LPCTSTR);
	CString GetClipValue();
	void SetClipValue(LPCTSTR);
	long GetCol();
	void SetCol(long);
	long GetCol2();
	void SetCol2(long);
	BOOL GetColHidden();
	void SetColHidden(BOOL);
	BOOL GetColPageBreak();
	void SetColPageBreak(BOOL);
	long GetColsFrozen();
	void SetColsFrozen(long);
	long GetCursorStyle();
	void SetCursorStyle(long);
	long GetCursorType();
	void SetCursorType(long);
	BOOL GetDataChanged();
	void SetDataChanged(BOOL);
	long GetDataColCnt();
	void SetDataColCnt(long);
	CString GetDataField();
	void SetDataField(LPCTSTR);
	BOOL GetDataFillEvent();
	void SetDataFillEvent(BOOL);
	long GetDataRowCnt();
	void SetDataRowCnt(long);
	LPUNKNOWN GetDataSource();
	void SetDataSource(LPUNKNOWN);
	BOOL GetDAutoCellTypes();
	void SetDAutoCellTypes(BOOL);
	BOOL GetDAutoFill();
	void SetDAutoFill(BOOL);
	BOOL GetDAutoHeadings();
	void SetDAutoHeadings(BOOL);
	BOOL GetDAutoSave();
	void SetDAutoSave(BOOL);
	long GetDAutoSizeCols();
	void SetDAutoSizeCols(long);
	BOOL GetDInformActiveRowChange();
	void SetDInformActiveRowChange(BOOL);
	long GetEditEnterAction();
	void SetEditEnterAction(long);
	BOOL GetEditMode();
	void SetEditMode(BOOL);
	BOOL GetEditModePermanent();
	void SetEditModePermanent(BOOL);
	BOOL GetEditModeReplace();
	void SetEditModeReplace(BOOL);
	CString GetFormula();
	void SetFormula(LPCTSTR);
	unsigned long GetGrayAreaBackColor();
	void SetGrayAreaBackColor(unsigned long);
	unsigned long GetGridColor();
	void SetGridColor(unsigned long);
	BOOL GetGridShowHoriz();
	void SetGridShowHoriz(BOOL);
	BOOL GetGridShowVert();
	void SetGridShowVert(BOOL);
	BOOL GetGridSolid();
	void SetGridSolid(BOOL);
	long GetHDCPrinter();
	void SetHDCPrinter(long);
	short GetInterfaceDesigner();
	void SetInterfaceDesigner(short);
	BOOL GetIsBlockSelected();
	void SetIsBlockSelected(BOOL);
	long GetLeftCol();
	void SetLeftCol(long);
	BOOL GetLock();
	void SetLock(BOOL);
	unsigned long GetLockBackColor();
	void SetLockBackColor(unsigned long);
	unsigned long GetLockForeColor();
	void SetLockForeColor(unsigned long);
	long GetMaxCols();
	void SetMaxCols(long);
	long GetMaxRows();
	void SetMaxRows(long);
	double GetMaxTextCellHeight();
	void SetMaxTextCellHeight(double);
	double GetMaxTextCellWidth();
	void SetMaxTextCellWidth(double);
	BOOL GetMoveActiveOnFocus();
	void SetMoveActiveOnFocus(BOOL);
	BOOL GetNoBeep();
	void SetNoBeep(BOOL);
	BOOL GetNoBorder();
	void SetNoBorder(BOOL);
	long GetOperationMode();
	void SetOperationMode(long);
	CString GetPrintAbortMsg();
	void SetPrintAbortMsg(LPCTSTR);
	BOOL GetPrintBorder();
	void SetPrintBorder(BOOL);
	BOOL GetPrintColHeaders();
	void SetPrintColHeaders(BOOL);
	BOOL GetPrintColor();
	void SetPrintColor(BOOL);
	CString GetPrintFooter();
	void SetPrintFooter(LPCTSTR);
	BOOL GetPrintGrid();
	void SetPrintGrid(BOOL);
	CString GetPrintHeader();
	void SetPrintHeader(LPCTSTR);
	CString GetPrintJobName();
	void SetPrintJobName(LPCTSTR);
	long GetPrintMarginBottom();
	void SetPrintMarginBottom(long);
	long GetPrintMarginLeft();
	void SetPrintMarginLeft(long);
	long GetPrintMarginRight();
	void SetPrintMarginRight(long);
	long GetPrintMarginTop();
	void SetPrintMarginTop(long);
	short GetPrintPageEnd();
	void SetPrintPageEnd(short);
	short GetPrintPageStart();
	void SetPrintPageStart(short);
	BOOL GetPrintRowHeaders();
	void SetPrintRowHeaders(BOOL);
	BOOL GetPrintShadows();
	void SetPrintShadows(BOOL);
	long GetPrintType();
	void SetPrintType(long);
	BOOL GetPrintUseDataMax();
	void SetPrintUseDataMax(BOOL);
	BOOL GetProcessTab();
	void SetProcessTab(BOOL);
	BOOL GetProtect();
	void SetProtect(BOOL);
	BOOL GetReDraw();
	void SetReDraw(BOOL);
	BOOL GetRestrictCols();
	void SetRestrictCols(BOOL);
	BOOL GetRestrictRows();
	void SetRestrictRows(BOOL);
	BOOL GetRetainSelBlock();
	void SetRetainSelBlock(BOOL);
	long GetRow();
	void SetRow(long);
	long GetRow2();
	void SetRow2(long);
	BOOL GetRowHidden();
	void SetRowHidden(BOOL);
	BOOL GetRowPageBreak();
	void SetRowPageBreak(BOOL);
	long GetRowsFrozen();
	void SetRowsFrozen(long);
	BOOL GetScrollBarExtMode();
	void SetScrollBarExtMode(BOOL);
	BOOL GetScrollBarMaxAlign();
	void SetScrollBarMaxAlign(BOOL);
	long GetScrollBars();
	void SetScrollBars(long);
	BOOL GetScrollBarShowMax();
	void SetScrollBarShowMax(BOOL);
	long GetSelBlockCol();
	void SetSelBlockCol(long);
	long GetSelBlockCol2();
	void SetSelBlockCol2(long);
	long GetSelBlockRow();
	void SetSelBlockRow(long);
	long GetSelBlockRow2();
	void SetSelBlockRow2(long);
	long GetSelectBlockOptions();
	void SetSelectBlockOptions(long);
	long GetSelLength();
	void SetSelLength(long);
	long GetSelModeIndex();
	void SetSelModeIndex(long);
	BOOL GetSelModeSelected();
	void SetSelModeSelected(BOOL);
	long GetSelStart();
	void SetSelStart(long);
	CString GetSelText();
	void SetSelText(LPCTSTR);
	unsigned long GetShadowColor();
	void SetShadowColor(unsigned long);
	unsigned long GetShadowDark();
	void SetShadowDark(unsigned long);
	unsigned long GetShadowText();
	void SetShadowText(unsigned long);
	long GetStartingColNumber();
	void SetStartingColNumber(long);
	long GetStartingRowNumber();
	void SetStartingRowNumber(long);
	long GetTopRow();
	void SetTopRow(long);
	long GetTypeButtonAlign();
	void SetTypeButtonAlign(long);
	unsigned long GetTypeButtonBorderColor();
	void SetTypeButtonBorderColor(unsigned long);
	unsigned long GetTypeButtonColor();
	void SetTypeButtonColor(unsigned long);
	unsigned long GetTypeButtonDarkColor();
	void SetTypeButtonDarkColor(unsigned long);
	unsigned long GetTypeButtonLightColor();
	void SetTypeButtonLightColor(unsigned long);
	CPicture GetTypeButtonPicture();
	void SetTypeButtonPicture(LPDISPATCH);
	CPicture GetTypeButtonPictureDown();
	void SetTypeButtonPictureDown(LPDISPATCH);
	short GetTypeButtonShadowSize();
	void SetTypeButtonShadowSize(short);
	CString GetTypeButtonText();
	void SetTypeButtonText(LPCTSTR);
	unsigned long GetTypeButtonTextColor();
	void SetTypeButtonTextColor(unsigned long);
	long GetTypeButtonType();
	void SetTypeButtonType(long);
	BOOL GetTypeCheckCenter();
	void SetTypeCheckCenter(BOOL);
	CString GetTypeCheckText();
	void SetTypeCheckText(LPCTSTR);
	long GetTypeCheckTextAlign();
	void SetTypeCheckTextAlign(long);
	short GetTypeComboBoxCount();
	void SetTypeComboBoxCount(short);
	short GetTypeComboBoxCurSel();
	void SetTypeComboBoxCurSel(short);
	BOOL GetTypeComboBoxEditable();
	void SetTypeComboBoxEditable(BOOL);
	short GetTypeComboBoxIndex();
	void SetTypeComboBoxIndex(short);
	CString GetTypeComboBoxList();
	void SetTypeComboBoxList(LPCTSTR);
	CString GetTypeComboBoxString();
	void SetTypeComboBoxString(LPCTSTR);
	BOOL GetTypeDateCentury();
	void SetTypeDateCentury(BOOL);
	long GetTypeDateFormat();
	void SetTypeDateFormat(long);
	CString GetTypeDateMax();
	void SetTypeDateMax(LPCTSTR);
	CString GetTypeDateMin();
	void SetTypeDateMin(LPCTSTR);
	short GetTypeDateSeparator();
	void SetTypeDateSeparator(short);
	long GetTypeEditCharCase();
	void SetTypeEditCharCase(long);
	long GetTypeEditCharSet();
	void SetTypeEditCharSet(long);
	BOOL GetTypeEditMultiLine();
	void SetTypeEditMultiLine(BOOL);
	BOOL GetTypeEditPassword();
	void SetTypeEditPassword(BOOL);
	long GetTypeHAlign();
	void SetTypeHAlign(long);
	long GetTypeOwnerDrawStyle();
	void SetTypeOwnerDrawStyle(long);
	CString GetTypePicDefaultText();
	void SetTypePicDefaultText(LPCTSTR);
	CString GetTypePicMask();
	void SetTypePicMask(LPCTSTR);
	BOOL GetTypePictCenter();
	void SetTypePictCenter(BOOL);
	BOOL GetTypePictMaintainScale();
	void SetTypePictMaintainScale(BOOL);
	CPicture GetTypePictPicture();
	void SetTypePictPicture(LPDISPATCH);
	BOOL GetTypePictStretch();
	void SetTypePictStretch(BOOL);
	BOOL GetTypeSpin();
	void SetTypeSpin(BOOL);
	BOOL GetTypeTextPrefix();
	void SetTypeTextPrefix(BOOL);
	BOOL GetTypeTextShadow();
	void SetTypeTextShadow(BOOL);
	BOOL GetTypeTextShadowIn();
	void SetTypeTextShadowIn(BOOL);
	BOOL GetTypeTextWordWrap();
	void SetTypeTextWordWrap(BOOL);
	long GetTypeTime24Hour();
	void SetTypeTime24Hour(long);
	CString GetTypeTimeMax();
	void SetTypeTimeMax(LPCTSTR);
	CString GetTypeTimeMin();
	void SetTypeTimeMin(LPCTSTR);
	BOOL GetTypeTimeSeconds();
	void SetTypeTimeSeconds(BOOL);
	short GetTypeTimeSeparator();
	void SetTypeTimeSeparator(short);
	long GetUnitType();
	void SetUnitType(long);
	long GetUserResize();
	void SetUserResize(long);
	long GetUserResizeCol();
	void SetUserResizeCol(long);
	long GetUserResizeRow();
	void SetUserResizeRow(long);
	CString GetValue();
	void SetValue(LPCTSTR);
	long GetVirtualCurRowCount();
	void SetVirtualCurRowCount(long);
	long GetVirtualCurTop();
	void SetVirtualCurTop(long);
	long GetVirtualMaxRows();
	void SetVirtualMaxRows(long);
	BOOL GetVirtualMode();
	void SetVirtualMode(BOOL);
	long GetVirtualOverlap();
	void SetVirtualOverlap(long);
	long GetVirtualRows();
	void SetVirtualRows(long);
	BOOL GetVirtualScrollBuffer();
	void SetVirtualScrollBuffer(BOOL);
	long GetVisibleCols();
	void SetVisibleCols(long);
	long GetVisibleRows();
	void SetVisibleRows(long);
	BOOL GetVScrollSpecial();
	void SetVScrollSpecial(BOOL);
	long GetVScrollSpecialType();
	void SetVScrollSpecialType(long);
	BOOL GetFontBold();
	void SetFontBold(BOOL);
	BOOL GetFontItalic();
	void SetFontItalic(BOOL);
	CString GetFontName();
	void SetFontName(LPCTSTR);
	float GetFontSize();
	void SetFontSize(float);
	BOOL GetFontStrikethru();
	void SetFontStrikethru(BOOL);
	BOOL GetFontUnderline();
	void SetFontUnderline(BOOL);
	CPicture GetCursorIcon();
	void SetCursorIcon(LPDISPATCH);
	long GetPrintOrientation();
	void SetPrintOrientation(long);
	long GetBackColorStyle();
	void SetBackColorStyle(long);
	BOOL GetFormulaSync();
	void SetFormulaSync(BOOL);
	long GetTypeCheckType();
	void SetTypeCheckType(long);
	long GetAppearance();
	void SetAppearance(long);
	short GetTypeComboBoxMaxDrop();
	void SetTypeComboBoxMaxDrop(short);
	short GetTypeMaxEditLen();
	void SetTypeMaxEditLen(short);
	short GetTypeComboBoxWidth();
	void SetTypeComboBoxWidth(short);
	long GetTextTip();
	void SetTextTip(long);
	long GetTextTipDelay();
	void SetTextTipDelay(long);
	long GetScrollBarTrack();
	void SetScrollBarTrack(long);
	long GetTypeVAlign();
	void SetTypeVAlign(long);
	long GetClipboardOptions();
	void SetClipboardOptions(long);
	long GetPrintPageOrder();
	void SetPrintPageOrder(long);
	long GetPrintPageCount();
	void SetPrintPageCount(long);
	long GetPrintFirstPageNumber();
	void SetPrintFirstPageNumber(long);
	long GetPrintNextPageBreakCol();
	void SetPrintNextPageBreakCol(long);
	long GetPrintNextPageBreakRow();
	void SetPrintNextPageBreakRow(long);
	long GetTypeComboBoxhWnd();
	void SetTypeComboBoxhWnd(long);
	unsigned long GetSelBackColor();
	void SetSelBackColor(unsigned long);
	unsigned long GetSelForeColor();
	void SetSelForeColor(unsigned long);
	short GetTwoDigitYearMax();
	void SetTwoDigitYearMax(short);
	long GetOLEDropMode();
	void SetOLEDropMode(long);
	CString GetDataMember();
	void SetDataMember(LPCTSTR);
	CString GetCellNote();
	void SetCellNote(LPCTSTR);
	long GetUserColAction();
	void SetUserColAction(long);
	long GetShowScrollTips();
	void SetShowScrollTips(long);
	long GetCellNoteIndicator();
	void SetCellNoteIndicator(long);
	BOOL GetTypeEllipses();
	void SetTypeEllipses(BOOL);
	BOOL GetScriptEnhanced();
	void SetScriptEnhanced(BOOL);
	long GetColMerge();
	void SetColMerge(long);
	long GetRowMerge();
	void SetRowMerge(long);
	CString GetColID();
	void SetColID(LPCTSTR);
	long GetRowHeaderCols();
	void SetRowHeaderCols(long);
	long GetRowHeadersAutoTextIndex();
	void SetRowHeadersAutoTextIndex(long);
	long GetColHeaderRows();
	void SetColHeaderRows(long);
	long GetColHeadersAutoTextIndex();
	void SetColHeadersAutoTextIndex(long);
	long GetColHeadersUserSortIndex();
	void SetColHeadersUserSortIndex(long);
	long GetTypeComboBoxAutoSearch();
	void SetTypeComboBoxAutoSearch(long);
	double GetTypeSpinInc();
	void SetTypeSpinInc(double);
	BOOL GetTypeSpinWrap();
	void SetTypeSpinWrap(BOOL);
	BOOL GetTypeNegRed();
	void SetTypeNegRed(BOOL);
	double GetTypeCurrencyMin();
	void SetTypeCurrencyMin(double);
	double GetTypeCurrencyMax();
	void SetTypeCurrencyMax(double);
	CString GetTypeCurrencyDecimal();
	void SetTypeCurrencyDecimal(LPCTSTR);
	CString GetTypeCurrencySeparator();
	void SetTypeCurrencySeparator(LPCTSTR);
	CString GetTypeCurrencySymbol();
	void SetTypeCurrencySymbol(LPCTSTR);
	long GetTypeCurrencyLeadingZero();
	void SetTypeCurrencyLeadingZero(long);
	short GetTypeCurrencyDecPlaces();
	void SetTypeCurrencyDecPlaces(short);
	long GetTypeCurrencyNegStyle();
	void SetTypeCurrencyNegStyle(long);
	long GetTypeCurrencyPosStyle();
	void SetTypeCurrencyPosStyle(long);
	BOOL GetTypeCurrencyShowSep();
	void SetTypeCurrencyShowSep(BOOL);
	BOOL GetTypeCurrencyShowSymbol();
	void SetTypeCurrencyShowSymbol(BOOL);
	double GetTypeNumberMin();
	void SetTypeNumberMin(double);
	double GetTypeNumberMax();
	void SetTypeNumberMax(double);
	CString GetTypeNumberDecimal();
	void SetTypeNumberDecimal(LPCTSTR);
	CString GetTypeNumberSeparator();
	void SetTypeNumberSeparator(LPCTSTR);
	long GetTypeNumberLeadingZero();
	void SetTypeNumberLeadingZero(long);
	short GetTypeNumberDecPlaces();
	void SetTypeNumberDecPlaces(short);
	long GetTypeNumberNegStyle();
	void SetTypeNumberNegStyle(long);
	BOOL GetTypeNumberShowSep();
	void SetTypeNumberShowSep(BOOL);
	double GetTypePercentMin();
	void SetTypePercentMin(double);
	double GetTypePercentMax();
	void SetTypePercentMax(double);
	CString GetTypePercentDecimal();
	void SetTypePercentDecimal(LPCTSTR);
	short GetTypePercentDecPlaces();
	void SetTypePercentDecPlaces(short);
	long GetTypePercentNegStyle();
	void SetTypePercentNegStyle(long);
	long GetTypeTextOrient();
	void SetTypeTextOrient(long);
	CString GetCellTag();
	void SetCellTag(LPCTSTR);
	BOOL GetAllowEditOverflow();
	void SetAllowEditOverflow(BOOL);
	long GetColHeadersAutoText();
	void SetColHeadersAutoText(long);
	BOOL GetColHeadersShow();
	void SetColHeadersShow(BOOL);
	long GetRowHeadersAutoText();
	void SetRowHeadersAutoText(long);
	BOOL GetRowHeadersShow();
	void SetRowHeadersShow(BOOL);
	long GetTypePercentLeadingZero();
	void SetTypePercentLeadingZero(long);
	short GetSheetCount();
	void SetSheetCount(short);
	short GetActiveSheet();
	void SetActiveSheet(short);
	short GetTabStripLeftSheet();
	void SetTabStripLeftSheet(short);
	COleFont GetTabStripFont();
	void SetTabStripFont(LPDISPATCH);
	CString GetSheetName();
	void SetSheetName(LPCTSTR);
	long GetTabStripPolicy();
	void SetTabStripPolicy(long);
	double GetTabStripRatio();
	void SetTabStripRatio(double);
	double GetPrintZoomFactor();
	void SetPrintZoomFactor(double);
	short GetScrollBarWidth();
	void SetScrollBarWidth(short);
	short GetScrollBarHeight();
	void SetScrollBarHeight(short);
	long GetActiveCellHighlightStyle();
	void SetActiveCellHighlightStyle(long);
	long GetPrintScalingMethod();
	void SetPrintScalingMethod(long);
	short GetPrintBestFitPagesWide();
	void SetPrintBestFitPagesWide(short);
	short GetPrintBestFitPagesTall();
	void SetPrintBestFitPagesTall(short);
	BOOL GetPrintCenterOnPageH();
	void SetPrintCenterOnPageH(BOOL);
	BOOL GetPrintCenterOnPageV();
	void SetPrintCenterOnPageV(BOOL);
	BOOL GetAllowColMove();
	void SetAllowColMove(BOOL);
	BOOL GetAllowRowMove();
	void SetAllowRowMove(BOOL);
	double GetTypeScientificMin();
	void SetTypeScientificMin(double);
	double GetTypeScientificMax();
	void SetTypeScientificMax(double);
	CString GetTypeScientificDecimal();
	void SetTypeScientificDecimal(LPCTSTR);
	short GetTypeScientificDecPlaces();
	void SetTypeScientificDecPlaces(short);
	unsigned long GetScrollBarHColor();
	void SetScrollBarHColor(unsigned long);
	unsigned long GetScrollBarVColor();
	void SetScrollBarVColor(unsigned long);
	short GetSheet();
	void SetSheet(short);
	short GetSheetSendingEvent();
	void SetSheetSendingEvent(short);
	BOOL GetSheetVisible();
	void SetSheetVisible(BOOL);
	long GetSelectionCount();
	void SetSelectionCount(long);
	long GetAppearanceStyle();
	void SetAppearanceStyle(long);
	long GetTabEnhancedShape();
	void SetTabEnhancedShape(long);
	unsigned long GetCellNoteIndicatorColor();
	void SetCellNoteIndicatorColor(unsigned long);
	long GetCellNoteIndicatorShape();
	void SetCellNoteIndicatorShape(long);
	long GetTabStripButtonPolicy();
	void SetTabStripButtonPolicy(long);
	long GetHighlightHeaders();
	void SetHighlightHeaders(long);
	long GetHighlightStyle();
	void SetHighlightStyle(long);
	unsigned long GetHighlightAlphaBlendColor();
	void SetHighlightAlphaBlendColor(unsigned long);
	short GetHighlightAlphaBlend();
	void SetHighlightAlphaBlend(short);
	CString GetTypeCustomName();
	void SetTypeCustomName(LPCTSTR);
	long GetTypeCustomStyle();
	void SetTypeCustomStyle(long);
	VARIANT GetTypeCustomItemData();
	void SetTypeCustomItemData(const VARIANT&);
	long GetUseVisualStyles();
	void SetUseVisualStyles(long);
	BOOL GetEnhanceStaticCells();
	void SetEnhanceStaticCells(BOOL);
	long GetScrollBarStyle();
	void SetScrollBarStyle(long);
	OLE_COLOR GetBackColor();
	void SetBackColor(OLE_COLOR);
	short GetBorderStyle();
	void SetBorderStyle(short);
	BOOL GetEnabled();
	void SetEnabled(BOOL);
	COleFont GetFont();
	void SetFont(LPDISPATCH);
	OLE_COLOR GetForeColor();
	void SetForeColor(OLE_COLOR);
	OLE_HANDLE GetHWnd();
	void SetHWnd(OLE_HANDLE);
	CString GetText();
	void SetText(LPCTSTR);

	// Operations
public:
	double GetColWidth(long lCol);
	void SetColWidth(long lCol, double newValue);
	double GetMaxTextColWidth(long lCol);
	void SetMaxTextColWidth(long lCol, double newValue);
	double GetMaxTextRowHeight(long lRow);
	void SetMaxTextRowHeight(long lRow, double newValue);
	double GetRowHeight(long lRow);
	void SetRowHeight(long lRow, double newValue);
	long GetSortKey(short nIndex);
	void SetSortKey(short nIndex, long nNewValue);
	long GetSortKeyOrder(short nIndex);
	void SetSortKeyOrder(short nIndex, long nNewValue);
	CPicture GetTypeCheckPicture(short Index);
	void SetTypeCheckPicture(short Index, LPDISPATCH newValue);
	BOOL AddCustomFunction(LPCTSTR FunctionName, short ParameterCnt);
	BOOL AddCustomFunctionExt(LPCTSTR FunctionName, short MinParamCnt, short MaxParamCnt, long Flags);
	void CFGetCellParam(short Param, long* Col, long* Row);
	double CFGetDoubleParam(short Param);
	double CFGetDoubleParamExt(short Param, double* ParamValue);
	long CFGetLongParam(short Param);
	BOOL CFGetParamInfo(short Param, long* Type, long* Status);
	void CFGetRangeParam(short Param, long* Col, long* Row, long* Col2, long* Row2);
	CString CFGetStringParam(short Param);
	void CFSetResult(const VARIANT& Var);
	CString ColNumberToLetter(long HeaderNumber);
	void ColWidthToTwips(float Width, long* Twips);
	void GetBottomRightCell(long* Col, long* Row);
	BOOL GetCellDirtyFlag(long Col, long Row);
	void GetCellFromScreenCoord(long* Col, long* Row, long x, long y);
	BOOL GetCellPos(long Col, long Row, long* x, long* y, long* Width, long* Height);
	void GetClientArea(long* Width, long* Height);
	long GetColItemData(long Col);
	CString QueryCustomName(LPCTSTR Name);
	CString GetCustomName(LPCTSTR Name);
	BOOL GetDataFillData(VARIANT* Var, short VarType);
	void GetFirstValidCell(long* Col, long* Row);
	long GetItemData();
	BOOL GetIteration(short* MaxIterations, double* MaxChange);
	void GetLastValidCell(long* Col, long* Row);
	long GetMultiSelItem(long SelPrev);
	long GetRefStyle();
	long GetRowItemData(long Row);
	BOOL GetText(long Col, long Row, VARIANT* Var);
	BOOL IsCellSelected(long Col, long Row);
	BOOL IsFormulaValid(LPCTSTR Formula);
	BOOL IsVisible(long Col, long Row, BOOL Partial);
	BOOL LoadFromFile(LPCTSTR FileName);
	BOOL LoadTabFile(LPCTSTR FileName);
	void RowHeightToTwips(long Row, float Height, long* Twips);
	BOOL SaveTabFile(LPCTSTR FileName);
	BOOL SaveToFile(LPCTSTR FileName, BOOL DataOnly);
	BOOL SetCellDirtyFlag(long Col, long Row, BOOL Dirty);
	void SetColItemData(long Col, long Value);
	BOOL SetCustomName(LPCTSTR Name, LPCTSTR Value);
	BOOL SetDataFillData(const VARIANT& Var);
	void SetItemData(long Value);
	void SetIteration(BOOL Iteration, short MaxIterations, double MaxChange);
	void SetRefStyle(long RefStyle);
	void SetRowItemData(long Row, long Value);
	void SetText(long Col, long Row, const VARIANT& Var);
	void TwipsToColWidth(long Twips, float* ColWidth);
	void TwipsToRowHeight(long Row, long Twips, float* RowHeight);
	BOOL GetActionKey(long Action, BOOL* fShift, BOOL* fCtrl, short* Key);
	BOOL SetActionKey(long Action, BOOL fShift, BOOL fCtrl, short Key);
	BOOL GetOddEvenRowColor(long* clrBackOdd, long* clrForeOdd, long* clrBackEven, long* clrForeEven);
	BOOL SetOddEvenRowColor(long clrBackOdd, long clrForeOdd, long clrBackEven, long clrForeEven);
	BOOL GetFloat(long Col, long Row, double* Value);
	BOOL SetFloat(long Col, long Row, double Value);
	BOOL GetInteger(long Col, long Row, long* Value);
	BOOL SetInteger(long Col, long Row, long Value);
	void SetCalText(LPCTSTR ShortDays, LPCTSTR LongDays, LPCTSTR ShortMonths, LPCTSTR LongMonths, LPCTSTR OkText, LPCTSTR CancelText);
	BOOL GetTextTipAppearance(BSTR* FontName, short* FontSize, BOOL* FontBold, BOOL* FontItalic, long* BackColor, long* ForeColor);
	BOOL SetTextTipAppearance(LPCTSTR FontName, short FontSize, BOOL FontBold, BOOL FontItalic, long BackColor, long ForeColor);
	BOOL ExportToHTML(LPCTSTR FileName, BOOL AppendFlag, LPCTSTR LogFile);
	BOOL ExportRangeToHTML(long Col, long Row, long Col2, long Row2, LPCTSTR FileName, BOOL AppendFlag, LPCTSTR LogFile);
	BOOL GetArray(long ColLeft, long RowTop, const VARIANT& VarArray);
	BOOL SetArray(long ColLeft, long RowTop, const VARIANT& VarArray);
	short IsExcelFile(LPCTSTR FileName);
	BOOL GetExcelSheetList(LPCTSTR FileName, const VARIANT& VarArray, short* ListCount, LPCTSTR LogFileName, short* WorkbookHandle, BOOL Replace);
	BOOL ImportExcelSheet(short WorkbookHandle, const VARIANT& Sheet);
	BOOL ExportToExcel(LPCTSTR FileName, LPCTSTR SheetName, LPCTSTR LogFileName);
	BOOL EnumCustomFunction(LPCTSTR PrevFuncName, BSTR* FuncName);
	BOOL GetCustomFunction(LPCTSTR FuncName, short* MinArgs, short* MaxArgs, long* Flags);
	BOOL RemoveCustomFunction(LPCTSTR FuncName);
	BOOL ReCalcCell(long Col, long Row);
	void OLEDrag();
	long GetColUserSortIndicator(long lCol);
	void SetColUserSortIndicator(long lCol, long nNewValue);
	BOOL IsFetchCellNote();
	BOOL ExportToXML(LPCTSTR FileName, LPCTSTR Root, LPCTSTR Collection, long Flags, LPCTSTR LogFile);
	BOOL ExportRangeToXML(long Col, long Row, long Col2, long Row2, LPCTSTR FileName, LPCTSTR Root, LPCTSTR Collection, long Flags, LPCTSTR LogFile);
	BOOL ExportToXMLBuffer(LPCTSTR Root, LPCTSTR Collection, BSTR* Buff, long Flags, LPCTSTR LogFile);
	BOOL ExportRangeToXMLBuffer(long Col, long Row, long Col2, long Row2, LPCTSTR Root, LPCTSTR Collection, BSTR* Buff, long Flags, LPCTSTR LogFile);
	BOOL OwnerPrintDraw(long hDC, long Left, long Top, long Right, long Bottom, short Page);
	BOOL OwnerPrintPageCount(long hDC, long Left, long Top, long Right, long Bottom, short* PageCount);
	BOOL ExportRangeToTextFile(long Col, long Row, long Col2, long Row2, LPCTSTR FileName, LPCTSTR CellDelim, LPCTSTR ColDelim, LPCTSTR RowDelim, long Flags, LPCTSTR LogFile);
	BOOL ExportToTextFile(LPCTSTR FileName, LPCTSTR CellDelim, LPCTSTR ColDelim, LPCTSTR RowDelim, long Flags, LPCTSTR LogFile);
	BOOL LoadTextFile(LPCTSTR FileName, LPCTSTR CellDelim, LPCTSTR ColDelim, LPCTSTR RowDelim, long Flags, LPCTSTR LogFile);
	void SetCalTextOverride(LPCTSTR ShortDays, LPCTSTR LongDays, LPCTSTR ShortMonths, LPCTSTR LongMonths, LPCTSTR OkText, LPCTSTR CancelText);
	void GetCalTextOverride(BSTR* ShortDays, short* LenShortDays, BSTR* LongDays, short* LenLongDays, BSTR* ShortMonths, short* LenShortMonths, BSTR* LongMonths, short* LenLongMonths, BSTR* OkText, short* LenOkText, BSTR* CancelText, 
		short* LenCancelText);
	void ScriptCFGetCellParam(short Param, VARIANT* Col, VARIANT* Row);
	double ScriptCFGetDoubleParamExt(short Param, VARIANT* ParamValue);
	BOOL ScriptCFGetParamInfo(short Param, VARIANT* Type, VARIANT* Status);
	void ScriptCFGetRangeParam(short Param, VARIANT* Col, VARIANT* Row, VARIANT* Col2, VARIANT* Row2);
	void ScriptColWidthToTwips(float Width, VARIANT* Twips);
	void ScriptGetBottomRightCell(VARIANT* Col, VARIANT* Row);
	void ScriptGetCellFromScreenCoord(VARIANT* Col, VARIANT* Row, long x, long y);
	BOOL ScriptGetCellPos(long Col, long Row, VARIANT* x, VARIANT* y, VARIANT* Width, VARIANT* Height);
	void ScriptGetClientArea(VARIANT* Width, VARIANT* Height);
	void ScriptGetFirstValidCell(VARIANT* Col, VARIANT* Row);
	BOOL ScriptGetIteration(VARIANT* MaxIterations, VARIANT* MaxChange);
	void ScriptGetLastValidCell(VARIANT* Col, VARIANT* Row);
	void ScriptRowHeightToTwips(long Row, float Height, VARIANT* Twips);
	void ScriptTwipsToColWidth(long Twips, VARIANT* ColWidth);
	void ScriptTwipsToRowHeight(long Row, long Twips, VARIANT* RowHeight);
	BOOL ScriptGetActionKey(short Action, VARIANT* fShift, VARIANT* fCtrl, VARIANT* Key);
	BOOL ScriptGetOddEvenRowColor(VARIANT* clrBackOdd, VARIANT* clrForeOdd, VARIANT* clrBackEven, VARIANT* clrForeEven);
	BOOL ScriptGetFloat(long Col, long Row, VARIANT* Value);
	BOOL ScriptGetInteger(long Col, long Row, VARIANT* Value);
	BOOL ScriptGetTextTipAppearance(VARIANT* FontName, VARIANT* FontSize, VARIANT* FontBold, VARIANT* FontItalic, VARIANT* BackColor, VARIANT* ForeColor);
	BOOL ScriptGetExcelSheetList(LPCTSTR FileName, const VARIANT& VarArray, VARIANT* ListCount, LPCTSTR LogFileName, VARIANT* WorkbookHandle, BOOL Replace);
	BOOL ScriptEnumCustomFunction(LPCTSTR PrevFuncName, VARIANT* FuncName);
	BOOL ScriptGetCustomFunction(LPCTSTR FuncName, VARIANT* MinArgs, VARIANT* MaxArgs, VARIANT* Flags);
	BOOL ScriptExportToXMLBuffer(LPCTSTR Root, LPCTSTR Collection, VARIANT* Buff, long Flags, LPCTSTR LogFile);
	BOOL ScriptExportRangeToXMLBuffer(long Col, long Row, long Col2, long Row2, LPCTSTR Root, LPCTSTR Collection, VARIANT* Buff, long Flags, LPCTSTR LogFile);
	long ScriptOwnerPrintPageCount(long hDC, long Left, long Top, long Right, long Bottom, VARIANT* PageCount);
	void ScriptGetCalTextOverride(VARIANT* ShortDays, VARIANT* LenShortDays, VARIANT* LongDays, VARIANT* LenLongDays, VARIANT* ShortMonths, VARIANT* LenShortMonths, VARIANT* LongMonths, VARIANT* LenLongMonths, VARIANT* OkText, VARIANT* LenOkText, 
		VARIANT* CancelText, VARIANT* LenCancelText);
	void PrintSheet(VARIANT* Flags);
	void AddSelection(long lCol, long lRow, long lCol2, long lRow2);
	void ClearRange(long lCol, long lRow, long lCol2, long lRow2, BOOL bDataOnly);
	void ClearSelection();
	void ClipboardCopy();
	void ClipboardCut();
	void ClipboardPaste();
	void CopyRange(long lCol, long lRow, long lCol2, long lRow2, long lColDest, long lRowDest);
	void DeleteCols(long lCol, long lNumCols);
	void DeleteRows(long lRow, long lNumRows);
	void DataSave();
	void GetCellBorder(long lCol, long lRow, long nIndex, VARIANT* pcrColor, VARIANT* pnStyle);
	void GetSelection(long lIndex, VARIANT* plCol, VARIANT* plRow, VARIANT* plCol2, VARIANT* plRow2);
	void InsertCols(long lCol, long lNumCols);
	void InsertRows(long lRow, long lNumRows);
	void MoveRange(long lCol, long lRow, long lCol2, long lRow2, long lColDest, long lRowDest);
	void ReCalc();
	void Reset();
	void SetActiveCell(long lCol, long lRow);
	void SetCellBorder(long lCol, long lRow, long lCol2, long lRow2, long nIndex, unsigned long crColor, long nStyle);
	void SetSelection(long lCol, long lRow, long lCol2, long lRow2);
	void ShowCell(long lCol, long lRow, long nPosition);
	BOOL Sort(long lCol, long lRow, long lCol2, long lRow2, long nSortBy, VARIANT* SortKeys, VARIANT* SortKeyOrders);
	void SwapRange(long lCol, long lRow, long lCol2, long lRow2, long lColDest, long lRowDest);
	void TypeComboBoxClear(long lCol, long lRow);
	void TypeComboBoxRemoveItem(long lCol, long lRow, short nIndex);
	void VirtualRefresh();
	BOOL AddCellSpan(long lCol, long lRow, long lNumCols, long lNumRows);
	long GetCellSpan(long lCol, long lRow, VARIANT* pvColAnchor, VARIANT* pvRowAnchor, VARIANT* pvNumCols, VARIANT* pvNumRows);
	void RemoveCellSpan(long lCol, long lRow);
	long GetColFromID(LPCTSTR ColID);
	void CopyColRange(long lCol, long lCol2, long lColDest);
	void CopyRowRange(long lRow, long lRow2, long lRowDest);
	void MoveColRange(long lCol, long lCol2, long lColDest);
	void MoveRowRange(long lRow, long lRow2, long lRowDest);
	void SwapColRange(long lCol, long lCol2, long lColDest);
	void SwapRowRange(long lRow, long lRow2, long lRowDest);
	long SearchCol(long lCol, long lRowStart, long lRowEnd, LPCTSTR Text, long SearchFlags);
	long SearchRow(long lRow, long lColStart, long lColEnd, LPCTSTR Text, long SearchFlags);
	BOOL GetEventEnabled(short EventID);
	void SetEventEnabled(short EventID, BOOL bNewValue);
	BOOL ExportRangeToTextFileU(long Col, long Row, long Col2, long Row2, LPCTSTR FileName, LPCTSTR CellDelim, LPCTSTR ColDelim, LPCTSTR RowDelim, long Flags, LPCTSTR LogFile);
	BOOL ExportToTextFileU(LPCTSTR FileName, LPCTSTR CellDelim, LPCTSTR ColDelim, LPCTSTR RowDelim, long Flags, LPCTSTR LogFile);
	BOOL SaveTabFileU(LPCTSTR FileName);
	long ColLetterToNumber(LPCTSTR HeaderLetter);
	void DataRefresh();
	BOOL ImportExcelBook(LPCTSTR FileName, LPCTSTR LogFileName);
	BOOL ExportExcelBook(LPCTSTR FileName, LPCTSTR LogFileName);
	BOOL InsertSheets(short SheetIndex, short SheetCnt);
	BOOL DeleteSheets(short SheetIndex, short SheetCnt);
	BOOL MoveSheets(short SheetSrc, short SheetCnt, short SheetDest);
	BOOL ResetSheet(short Sheet);
	CPicture LoadPicture(LPCTSTR FileName, long PictType);
	CPicture LoadResPicture(long hInstance, LPCTSTR ResourceName, LPCTSTR ResourceType, long PictType);
	CPicture LoadPictureBuffer(VARIANT* Buffer, VARIANT* Size, long PictType);
	BOOL SavePicture(LPDISPATCH Picture, LPCTSTR FileName, long PictType);
	BOOL SavePictureBuffer(LPDISPATCH Picture, long PictType, VARIANT* Buffer, VARIANT* Size);
	void CFGetCellParamExt(short Param, short* Sheet, long* Col, long* Row);
	void CFGetRangeParamExt(short Param, short* Sheet, long* Col, long* Row, long* Col2, long* Row2);
	void ScriptCFGetCellParamExt(short Param, VARIANT* Sheet, VARIANT* Col, VARIANT* Row);
	void ScriptCFGetRangeParamExt(short Param, VARIANT* Sheet, VARIANT* Col, VARIANT* Row, VARIANT* Col2, VARIANT* Row2);
	BOOL ExportToExcelEx(LPCTSTR FileName, LPCTSTR SheetName, LPCTSTR LogFileName, long Flags);
	BOOL ExportExcelBookEx(LPCTSTR FileName, LPCTSTR LogFileName, long Flags);
	BOOL SetEnhancedSheetTabColors(long clrNormalUpperStartColor, long clrNormalUpperEndColor, long clrNormalLowerStartColor, long clrNormalLowerEndColor, long clrHoverUpperStartColor, long clrHoverUpperEndColor, long clrHoverLowerStartColor, 
		long clrHoverLowerEndColor, long clrTabOuterBorderColor, long clrTabInnerBorderColor, long clrButtonUpperNormalStartColor, long clrButtonUpperNormalEndColor, long clrButtonLowerNormalStartColor, long clrButtonLowerNormalEndColor, 
		long clrButtonUpperHoverStartColor, long clrButtonUpperHoverEndColor, long clrButtonLowerHoverStartColor, long clrButtonLowerHoverEndColor, long clrButtonUpperPushedStartColor, long clrButtonUpperPushedEndColor, 
		long clrButtonLowerPushedStartColor, long clrButtonLowerPushedEndColor, long clrArrowColor, long clrBackColorStartColor, long clrBackColorEndColor, long clrSplitBoxStartColor, long clrSplitBoxEndColor, long clrSheetTabForeColor, 
		long clrSheetTabActiveForeColor);
	BOOL SetEnhancedScrollBarColors(long clrTrackColor, long clrArrowColor, long clrUpperNormalStartColor, long clrUpperNormalEndColor, long clrLowerNormalStartColor, long clrLowerNormalEndColor, long clrUpperPushedStartColor, 
		long clrUpperPushedEndColor, long clrLowerPushedStartColor, long clrLowerPushedEndColor, long clrUpperHoverStartColor, long clrUpperHoverEndColor, long clrLowerHoverStartColor, long clrLowerHoverEndColor, long clrHoverButtonBorderColor, 
		long clrButtonBorderColor);
	BOOL SetEnhancedColumnHeaderColors(long clrSelectedHoverUpperColor, long clrSelectedHoverLowerColor, long clrSelectedUpperColor, long clrSelectedLowerColor, long clrHoverUpperColor, long clrHoverLowerColor, long clrUpperColor, 
		long clrLowerColor, long clrSelectedBorderColor, long clrBorderColor);
	BOOL SetEnhancedRowHeaderColors(long clrSelectedHoverUpperColor, long clrSelectedHoverLowerColor, long clrSelectedUpperColor, long clrSelectedLowerColor, long clrHoverUpperColor, long clrHoverLowerColor, long clrUpperColor, 
		long clrLowerColor, long clrSelectedBorderColor, long clrBorderColor);
	BOOL SetEnhancedCornerColors(long BackColor, long hoverBackColor, long triangleColor, long triangleHoverColor, long triangleBorderColor, long triangleHoverBorderColor);
	BOOL IsVerticalScrollBarVisible();
	BOOL IsHorizontalScrollBarVisible();
	BOOL ExportToHTMLEx(LPCTSTR FileName, BOOL AppendFlag, LPCTSTR LogFile, LPCTSTR TitleStr, LPCTSTR CssFile, LPCTSTR TableClass, LPCTSTR TRClass, LPCTSTR TDClass, LPCTSTR THClass);
	BOOL ExportRangeToHTMLEx(long Col, long Row, long Col2, long Row2, LPCTSTR FileName, BOOL AppendFlag, LPCTSTR LogFile, LPCTSTR TitleStr, LPCTSTR CssFile, LPCTSTR TableClass, LPCTSTR TRClass, LPCTSTR TDClass, LPCTSTR THClass);
	VARIANT SaveToBuffer();
	BOOL LoadFromBuffer(VARIANT* Buff);
	VARIANT SaveBlockToBuffer(long Col, long Row, long Col2, long Row2, BOOL fSaveColInfo, BOOL fSaveRowInfo);
	BOOL LoadBlockFromBuffer(long Col, long Row, long Col2, long Row2, VARIANT* Buff);
	BOOL AddCustomCellType(LPCTSTR Name, BOOL Editable, BOOL CanOverflow, BOOL CanBeOverflown, BOOL UseRendererControl);
	BOOL RemoveCustomCellType(LPCTSTR Name);
	BOOL EnumCustomCellType(LPCTSTR PrevName, BSTR* Name);
	BOOL GetCustomCellType(LPCTSTR Name, BOOL* Editable, BOOL* CanOverflow, BOOL* CanBeOverflown, BOOL* UseRendererControl);
	VARIANT GetCustomEditor(LPCTSTR Name, long Style);
	VARIANT GetCustomRenderer(LPCTSTR Name, long Style);
	BOOL PaintControl(const VARIANT& Ctrl, long hDC, long Left, long Top, long Right, long Bottom, BOOL ClientOnly);
	long GetFontHandle(LPDISPATCH Font);
	void Refresh();
	void AboutBox();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_SPREADSHEET_H__1C0750BC_B10C_4250_AAAA_385BA31ED74B__INCLUDED_)