// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "ctcombo.h"

/////////////////////////////////////////////////////////////////////////////
// CctCombo

IMPLEMENT_DYNCREATE(CctCombo, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CctCombo properties

BOOL CctCombo::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CctCombo::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

LPFONTDISP CctCombo::GetFont()
{
	LPFONTDISP result;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&result);
	return result;
}

void CctCombo::SetFont(LPFONTDISP propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

OLE_HANDLE CctCombo::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

long CctCombo::GetReadyState()
{
	long result;
	GetProperty(DISPID_READYSTATE, VT_I4, (void*)&result);
	return result;
}

OLE_COLOR CctCombo::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

CString CctCombo::GetText()
{
	CString result;
	GetProperty(DISPID_TEXT, VT_BSTR, (void*)&result);
	return result;
}

void CctCombo::SetText(LPCTSTR propVal)
{
	SetProperty(DISPID_TEXT, VT_BSTR, propVal);
}

LPDISPATCH CctCombo::GetPicture()
{
	LPDISPATCH result;
	GetProperty(0x1, VT_DISPATCH, (void*)&result);
	return result;
}

void CctCombo::SetPicture(LPDISPATCH propVal)
{
	SetProperty(0x1, VT_DISPATCH, propVal);
}

short CctCombo::GetButtonWidth()
{
	short result;
	GetProperty(0x2, VT_I2, (void*)&result);
	return result;
}

void CctCombo::SetButtonWidth(short propVal)
{
	SetProperty(0x2, VT_I2, propVal);
}

long CctCombo::GetBorderType()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetBorderType(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

unsigned long CctCombo::GetBorderColor()
{
	unsigned long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetBorderColor(unsigned long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

unsigned long CctCombo::GetButtonBackColor()
{
	unsigned long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetButtonBackColor(unsigned long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

unsigned long CctCombo::GetButtonForeColor()
{
	unsigned long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetButtonForeColor(unsigned long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

unsigned long CctCombo::GetDisabledColor()
{
	unsigned long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetDisabledColor(unsigned long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

long CctCombo::GetArrowSize()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetArrowSize(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

short CctCombo::GetPicXOffset()
{
	short result;
	GetProperty(0x9, VT_I2, (void*)&result);
	return result;
}

void CctCombo::SetPicXOffset(short propVal)
{
	SetProperty(0x9, VT_I2, propVal);
}

short CctCombo::GetPicYOffset()
{
	short result;
	GetProperty(0xa, VT_I2, (void*)&result);
	return result;
}

void CctCombo::SetPicYOffset(short propVal)
{
	SetProperty(0xa, VT_I2, propVal);
}

short CctCombo::GetTextXOffset()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}

void CctCombo::SetTextXOffset(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}

short CctCombo::GetTextYOffset()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CctCombo::SetTextYOffset(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

short CctCombo::GetListIndex()
{
	short result;
	GetProperty(0xd, VT_I2, (void*)&result);
	return result;
}

void CctCombo::SetListIndex(short propVal)
{
	SetProperty(0xd, VT_I2, propVal);
}

short CctCombo::GetMaxListItems()
{
	short result;
	GetProperty(0xe, VT_I2, (void*)&result);
	return result;
}

void CctCombo::SetMaxListItems(short propVal)
{
	SetProperty(0xe, VT_I2, propVal);
}

long CctCombo::GetStyle()
{
	long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetStyle(long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

BOOL CctCombo::GetAutoSave()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CctCombo::SetAutoSave(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

short CctCombo::GetAutoFindSize()
{
	short result;
	GetProperty(0x11, VT_I2, (void*)&result);
	return result;
}

void CctCombo::SetAutoFindSize(short propVal)
{
	SetProperty(0x11, VT_I2, propVal);
}

short CctCombo::GetMaxSaveItems()
{
	short result;
	GetProperty(0x12, VT_I2, (void*)&result);
	return result;
}

void CctCombo::SetMaxSaveItems(short propVal)
{
	SetProperty(0x12, VT_I2, propVal);
}

BOOL CctCombo::GetMaskBitmap()
{
	BOOL result;
	GetProperty(0x13, VT_BOOL, (void*)&result);
	return result;
}

void CctCombo::SetMaskBitmap(BOOL propVal)
{
	SetProperty(0x13, VT_BOOL, propVal);
}

unsigned long CctCombo::GetMaskColor()
{
	unsigned long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetMaskColor(unsigned long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}

BOOL CctCombo::GetSelectOnFocus()
{
	BOOL result;
	GetProperty(0x15, VT_BOOL, (void*)&result);
	return result;
}

void CctCombo::SetSelectOnFocus(BOOL propVal)
{
	SetProperty(0x15, VT_BOOL, propVal);
}

BOOL CctCombo::GetMatchCase()
{
	BOOL result;
	GetProperty(0x16, VT_BOOL, (void*)&result);
	return result;
}

void CctCombo::SetMatchCase(BOOL propVal)
{
	SetProperty(0x16, VT_BOOL, propVal);
}

BOOL CctCombo::GetAutoSwap()
{
	BOOL result;
	GetProperty(0x17, VT_BOOL, (void*)&result);
	return result;
}

void CctCombo::SetAutoSwap(BOOL propVal)
{
	SetProperty(0x17, VT_BOOL, propVal);
}

long CctCombo::GetDisplayStyle()
{
	long result;
	GetProperty(0x18, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetDisplayStyle(long propVal)
{
	SetProperty(0x18, VT_I4, propVal);
}

short CctCombo::GetButtonBevel()
{
	short result;
	GetProperty(0x19, VT_I2, (void*)&result);
	return result;
}

void CctCombo::SetButtonBevel(short propVal)
{
	SetProperty(0x19, VT_I2, propVal);
}

BOOL CctCombo::GetEmbossBitmap()
{
	BOOL result;
	GetProperty(0x1a, VT_BOOL, (void*)&result);
	return result;
}

void CctCombo::SetEmbossBitmap(BOOL propVal)
{
	SetProperty(0x1a, VT_BOOL, propVal);
}

long CctCombo::GetListBorder()
{
	long result;
	GetProperty(0x1b, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetListBorder(long propVal)
{
	SetProperty(0x1b, VT_I4, propVal);
}

unsigned long CctCombo::GetListBackColor()
{
	unsigned long result;
	GetProperty(0x1c, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetListBackColor(unsigned long propVal)
{
	SetProperty(0x1c, VT_I4, propVal);
}

unsigned long CctCombo::GetListForeColor()
{
	unsigned long result;
	GetProperty(0x1d, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetListForeColor(unsigned long propVal)
{
	SetProperty(0x1d, VT_I4, propVal);
}

LPDISPATCH CctCombo::GetDropPicture()
{
	LPDISPATCH result;
	GetProperty(0x1e, VT_DISPATCH, (void*)&result);
	return result;
}

void CctCombo::SetDropPicture(LPDISPATCH propVal)
{
	SetProperty(0x1e, VT_DISPATCH, propVal);
}

BOOL CctCombo::GetAlternateColor()
{
	BOOL result;
	GetProperty(0x1f, VT_BOOL, (void*)&result);
	return result;
}

void CctCombo::SetAlternateColor(BOOL propVal)
{
	SetProperty(0x1f, VT_BOOL, propVal);
}

short CctCombo::GetAlternateItems()
{
	short result;
	GetProperty(0x20, VT_I2, (void*)&result);
	return result;
}

void CctCombo::SetAlternateItems(short propVal)
{
	SetProperty(0x20, VT_I2, propVal);
}

unsigned long CctCombo::GetAltColorOdd()
{
	unsigned long result;
	GetProperty(0x21, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetAltColorOdd(unsigned long propVal)
{
	SetProperty(0x21, VT_I4, propVal);
}

unsigned long CctCombo::GetAltColorEven()
{
	unsigned long result;
	GetProperty(0x22, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetAltColorEven(unsigned long propVal)
{
	SetProperty(0x22, VT_I4, propVal);
}

BOOL CctCombo::GetDisplayHeader()
{
	BOOL result;
	GetProperty(0x23, VT_BOOL, (void*)&result);
	return result;
}

void CctCombo::SetDisplayHeader(BOOL propVal)
{
	SetProperty(0x23, VT_BOOL, propVal);
}

short CctCombo::GetHeaderOffset()
{
	short result;
	GetProperty(0x24, VT_I2, (void*)&result);
	return result;
}

void CctCombo::SetHeaderOffset(short propVal)
{
	SetProperty(0x24, VT_I2, propVal);
}

long CctCombo::GetHeaderBorder()
{
	long result;
	GetProperty(0x25, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetHeaderBorder(long propVal)
{
	SetProperty(0x25, VT_I4, propVal);
}

unsigned long CctCombo::GetHeaderBackColor()
{
	unsigned long result;
	GetProperty(0x26, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetHeaderBackColor(unsigned long propVal)
{
	SetProperty(0x26, VT_I4, propVal);
}

unsigned long CctCombo::GetHeaderForeColor()
{
	unsigned long result;
	GetProperty(0x27, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetHeaderForeColor(unsigned long propVal)
{
	SetProperty(0x27, VT_I4, propVal);
}

LPDISPATCH CctCombo::GetHeaderFont()
{
	LPDISPATCH result;
	GetProperty(0x28, VT_DISPATCH, (void*)&result);
	return result;
}

void CctCombo::SetHeaderFont(LPDISPATCH propVal)
{
	SetProperty(0x28, VT_DISPATCH, propVal);
}

short CctCombo::GetDataColumn()
{
	short result;
	GetProperty(0x29, VT_I2, (void*)&result);
	return result;
}

void CctCombo::SetDataColumn(short propVal)
{
	SetProperty(0x29, VT_I2, propVal);
}

long CctCombo::GetAutoComplete()
{
	long result;
	GetProperty(0x2a, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetAutoComplete(long propVal)
{
	SetProperty(0x2a, VT_I4, propVal);
}

BOOL CctCombo::GetSorted()
{
	BOOL result;
	GetProperty(0x2b, VT_BOOL, (void*)&result);
	return result;
}

void CctCombo::SetSorted(BOOL propVal)
{
	SetProperty(0x2b, VT_BOOL, propVal);
}

BOOL CctCombo::GetVerticalLines()
{
	BOOL result;
	GetProperty(0x2c, VT_BOOL, (void*)&result);
	return result;
}

void CctCombo::SetVerticalLines(BOOL propVal)
{
	SetProperty(0x2c, VT_BOOL, propVal);
}

BOOL CctCombo::GetHorizontalLines()
{
	BOOL result;
	GetProperty(0x2d, VT_BOOL, (void*)&result);
	return result;
}

void CctCombo::SetHorizontalLines(BOOL propVal)
{
	SetProperty(0x2d, VT_BOOL, propVal);
}

short CctCombo::GetListOffset()
{
	short result;
	GetProperty(0x2f, VT_I2, (void*)&result);
	return result;
}

void CctCombo::SetListOffset(short propVal)
{
	SetProperty(0x2f, VT_I2, propVal);
}

unsigned long CctCombo::GetVertLineColor()
{
	unsigned long result;
	GetProperty(0x30, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetVertLineColor(unsigned long propVal)
{
	SetProperty(0x30, VT_I4, propVal);
}

unsigned long CctCombo::GetHorzLineColor()
{
	unsigned long result;
	GetProperty(0x31, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetHorzLineColor(unsigned long propVal)
{
	SetProperty(0x31, VT_I4, propVal);
}

long CctCombo::GetListAlign()
{
	long result;
	GetProperty(0x32, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetListAlign(long propVal)
{
	SetProperty(0x32, VT_I4, propVal);
}

CString CctCombo::GetBreakChar()
{
	CString result;
	GetProperty(0x33, VT_BSTR, (void*)&result);
	return result;
}

void CctCombo::SetBreakChar(LPCTSTR propVal)
{
	SetProperty(0x33, VT_BSTR, propVal);
}

BOOL CctCombo::GetSmallIcons()
{
	BOOL result;
	GetProperty(0x34, VT_BOOL, (void*)&result);
	return result;
}

void CctCombo::SetSmallIcons(BOOL propVal)
{
	SetProperty(0x34, VT_BOOL, propVal);
}

short CctCombo::GetImageXOffset()
{
	short result;
	GetProperty(0x35, VT_I2, (void*)&result);
	return result;
}

void CctCombo::SetImageXOffset(short propVal)
{
	SetProperty(0x35, VT_I2, propVal);
}

short CctCombo::GetImageYOffset()
{
	short result;
	GetProperty(0x36, VT_I2, (void*)&result);
	return result;
}

void CctCombo::SetImageYOffset(short propVal)
{
	SetProperty(0x36, VT_I2, propVal);
}

BOOL CctCombo::GetShowListPicture()
{
	BOOL result;
	GetProperty(0x37, VT_BOOL, (void*)&result);
	return result;
}

void CctCombo::SetShowListPicture(BOOL propVal)
{
	SetProperty(0x37, VT_BOOL, propVal);
}

long CctCombo::GetScrollStyle()
{
	long result;
	GetProperty(0x38, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetScrollStyle(long propVal)
{
	SetProperty(0x38, VT_I4, propVal);
}

BOOL CctCombo::GetSelectOnChange()
{
	BOOL result;
	GetProperty(0x39, VT_BOOL, (void*)&result);
	return result;
}

void CctCombo::SetSelectOnChange(BOOL propVal)
{
	SetProperty(0x39, VT_BOOL, propVal);
}

LPDISPATCH CctCombo::GetSelectPicture()
{
	LPDISPATCH result;
	GetProperty(0x3a, VT_DISPATCH, (void*)&result);
	return result;
}

void CctCombo::SetSelectPicture(LPDISPATCH propVal)
{
	SetProperty(0x3a, VT_DISPATCH, propVal);
}

BOOL CctCombo::GetScrollDrop()
{
	BOOL result;
	GetProperty(0x3b, VT_BOOL, (void*)&result);
	return result;
}

void CctCombo::SetScrollDrop(BOOL propVal)
{
	SetProperty(0x3b, VT_BOOL, propVal);
}

short CctCombo::GetScrollSpeed()
{
	short result;
	GetProperty(0x3c, VT_I2, (void*)&result);
	return result;
}

void CctCombo::SetScrollSpeed(short propVal)
{
	SetProperty(0x3c, VT_I2, propVal);
}

unsigned long CctCombo::GetBackColor()
{
	unsigned long result;
	GetProperty(0x3d, VT_I4, (void*)&result);
	return result;
}

void CctCombo::SetBackColor(unsigned long propVal)
{
	SetProperty(0x3d, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CctCombo operations

short CctCombo::ListCount()
{
	short result;
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CctCombo::AddItem(LPCTSTR strText)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strText);
	return result;
}

void CctCombo::ClearList()
{
	InvokeHelper(0x40, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CctCombo::RemoveItem(short nIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nIndex);
	return result;
}

void CctCombo::HideList()
{
	InvokeHelper(0x42, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CctCombo::ClearColumns()
{
	BOOL result;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

short CctCombo::ColumnCount()
{
	short result;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CctCombo::AddColumn(LPCTSTR strCaption, short nWidth)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x45, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strCaption, nWidth);
	return result;
}

BOOL CctCombo::RemoveColumn(short nIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x46, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nIndex);
	return result;
}

long CctCombo::EditHwnd()
{
	long result;
	InvokeHelper(0x47, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CctCombo::InsertItem(LPCTSTR strText, short nIndex)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x48, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strText, nIndex);
	return result;
}

void CctCombo::SetItemImage(LPDISPATCH picImage, short nIndex)
{
	static BYTE parms[] =
		VTS_DISPATCH VTS_I2;
	InvokeHelper(0x49, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 picImage, nIndex);
}

CString CctCombo::GetListText(short nIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x4a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nIndex);
	return result;
}

void CctCombo::SetListText(short nIndex, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x4a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, lpszNewValue);
}

CString CctCombo::GetListCargo(short nIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x4b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nIndex);
	return result;
}

void CctCombo::SetListCargo(short nIndex, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x4b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, lpszNewValue);
}

long CctCombo::GetListData(short nIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x4c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CctCombo::SetListData(short nIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x4c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nNewValue);
}

short CctCombo::GetColumnWidth(short nColumn)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x4d, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nColumn);
	return result;
}

void CctCombo::SetColumnWidth(short nColumn, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x4d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nColumn, nNewValue);
}

short CctCombo::GetColumnAlign(short nColumn)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x4e, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nColumn);
	return result;
}

void CctCombo::SetColumnAlign(short nColumn, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x4e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nColumn, nNewValue);
}

CString CctCombo::GetColumnText(short nIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x4f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		nIndex);
	return result;
}

void CctCombo::SetColumnText(short nIndex, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x4f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, lpszNewValue);
}

LPDISPATCH CctCombo::GetListImage(short nIndex)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x50, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		nIndex);
	return result;
}

void CctCombo::SetListImage(short nIndex, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_DISPATCH;
	InvokeHelper(0x50, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, newValue);
}

void CctCombo::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
