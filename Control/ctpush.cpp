// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "ctpush.h"

/////////////////////////////////////////////////////////////////////////////
// CctPush

IMPLEMENT_DYNCREATE(CctPush, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CctPush properties

BOOL CctPush::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CctPush::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

LPFONTDISP CctPush::GetFont()
{
	LPFONTDISP result;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&result);
	return result;
}

void CctPush::SetFont(LPFONTDISP propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

CString CctPush::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CctPush::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

OLE_HANDLE CctPush::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CctPush::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

unsigned long CctPush::GetBackColor()
{
	unsigned long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CctPush::SetBackColor(unsigned long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

unsigned long CctPush::GetForeColor()
{
	unsigned long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CctPush::SetForeColor(unsigned long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

LPDISPATCH CctPush::GetPicture()
{
	LPDISPATCH result;
	GetProperty(0x3, VT_DISPATCH, (void*)&result);
	return result;
}

void CctPush::SetPicture(LPDISPATCH propVal)
{
	SetProperty(0x3, VT_DISPATCH, propVal);
}

LPDISPATCH CctPush::GetPictureDisabled()
{
	LPDISPATCH result;
	GetProperty(0x4, VT_DISPATCH, (void*)&result);
	return result;
}

void CctPush::SetPictureDisabled(LPDISPATCH propVal)
{
	SetProperty(0x4, VT_DISPATCH, propVal);
}

LPDISPATCH CctPush::GetPictureDown()
{
	LPDISPATCH result;
	GetProperty(0x5, VT_DISPATCH, (void*)&result);
	return result;
}

void CctPush::SetPictureDown(LPDISPATCH propVal)
{
	SetProperty(0x5, VT_DISPATCH, propVal);
}

long CctPush::GetPicPosition()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CctPush::SetPicPosition(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

short CctPush::GetRepeatRate()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void CctPush::SetRepeatRate(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

BOOL CctPush::GetRoundCorners()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CctPush::SetRoundCorners(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

short CctPush::GetBevelSize()
{
	short result;
	GetProperty(0x9, VT_I2, (void*)&result);
	return result;
}

void CctPush::SetBevelSize(short propVal)
{
	SetProperty(0x9, VT_I2, propVal);
}

unsigned long CctPush::GetDisableColor()
{
	unsigned long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CctPush::SetDisableColor(unsigned long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

BOOL CctPush::GetState()
{
	BOOL result;
	GetProperty(0xb, VT_BOOL, (void*)&result);
	return result;
}

void CctPush::SetState(BOOL propVal)
{
	SetProperty(0xb, VT_BOOL, propVal);
}

BOOL CctPush::GetToggle()
{
	BOOL result;
	GetProperty(0xc, VT_BOOL, (void*)&result);
	return result;
}

void CctPush::SetToggle(BOOL propVal)
{
	SetProperty(0xc, VT_BOOL, propVal);
}

short CctPush::GetTextXOffset()
{
	short result;
	GetProperty(0xd, VT_I2, (void*)&result);
	return result;
}

void CctPush::SetTextXOffset(short propVal)
{
	SetProperty(0xd, VT_I2, propVal);
}

short CctPush::GetTextYOffset()
{
	short result;
	GetProperty(0xe, VT_I2, (void*)&result);
	return result;
}

void CctPush::SetTextYOffset(short propVal)
{
	SetProperty(0xe, VT_I2, propVal);
}

short CctPush::GetPicXOffset()
{
	short result;
	GetProperty(0xf, VT_I2, (void*)&result);
	return result;
}

void CctPush::SetPicXOffset(short propVal)
{
	SetProperty(0xf, VT_I2, propVal);
}

short CctPush::GetPicYOffset()
{
	short result;
	GetProperty(0x10, VT_I2, (void*)&result);
	return result;
}

void CctPush::SetPicYOffset(short propVal)
{
	SetProperty(0x10, VT_I2, propVal);
}

BOOL CctPush::GetFocusBorder()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CctPush::SetFocusBorder(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

BOOL CctPush::GetPicExpand()
{
	BOOL result;
	GetProperty(0x12, VT_BOOL, (void*)&result);
	return result;
}

void CctPush::SetPicExpand(BOOL propVal)
{
	SetProperty(0x12, VT_BOOL, propVal);
}

BOOL CctPush::GetPicOnly()
{
	BOOL result;
	GetProperty(0x13, VT_BOOL, (void*)&result);
	return result;
}

void CctPush::SetPicOnly(BOOL propVal)
{
	SetProperty(0x13, VT_BOOL, propVal);
}

short CctPush::GetButtonHeight()
{
	short result;
	GetProperty(0x14, VT_I2, (void*)&result);
	return result;
}

void CctPush::SetButtonHeight(short propVal)
{
	SetProperty(0x14, VT_I2, propVal);
}

short CctPush::GetButtonWidth()
{
	short result;
	GetProperty(0x15, VT_I2, (void*)&result);
	return result;
}

void CctPush::SetButtonWidth(short propVal)
{
	SetProperty(0x15, VT_I2, propVal);
}

short CctPush::GetPicBevel()
{
	short result;
	GetProperty(0x16, VT_I2, (void*)&result);
	return result;
}

void CctPush::SetPicBevel(short propVal)
{
	SetProperty(0x16, VT_I2, propVal);
}

long CctPush::GetMultiLine()
{
	long result;
	GetProperty(0x17, VT_I4, (void*)&result);
	return result;
}

void CctPush::SetMultiLine(long propVal)
{
	SetProperty(0x17, VT_I4, propVal);
}

long CctPush::GetWinStyle()
{
	long result;
	GetProperty(0x18, VT_I4, (void*)&result);
	return result;
}

void CctPush::SetWinStyle(long propVal)
{
	SetProperty(0x18, VT_I4, propVal);
}

BOOL CctPush::GetDrawFocus()
{
	BOOL result;
	GetProperty(0x19, VT_BOOL, (void*)&result);
	return result;
}

void CctPush::SetDrawFocus(BOOL propVal)
{
	SetProperty(0x19, VT_BOOL, propVal);
}

unsigned long CctPush::GetRoundColor()
{
	unsigned long result;
	GetProperty(0x1a, VT_I4, (void*)&result);
	return result;
}

void CctPush::SetRoundColor(unsigned long propVal)
{
	SetProperty(0x1a, VT_I4, propVal);
}

unsigned long CctPush::GetDownColor()
{
	unsigned long result;
	GetProperty(0x1b, VT_I4, (void*)&result);
	return result;
}

void CctPush::SetDownColor(unsigned long propVal)
{
	SetProperty(0x1b, VT_I4, propVal);
}

long CctPush::GetMousePointer()
{
	long result;
	GetProperty(0x1c, VT_I4, (void*)&result);
	return result;
}

void CctPush::SetMousePointer(long propVal)
{
	SetProperty(0x1c, VT_I4, propVal);
}

LPDISPATCH CctPush::GetMouseIcon()
{
	LPDISPATCH result;
	GetProperty(0x1e, VT_DISPATCH, (void*)&result);
	return result;
}

void CctPush::SetMouseIcon(LPDISPATCH propVal)
{
	SetProperty(0x1e, VT_DISPATCH, propVal);
}

LPDISPATCH CctPush::GetBackImage()
{
	LPDISPATCH result;
	GetProperty(0x1f, VT_DISPATCH, (void*)&result);
	return result;
}

void CctPush::SetBackImage(LPDISPATCH propVal)
{
	SetProperty(0x1f, VT_DISPATCH, propVal);
}

short CctPush::GetImageXOffset()
{
	short result;
	GetProperty(0x20, VT_I2, (void*)&result);
	return result;
}

void CctPush::SetImageXOffset(short propVal)
{
	SetProperty(0x20, VT_I2, propVal);
}

short CctPush::GetImageYOffset()
{
	short result;
	GetProperty(0x21, VT_I2, (void*)&result);
	return result;
}

void CctPush::SetImageYOffset(short propVal)
{
	SetProperty(0x21, VT_I2, propVal);
}

BOOL CctPush::GetMaskBitmap()
{
	BOOL result;
	GetProperty(0x22, VT_BOOL, (void*)&result);
	return result;
}

void CctPush::SetMaskBitmap(BOOL propVal)
{
	SetProperty(0x22, VT_BOOL, propVal);
}

unsigned long CctPush::GetMaskColor()
{
	unsigned long result;
	GetProperty(0x23, VT_I4, (void*)&result);
	return result;
}

void CctPush::SetMaskColor(unsigned long propVal)
{
	SetProperty(0x23, VT_I4, propVal);
}

BOOL CctPush::GetTransparency()
{
	BOOL result;
	GetProperty(0x24, VT_BOOL, (void*)&result);
	return result;
}

void CctPush::SetTransparency(BOOL propVal)
{
	SetProperty(0x24, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CctPush operations

void CctPush::DoClick()
{
	InvokeHelper(DISPID_DOCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CctPush::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
