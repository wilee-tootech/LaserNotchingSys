// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "ctcheck.h"

/////////////////////////////////////////////////////////////////////////////
// CctCheck

IMPLEMENT_DYNCREATE(CctCheck, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CctCheck properties

BOOL CctCheck::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CctCheck::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

LPFONTDISP CctCheck::GetFont()
{
	LPFONTDISP result;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&result);
	return result;
}

void CctCheck::SetFont(LPFONTDISP propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

CString CctCheck::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CctCheck::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

OLE_HANDLE CctCheck::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CctCheck::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

short CctCheck::Get_Value()
{
	short result;
	GetProperty(0x0, VT_I2, (void*)&result);
	return result;
}

void CctCheck::Set_Value(short propVal)
{
	SetProperty(0x0, VT_I2, propVal);
}

unsigned long CctCheck::GetBackColor()
{
	unsigned long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CctCheck::SetBackColor(unsigned long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

unsigned long CctCheck::GetForeColor()
{
	unsigned long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CctCheck::SetForeColor(unsigned long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

LPDISPATCH CctCheck::GetPictureTrue()
{
	LPDISPATCH result;
	GetProperty(0x3, VT_DISPATCH, (void*)&result);
	return result;
}

void CctCheck::SetPictureTrue(LPDISPATCH propVal)
{
	SetProperty(0x3, VT_DISPATCH, propVal);
}

LPDISPATCH CctCheck::GetPictureFalse()
{
	LPDISPATCH result;
	GetProperty(0x4, VT_DISPATCH, (void*)&result);
	return result;
}

void CctCheck::SetPictureFalse(LPDISPATCH propVal)
{
	SetProperty(0x4, VT_DISPATCH, propVal);
}

long CctCheck::GetPicStyle()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CctCheck::SetPicStyle(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

long CctCheck::GetAlignment()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CctCheck::SetAlignment(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

unsigned long CctCheck::GetDisableColor()
{
	unsigned long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CctCheck::SetDisableColor(unsigned long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

BOOL CctCheck::GetShowFocus()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CctCheck::SetShowFocus(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

BOOL CctCheck::GetChecked()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CctCheck::SetChecked(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

LPDISPATCH CctCheck::GetBackImage()
{
	LPDISPATCH result;
	GetProperty(0xa, VT_DISPATCH, (void*)&result);
	return result;
}

void CctCheck::SetBackImage(LPDISPATCH propVal)
{
	SetProperty(0xa, VT_DISPATCH, propVal);
}

short CctCheck::GetImageXOffset()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}

void CctCheck::SetImageXOffset(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}

short CctCheck::GetImageYOffset()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CctCheck::SetImageYOffset(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

unsigned long CctCheck::GetForeColorOver()
{
	unsigned long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CctCheck::SetForeColorOver(unsigned long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

LPDISPATCH CctCheck::GetFontOver()
{
	LPDISPATCH result;
	GetProperty(0xe, VT_DISPATCH, (void*)&result);
	return result;
}

void CctCheck::SetFontOver(LPDISPATCH propVal)
{
	SetProperty(0xe, VT_DISPATCH, propVal);
}

BOOL CctCheck::GetCheckMouseOver()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}

void CctCheck::SetCheckMouseOver(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}

LPDISPATCH CctCheck::GetMouseIcon()
{
	LPDISPATCH result;
	GetProperty(0x10, VT_DISPATCH, (void*)&result);
	return result;
}

void CctCheck::SetMouseIcon(LPDISPATCH propVal)
{
	SetProperty(0x10, VT_DISPATCH, propVal);
}

BOOL CctCheck::GetMaskBitmap()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CctCheck::SetMaskBitmap(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

unsigned long CctCheck::GetMaskColor()
{
	unsigned long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}

void CctCheck::SetMaskColor(unsigned long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}

long CctCheck::GetValue()
{
	long result;
	GetProperty(0x13, VT_I4, (void*)&result);
	return result;
}

void CctCheck::SetValue(long propVal)
{
	SetProperty(0x13, VT_I4, propVal);
}

LPDISPATCH CctCheck::GetPictureGrey()
{
	LPDISPATCH result;
	GetProperty(0x14, VT_DISPATCH, (void*)&result);
	return result;
}

void CctCheck::SetPictureGrey(LPDISPATCH propVal)
{
	SetProperty(0x14, VT_DISPATCH, propVal);
}

long CctCheck::GetMousePointer()
{
	long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}

void CctCheck::SetMousePointer(long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CctCheck operations

void CctCheck::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
