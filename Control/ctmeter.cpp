// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "ctmeter.h"

/////////////////////////////////////////////////////////////////////////////
// CctMeter

IMPLEMENT_DYNCREATE(CctMeter, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CctMeter properties

BOOL CctMeter::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CctMeter::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

LPFONTDISP CctMeter::GetFont()
{
	LPFONTDISP result;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&result);
	return result;
}

void CctMeter::SetFont(LPFONTDISP propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

OLE_HANDLE CctMeter::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CctMeter::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

CString CctMeter::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CctMeter::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

unsigned long CctMeter::GetBackColor()
{
	unsigned long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CctMeter::SetBackColor(unsigned long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

unsigned long CctMeter::GetForeColor()
{
	unsigned long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CctMeter::SetForeColor(unsigned long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

long CctMeter::GetBorderType()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CctMeter::SetBorderType(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

long CctMeter::GetMeterStyle()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CctMeter::SetMeterStyle(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

unsigned long CctMeter::GetShadowColor()
{
	unsigned long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CctMeter::SetShadowColor(unsigned long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

unsigned long CctMeter::GetBorderColor()
{
	unsigned long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CctMeter::SetBorderColor(unsigned long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

long CctMeter::GetValue()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CctMeter::SetValue(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

long CctMeter::GetMinValue()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CctMeter::SetMinValue(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

long CctMeter::GetMaxValue()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CctMeter::SetMaxValue(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

BOOL CctMeter::GetDisplayText()
{
	BOOL result;
	GetProperty(0xa, VT_BOOL, (void*)&result);
	return result;
}

void CctMeter::SetDisplayText(BOOL propVal)
{
	SetProperty(0xa, VT_BOOL, propVal);
}

long CctMeter::GetMeterValue()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CctMeter::SetMeterValue(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

BOOL CctMeter::GetUseCaption()
{
	BOOL result;
	GetProperty(0xc, VT_BOOL, (void*)&result);
	return result;
}

void CctMeter::SetUseCaption(BOOL propVal)
{
	SetProperty(0xc, VT_BOOL, propVal);
}

long CctMeter::GetAlignment()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CctMeter::SetAlignment(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

BOOL CctMeter::GetThinBorder()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CctMeter::SetThinBorder(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

long CctMeter::GetDisplayStyle()
{
	long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CctMeter::SetDisplayStyle(long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

LPDISPATCH CctMeter::GetBackImage()
{
	LPDISPATCH result;
	GetProperty(0x10, VT_DISPATCH, (void*)&result);
	return result;
}

void CctMeter::SetBackImage(LPDISPATCH propVal)
{
	SetProperty(0x10, VT_DISPATCH, propVal);
}

short CctMeter::GetImageXOffset()
{
	short result;
	GetProperty(0x11, VT_I2, (void*)&result);
	return result;
}

void CctMeter::SetImageXOffset(short propVal)
{
	SetProperty(0x11, VT_I2, propVal);
}

short CctMeter::GetImageYOffset()
{
	short result;
	GetProperty(0x12, VT_I2, (void*)&result);
	return result;
}

void CctMeter::SetImageYOffset(short propVal)
{
	SetProperty(0x12, VT_I2, propVal);
}

short CctMeter::GetBlockSize()
{
	short result;
	GetProperty(0x13, VT_I2, (void*)&result);
	return result;
}

void CctMeter::SetBlockSize(short propVal)
{
	SetProperty(0x13, VT_I2, propVal);
}

short CctMeter::GetBlockMargin()
{
	short result;
	GetProperty(0x14, VT_I2, (void*)&result);
	return result;
}

void CctMeter::SetBlockMargin(short propVal)
{
	SetProperty(0x14, VT_I2, propVal);
}

BOOL CctMeter::GetSquareBlocks()
{
	BOOL result;
	GetProperty(0x15, VT_BOOL, (void*)&result);
	return result;
}

void CctMeter::SetSquareBlocks(BOOL propVal)
{
	SetProperty(0x15, VT_BOOL, propVal);
}

unsigned long CctMeter::GetChangeColor()
{
	unsigned long result;
	GetProperty(0x16, VT_I4, (void*)&result);
	return result;
}

void CctMeter::SetChangeColor(unsigned long propVal)
{
	SetProperty(0x16, VT_I4, propVal);
}

short CctMeter::GetChangeValue()
{
	short result;
	GetProperty(0x17, VT_I2, (void*)&result);
	return result;
}

void CctMeter::SetChangeValue(short propVal)
{
	SetProperty(0x17, VT_I2, propVal);
}

unsigned long CctMeter::GetTextColor()
{
	unsigned long result;
	GetProperty(0x18, VT_I4, (void*)&result);
	return result;
}

void CctMeter::SetTextColor(unsigned long propVal)
{
	SetProperty(0x18, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CctMeter operations

void CctMeter::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
