// 컴퓨터에서 Microsoft Visual C++를 사용하여 생성한 IDispatch 래퍼 클래스입니다.

// 참고: 이 파일의 내용을 수정하지 마십시오. Microsoft Visual C++에서
//  이 클래스를 다시 생성할 때 수정한 내용을 덮어씁니다.


#include "stdafx.h"
#include "fpspread8.h"

#include "picture.h"
#include "font.h"

/////////////////////////////////////////////////////////////////////////////
// CFpspread8

IMPLEMENT_DYNCREATE(CFpspread8, CWnd)

	/////////////////////////////////////////////////////////////////////////////
	// CFpspread8 속성입니다.

	/////////////////////////////////////////////////////////////////////////////
	// CFpspread8 작업입니다.
	// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

	// NOTE: Do not modify the contents of this file.  If this class is regenerated by
	//  Microsoft Visual C++, your modifications will be overwritten.

long CFpspread8::GetActiveCol()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetActiveCol(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

long CFpspread8::GetActiveRow()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetActiveRow(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

BOOL CFpspread8::GetAllowCellOverflow()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetAllowCellOverflow(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

BOOL CFpspread8::GetAllowDragDrop()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetAllowDragDrop(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

BOOL CFpspread8::GetAllowMultiBlocks()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetAllowMultiBlocks(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

BOOL CFpspread8::GetAllowUserFormulas()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetAllowUserFormulas(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

BOOL CFpspread8::GetArrowsExitEditMode()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetArrowsExitEditMode(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

BOOL CFpspread8::GetAutoCalc()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetAutoCalc(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

BOOL CFpspread8::GetAutoClipboard()
{
	BOOL result;
	GetProperty(0xa, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetAutoClipboard(BOOL propVal)
{
	SetProperty(0xa, VT_BOOL, propVal);
}

BOOL CFpspread8::GetAutoSize()
{
	BOOL result;
	GetProperty(0xb, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetAutoSize(BOOL propVal)
{
	SetProperty(0xb, VT_BOOL, propVal);
}

BOOL CFpspread8::GetBlockMode()
{
	BOOL result;
	GetProperty(0xc, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetBlockMode(BOOL propVal)
{
	SetProperty(0xc, VT_BOOL, propVal);
}

long CFpspread8::GetButtonDrawMode()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetButtonDrawMode(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

long CFpspread8::GetCellType()
{
	long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetCellType(long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}

BOOL CFpspread8::GetChangeMade()
{
	BOOL result;
	GetProperty(0x13, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetChangeMade(BOOL propVal)
{
	SetProperty(0x13, VT_BOOL, propVal);
}

CString CFpspread8::GetClip()
{
	CString result;
	GetProperty(0x14, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetClip(LPCTSTR propVal)
{
	SetProperty(0x14, VT_BSTR, propVal);
}

CString CFpspread8::GetClipValue()
{
	CString result;
	GetProperty(0x15, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetClipValue(LPCTSTR propVal)
{
	SetProperty(0x15, VT_BSTR, propVal);
}

long CFpspread8::GetCol()
{
	long result;
	GetProperty(0x16, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetCol(long propVal)
{
	SetProperty(0x16, VT_I4, propVal);
}

long CFpspread8::GetCol2()
{
	long result;
	GetProperty(0x17, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetCol2(long propVal)
{
	SetProperty(0x17, VT_I4, propVal);
}

BOOL CFpspread8::GetColHidden()
{
	BOOL result;
	GetProperty(0x19, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetColHidden(BOOL propVal)
{
	SetProperty(0x19, VT_BOOL, propVal);
}

BOOL CFpspread8::GetColPageBreak()
{
	BOOL result;
	GetProperty(0x1a, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetColPageBreak(BOOL propVal)
{
	SetProperty(0x1a, VT_BOOL, propVal);
}

long CFpspread8::GetColsFrozen()
{
	long result;
	GetProperty(0x1b, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetColsFrozen(long propVal)
{
	SetProperty(0x1b, VT_I4, propVal);
}

long CFpspread8::GetCursorStyle()
{
	long result;
	GetProperty(0x1c, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetCursorStyle(long propVal)
{
	SetProperty(0x1c, VT_I4, propVal);
}

long CFpspread8::GetCursorType()
{
	long result;
	GetProperty(0x1d, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetCursorType(long propVal)
{
	SetProperty(0x1d, VT_I4, propVal);
}

BOOL CFpspread8::GetDataChanged()
{
	BOOL result;
	GetProperty(0x1e, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetDataChanged(BOOL propVal)
{
	SetProperty(0x1e, VT_BOOL, propVal);
}

long CFpspread8::GetDataColCnt()
{
	long result;
	GetProperty(0x1f, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetDataColCnt(long propVal)
{
	SetProperty(0x1f, VT_I4, propVal);
}

CString CFpspread8::GetDataField()
{
	CString result;
	GetProperty(0x20, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetDataField(LPCTSTR propVal)
{
	SetProperty(0x20, VT_BSTR, propVal);
}

BOOL CFpspread8::GetDataFillEvent()
{
	BOOL result;
	GetProperty(0x21, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetDataFillEvent(BOOL propVal)
{
	SetProperty(0x21, VT_BOOL, propVal);
}

long CFpspread8::GetDataRowCnt()
{
	long result;
	GetProperty(0x22, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetDataRowCnt(long propVal)
{
	SetProperty(0x22, VT_I4, propVal);
}

LPUNKNOWN CFpspread8::GetDataSource()
{
	LPUNKNOWN result;
	GetProperty(0x23, VT_UNKNOWN, (void*)&result);
	return result;
}

void CFpspread8::SetDataSource(LPUNKNOWN propVal)
{
	SetProperty(0x23, VT_UNKNOWN, propVal);
}

BOOL CFpspread8::GetDAutoCellTypes()
{
	BOOL result;
	GetProperty(0x24, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetDAutoCellTypes(BOOL propVal)
{
	SetProperty(0x24, VT_BOOL, propVal);
}

BOOL CFpspread8::GetDAutoFill()
{
	BOOL result;
	GetProperty(0x25, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetDAutoFill(BOOL propVal)
{
	SetProperty(0x25, VT_BOOL, propVal);
}

BOOL CFpspread8::GetDAutoHeadings()
{
	BOOL result;
	GetProperty(0x26, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetDAutoHeadings(BOOL propVal)
{
	SetProperty(0x26, VT_BOOL, propVal);
}

BOOL CFpspread8::GetDAutoSave()
{
	BOOL result;
	GetProperty(0x27, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetDAutoSave(BOOL propVal)
{
	SetProperty(0x27, VT_BOOL, propVal);
}

long CFpspread8::GetDAutoSizeCols()
{
	long result;
	GetProperty(0x28, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetDAutoSizeCols(long propVal)
{
	SetProperty(0x28, VT_I4, propVal);
}

BOOL CFpspread8::GetDInformActiveRowChange()
{
	BOOL result;
	GetProperty(0x2b, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetDInformActiveRowChange(BOOL propVal)
{
	SetProperty(0x2b, VT_BOOL, propVal);
}

long CFpspread8::GetEditEnterAction()
{
	long result;
	GetProperty(0x2e, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetEditEnterAction(long propVal)
{
	SetProperty(0x2e, VT_I4, propVal);
}

BOOL CFpspread8::GetEditMode()
{
	BOOL result;
	GetProperty(0x2f, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetEditMode(BOOL propVal)
{
	SetProperty(0x2f, VT_BOOL, propVal);
}

BOOL CFpspread8::GetEditModePermanent()
{
	BOOL result;
	GetProperty(0x30, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetEditModePermanent(BOOL propVal)
{
	SetProperty(0x30, VT_BOOL, propVal);
}

BOOL CFpspread8::GetEditModeReplace()
{
	BOOL result;
	GetProperty(0x31, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetEditModeReplace(BOOL propVal)
{
	SetProperty(0x31, VT_BOOL, propVal);
}

CString CFpspread8::GetFormula()
{
	CString result;
	GetProperty(0x36, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetFormula(LPCTSTR propVal)
{
	SetProperty(0x36, VT_BSTR, propVal);
}

unsigned long CFpspread8::GetGrayAreaBackColor()
{
	unsigned long result;
	GetProperty(0x37, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetGrayAreaBackColor(unsigned long propVal)
{
	SetProperty(0x37, VT_I4, propVal);
}

unsigned long CFpspread8::GetGridColor()
{
	unsigned long result;
	GetProperty(0x38, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetGridColor(unsigned long propVal)
{
	SetProperty(0x38, VT_I4, propVal);
}

BOOL CFpspread8::GetGridShowHoriz()
{
	BOOL result;
	GetProperty(0x39, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetGridShowHoriz(BOOL propVal)
{
	SetProperty(0x39, VT_BOOL, propVal);
}

BOOL CFpspread8::GetGridShowVert()
{
	BOOL result;
	GetProperty(0x3a, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetGridShowVert(BOOL propVal)
{
	SetProperty(0x3a, VT_BOOL, propVal);
}

BOOL CFpspread8::GetGridSolid()
{
	BOOL result;
	GetProperty(0x3b, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetGridSolid(BOOL propVal)
{
	SetProperty(0x3b, VT_BOOL, propVal);
}

long CFpspread8::GetHDCPrinter()
{
	long result;
	GetProperty(0x3c, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetHDCPrinter(long propVal)
{
	SetProperty(0x3c, VT_I4, propVal);
}

short CFpspread8::GetInterfaceDesigner()
{
	short result;
	GetProperty(0x3d, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetInterfaceDesigner(short propVal)
{
	SetProperty(0x3d, VT_I2, propVal);
}

BOOL CFpspread8::GetIsBlockSelected()
{
	BOOL result;
	GetProperty(0x3e, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetIsBlockSelected(BOOL propVal)
{
	SetProperty(0x3e, VT_BOOL, propVal);
}

long CFpspread8::GetLeftCol()
{
	long result;
	GetProperty(0x3f, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetLeftCol(long propVal)
{
	SetProperty(0x3f, VT_I4, propVal);
}

BOOL CFpspread8::GetLock()
{
	BOOL result;
	GetProperty(0x40, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetLock(BOOL propVal)
{
	SetProperty(0x40, VT_BOOL, propVal);
}

unsigned long CFpspread8::GetLockBackColor()
{
	unsigned long result;
	GetProperty(0x41, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetLockBackColor(unsigned long propVal)
{
	SetProperty(0x41, VT_I4, propVal);
}

unsigned long CFpspread8::GetLockForeColor()
{
	unsigned long result;
	GetProperty(0x42, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetLockForeColor(unsigned long propVal)
{
	SetProperty(0x42, VT_I4, propVal);
}

long CFpspread8::GetMaxCols()
{
	long result;
	GetProperty(0x43, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetMaxCols(long propVal)
{
	SetProperty(0x43, VT_I4, propVal);
}

long CFpspread8::GetMaxRows()
{
	long result;
	GetProperty(0x44, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetMaxRows(long propVal)
{
	SetProperty(0x44, VT_I4, propVal);
}

double CFpspread8::GetMaxTextCellHeight()
{
	double result;
	GetProperty(0x45, VT_R8, (void*)&result);
	return result;
}

void CFpspread8::SetMaxTextCellHeight(double propVal)
{
	SetProperty(0x45, VT_R8, propVal);
}

double CFpspread8::GetMaxTextCellWidth()
{
	double result;
	GetProperty(0x46, VT_R8, (void*)&result);
	return result;
}

void CFpspread8::SetMaxTextCellWidth(double propVal)
{
	SetProperty(0x46, VT_R8, propVal);
}

BOOL CFpspread8::GetMoveActiveOnFocus()
{
	BOOL result;
	GetProperty(0x47, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetMoveActiveOnFocus(BOOL propVal)
{
	SetProperty(0x47, VT_BOOL, propVal);
}

BOOL CFpspread8::GetNoBeep()
{
	BOOL result;
	GetProperty(0x4a, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetNoBeep(BOOL propVal)
{
	SetProperty(0x4a, VT_BOOL, propVal);
}

BOOL CFpspread8::GetNoBorder()
{
	BOOL result;
	GetProperty(0x4b, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetNoBorder(BOOL propVal)
{
	SetProperty(0x4b, VT_BOOL, propVal);
}

long CFpspread8::GetOperationMode()
{
	long result;
	GetProperty(0x4c, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetOperationMode(long propVal)
{
	SetProperty(0x4c, VT_I4, propVal);
}

CString CFpspread8::GetPrintAbortMsg()
{
	CString result;
	GetProperty(0x4e, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetPrintAbortMsg(LPCTSTR propVal)
{
	SetProperty(0x4e, VT_BSTR, propVal);
}

BOOL CFpspread8::GetPrintBorder()
{
	BOOL result;
	GetProperty(0x4f, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetPrintBorder(BOOL propVal)
{
	SetProperty(0x4f, VT_BOOL, propVal);
}

BOOL CFpspread8::GetPrintColHeaders()
{
	BOOL result;
	GetProperty(0x50, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetPrintColHeaders(BOOL propVal)
{
	SetProperty(0x50, VT_BOOL, propVal);
}

BOOL CFpspread8::GetPrintColor()
{
	BOOL result;
	GetProperty(0x51, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetPrintColor(BOOL propVal)
{
	SetProperty(0x51, VT_BOOL, propVal);
}

CString CFpspread8::GetPrintFooter()
{
	CString result;
	GetProperty(0x52, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetPrintFooter(LPCTSTR propVal)
{
	SetProperty(0x52, VT_BSTR, propVal);
}

BOOL CFpspread8::GetPrintGrid()
{
	BOOL result;
	GetProperty(0x53, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetPrintGrid(BOOL propVal)
{
	SetProperty(0x53, VT_BOOL, propVal);
}

CString CFpspread8::GetPrintHeader()
{
	CString result;
	GetProperty(0x54, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetPrintHeader(LPCTSTR propVal)
{
	SetProperty(0x54, VT_BSTR, propVal);
}

CString CFpspread8::GetPrintJobName()
{
	CString result;
	GetProperty(0x55, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetPrintJobName(LPCTSTR propVal)
{
	SetProperty(0x55, VT_BSTR, propVal);
}

long CFpspread8::GetPrintMarginBottom()
{
	long result;
	GetProperty(0x56, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetPrintMarginBottom(long propVal)
{
	SetProperty(0x56, VT_I4, propVal);
}

long CFpspread8::GetPrintMarginLeft()
{
	long result;
	GetProperty(0x57, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetPrintMarginLeft(long propVal)
{
	SetProperty(0x57, VT_I4, propVal);
}

long CFpspread8::GetPrintMarginRight()
{
	long result;
	GetProperty(0x58, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetPrintMarginRight(long propVal)
{
	SetProperty(0x58, VT_I4, propVal);
}

long CFpspread8::GetPrintMarginTop()
{
	long result;
	GetProperty(0x59, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetPrintMarginTop(long propVal)
{
	SetProperty(0x59, VT_I4, propVal);
}

short CFpspread8::GetPrintPageEnd()
{
	short result;
	GetProperty(0x5a, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetPrintPageEnd(short propVal)
{
	SetProperty(0x5a, VT_I2, propVal);
}

short CFpspread8::GetPrintPageStart()
{
	short result;
	GetProperty(0x5b, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetPrintPageStart(short propVal)
{
	SetProperty(0x5b, VT_I2, propVal);
}

BOOL CFpspread8::GetPrintRowHeaders()
{
	BOOL result;
	GetProperty(0x5c, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetPrintRowHeaders(BOOL propVal)
{
	SetProperty(0x5c, VT_BOOL, propVal);
}

BOOL CFpspread8::GetPrintShadows()
{
	BOOL result;
	GetProperty(0x5d, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetPrintShadows(BOOL propVal)
{
	SetProperty(0x5d, VT_BOOL, propVal);
}

long CFpspread8::GetPrintType()
{
	long result;
	GetProperty(0x5e, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetPrintType(long propVal)
{
	SetProperty(0x5e, VT_I4, propVal);
}

BOOL CFpspread8::GetPrintUseDataMax()
{
	BOOL result;
	GetProperty(0x5f, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetPrintUseDataMax(BOOL propVal)
{
	SetProperty(0x5f, VT_BOOL, propVal);
}

BOOL CFpspread8::GetProcessTab()
{
	BOOL result;
	GetProperty(0x60, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetProcessTab(BOOL propVal)
{
	SetProperty(0x60, VT_BOOL, propVal);
}

BOOL CFpspread8::GetProtect()
{
	BOOL result;
	GetProperty(0x61, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetProtect(BOOL propVal)
{
	SetProperty(0x61, VT_BOOL, propVal);
}

BOOL CFpspread8::GetReDraw()
{
	BOOL result;
	GetProperty(0x62, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetReDraw(BOOL propVal)
{
	SetProperty(0x62, VT_BOOL, propVal);
}

BOOL CFpspread8::GetRestrictCols()
{
	BOOL result;
	GetProperty(0x63, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetRestrictCols(BOOL propVal)
{
	SetProperty(0x63, VT_BOOL, propVal);
}

BOOL CFpspread8::GetRestrictRows()
{
	BOOL result;
	GetProperty(0x64, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetRestrictRows(BOOL propVal)
{
	SetProperty(0x64, VT_BOOL, propVal);
}

BOOL CFpspread8::GetRetainSelBlock()
{
	BOOL result;
	GetProperty(0x65, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetRetainSelBlock(BOOL propVal)
{
	SetProperty(0x65, VT_BOOL, propVal);
}

long CFpspread8::GetRow()
{
	long result;
	GetProperty(0x66, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetRow(long propVal)
{
	SetProperty(0x66, VT_I4, propVal);
}

long CFpspread8::GetRow2()
{
	long result;
	GetProperty(0x67, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetRow2(long propVal)
{
	SetProperty(0x67, VT_I4, propVal);
}

BOOL CFpspread8::GetRowHidden()
{
	BOOL result;
	GetProperty(0x69, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetRowHidden(BOOL propVal)
{
	SetProperty(0x69, VT_BOOL, propVal);
}

BOOL CFpspread8::GetRowPageBreak()
{
	BOOL result;
	GetProperty(0x6a, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetRowPageBreak(BOOL propVal)
{
	SetProperty(0x6a, VT_BOOL, propVal);
}

long CFpspread8::GetRowsFrozen()
{
	long result;
	GetProperty(0x6b, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetRowsFrozen(long propVal)
{
	SetProperty(0x6b, VT_I4, propVal);
}

BOOL CFpspread8::GetScrollBarExtMode()
{
	BOOL result;
	GetProperty(0x6c, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetScrollBarExtMode(BOOL propVal)
{
	SetProperty(0x6c, VT_BOOL, propVal);
}

BOOL CFpspread8::GetScrollBarMaxAlign()
{
	BOOL result;
	GetProperty(0x6d, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetScrollBarMaxAlign(BOOL propVal)
{
	SetProperty(0x6d, VT_BOOL, propVal);
}

long CFpspread8::GetScrollBars()
{
	long result;
	GetProperty(0x6e, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetScrollBars(long propVal)
{
	SetProperty(0x6e, VT_I4, propVal);
}

BOOL CFpspread8::GetScrollBarShowMax()
{
	BOOL result;
	GetProperty(0x6f, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetScrollBarShowMax(BOOL propVal)
{
	SetProperty(0x6f, VT_BOOL, propVal);
}

long CFpspread8::GetSelBlockCol()
{
	long result;
	GetProperty(0x70, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetSelBlockCol(long propVal)
{
	SetProperty(0x70, VT_I4, propVal);
}

long CFpspread8::GetSelBlockCol2()
{
	long result;
	GetProperty(0x71, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetSelBlockCol2(long propVal)
{
	SetProperty(0x71, VT_I4, propVal);
}

long CFpspread8::GetSelBlockRow()
{
	long result;
	GetProperty(0x72, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetSelBlockRow(long propVal)
{
	SetProperty(0x72, VT_I4, propVal);
}

long CFpspread8::GetSelBlockRow2()
{
	long result;
	GetProperty(0x73, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetSelBlockRow2(long propVal)
{
	SetProperty(0x73, VT_I4, propVal);
}

long CFpspread8::GetSelectBlockOptions()
{
	long result;
	GetProperty(0x74, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetSelectBlockOptions(long propVal)
{
	SetProperty(0x74, VT_I4, propVal);
}

long CFpspread8::GetSelLength()
{
	long result;
	GetProperty(0x75, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetSelLength(long propVal)
{
	SetProperty(0x75, VT_I4, propVal);
}

long CFpspread8::GetSelModeIndex()
{
	long result;
	GetProperty(0x76, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetSelModeIndex(long propVal)
{
	SetProperty(0x76, VT_I4, propVal);
}

BOOL CFpspread8::GetSelModeSelected()
{
	BOOL result;
	GetProperty(0x78, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetSelModeSelected(BOOL propVal)
{
	SetProperty(0x78, VT_BOOL, propVal);
}

long CFpspread8::GetSelStart()
{
	long result;
	GetProperty(0x79, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetSelStart(long propVal)
{
	SetProperty(0x79, VT_I4, propVal);
}

CString CFpspread8::GetSelText()
{
	CString result;
	GetProperty(0x7a, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetSelText(LPCTSTR propVal)
{
	SetProperty(0x7a, VT_BSTR, propVal);
}

unsigned long CFpspread8::GetShadowColor()
{
	unsigned long result;
	GetProperty(0x7b, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetShadowColor(unsigned long propVal)
{
	SetProperty(0x7b, VT_I4, propVal);
}

unsigned long CFpspread8::GetShadowDark()
{
	unsigned long result;
	GetProperty(0x7c, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetShadowDark(unsigned long propVal)
{
	SetProperty(0x7c, VT_I4, propVal);
}

unsigned long CFpspread8::GetShadowText()
{
	unsigned long result;
	GetProperty(0x7d, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetShadowText(unsigned long propVal)
{
	SetProperty(0x7d, VT_I4, propVal);
}

long CFpspread8::GetStartingColNumber()
{
	long result;
	GetProperty(0x7f, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetStartingColNumber(long propVal)
{
	SetProperty(0x7f, VT_I4, propVal);
}

long CFpspread8::GetStartingRowNumber()
{
	long result;
	GetProperty(0x80, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetStartingRowNumber(long propVal)
{
	SetProperty(0x80, VT_I4, propVal);
}

long CFpspread8::GetTopRow()
{
	long result;
	GetProperty(0x81, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTopRow(long propVal)
{
	SetProperty(0x81, VT_I4, propVal);
}

long CFpspread8::GetTypeButtonAlign()
{
	long result;
	GetProperty(0x82, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeButtonAlign(long propVal)
{
	SetProperty(0x82, VT_I4, propVal);
}

unsigned long CFpspread8::GetTypeButtonBorderColor()
{
	unsigned long result;
	GetProperty(0x83, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeButtonBorderColor(unsigned long propVal)
{
	SetProperty(0x83, VT_I4, propVal);
}

unsigned long CFpspread8::GetTypeButtonColor()
{
	unsigned long result;
	GetProperty(0x84, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeButtonColor(unsigned long propVal)
{
	SetProperty(0x84, VT_I4, propVal);
}

unsigned long CFpspread8::GetTypeButtonDarkColor()
{
	unsigned long result;
	GetProperty(0x85, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeButtonDarkColor(unsigned long propVal)
{
	SetProperty(0x85, VT_I4, propVal);
}

unsigned long CFpspread8::GetTypeButtonLightColor()
{
	unsigned long result;
	GetProperty(0x86, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeButtonLightColor(unsigned long propVal)
{
	SetProperty(0x86, VT_I4, propVal);
}

CPicture CFpspread8::GetTypeButtonPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0x87, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CFpspread8::SetTypeButtonPicture(LPDISPATCH propVal)
{
	SetProperty(0x87, VT_DISPATCH, propVal);
}

CPicture CFpspread8::GetTypeButtonPictureDown()
{
	LPDISPATCH pDispatch;
	GetProperty(0x88, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CFpspread8::SetTypeButtonPictureDown(LPDISPATCH propVal)
{
	SetProperty(0x88, VT_DISPATCH, propVal);
}

short CFpspread8::GetTypeButtonShadowSize()
{
	short result;
	GetProperty(0x89, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetTypeButtonShadowSize(short propVal)
{
	SetProperty(0x89, VT_I2, propVal);
}

CString CFpspread8::GetTypeButtonText()
{
	CString result;
	GetProperty(0x8a, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetTypeButtonText(LPCTSTR propVal)
{
	SetProperty(0x8a, VT_BSTR, propVal);
}

unsigned long CFpspread8::GetTypeButtonTextColor()
{
	unsigned long result;
	GetProperty(0x8b, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeButtonTextColor(unsigned long propVal)
{
	SetProperty(0x8b, VT_I4, propVal);
}

long CFpspread8::GetTypeButtonType()
{
	long result;
	GetProperty(0x8c, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeButtonType(long propVal)
{
	SetProperty(0x8c, VT_I4, propVal);
}

BOOL CFpspread8::GetTypeCheckCenter()
{
	BOOL result;
	GetProperty(0x8d, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypeCheckCenter(BOOL propVal)
{
	SetProperty(0x8d, VT_BOOL, propVal);
}

CString CFpspread8::GetTypeCheckText()
{
	CString result;
	GetProperty(0x8e, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetTypeCheckText(LPCTSTR propVal)
{
	SetProperty(0x8e, VT_BSTR, propVal);
}

long CFpspread8::GetTypeCheckTextAlign()
{
	long result;
	GetProperty(0x8f, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeCheckTextAlign(long propVal)
{
	SetProperty(0x8f, VT_I4, propVal);
}

short CFpspread8::GetTypeComboBoxCount()
{
	short result;
	GetProperty(0x90, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetTypeComboBoxCount(short propVal)
{
	SetProperty(0x90, VT_I2, propVal);
}

short CFpspread8::GetTypeComboBoxCurSel()
{
	short result;
	GetProperty(0x91, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetTypeComboBoxCurSel(short propVal)
{
	SetProperty(0x91, VT_I2, propVal);
}

BOOL CFpspread8::GetTypeComboBoxEditable()
{
	BOOL result;
	GetProperty(0x92, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypeComboBoxEditable(BOOL propVal)
{
	SetProperty(0x92, VT_BOOL, propVal);
}

short CFpspread8::GetTypeComboBoxIndex()
{
	short result;
	GetProperty(0x93, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetTypeComboBoxIndex(short propVal)
{
	SetProperty(0x93, VT_I2, propVal);
}

CString CFpspread8::GetTypeComboBoxList()
{
	CString result;
	GetProperty(0x94, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetTypeComboBoxList(LPCTSTR propVal)
{
	SetProperty(0x94, VT_BSTR, propVal);
}

CString CFpspread8::GetTypeComboBoxString()
{
	CString result;
	GetProperty(0x95, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetTypeComboBoxString(LPCTSTR propVal)
{
	SetProperty(0x95, VT_BSTR, propVal);
}

BOOL CFpspread8::GetTypeDateCentury()
{
	BOOL result;
	GetProperty(0x96, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypeDateCentury(BOOL propVal)
{
	SetProperty(0x96, VT_BOOL, propVal);
}

long CFpspread8::GetTypeDateFormat()
{
	long result;
	GetProperty(0x97, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeDateFormat(long propVal)
{
	SetProperty(0x97, VT_I4, propVal);
}

CString CFpspread8::GetTypeDateMax()
{
	CString result;
	GetProperty(0x98, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetTypeDateMax(LPCTSTR propVal)
{
	SetProperty(0x98, VT_BSTR, propVal);
}

CString CFpspread8::GetTypeDateMin()
{
	CString result;
	GetProperty(0x99, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetTypeDateMin(LPCTSTR propVal)
{
	SetProperty(0x99, VT_BSTR, propVal);
}

short CFpspread8::GetTypeDateSeparator()
{
	short result;
	GetProperty(0x9a, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetTypeDateSeparator(short propVal)
{
	SetProperty(0x9a, VT_I2, propVal);
}

long CFpspread8::GetTypeEditCharCase()
{
	long result;
	GetProperty(0x9b, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeEditCharCase(long propVal)
{
	SetProperty(0x9b, VT_I4, propVal);
}

long CFpspread8::GetTypeEditCharSet()
{
	long result;
	GetProperty(0x9c, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeEditCharSet(long propVal)
{
	SetProperty(0x9c, VT_I4, propVal);
}

BOOL CFpspread8::GetTypeEditMultiLine()
{
	BOOL result;
	GetProperty(0x9e, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypeEditMultiLine(BOOL propVal)
{
	SetProperty(0x9e, VT_BOOL, propVal);
}

BOOL CFpspread8::GetTypeEditPassword()
{
	BOOL result;
	GetProperty(0x9f, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypeEditPassword(BOOL propVal)
{
	SetProperty(0x9f, VT_BOOL, propVal);
}

long CFpspread8::GetTypeHAlign()
{
	long result;
	GetProperty(0xa8, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeHAlign(long propVal)
{
	SetProperty(0xa8, VT_I4, propVal);
}

long CFpspread8::GetTypeOwnerDrawStyle()
{
	long result;
	GetProperty(0xad, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeOwnerDrawStyle(long propVal)
{
	SetProperty(0xad, VT_I4, propVal);
}

CString CFpspread8::GetTypePicDefaultText()
{
	CString result;
	GetProperty(0xae, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetTypePicDefaultText(LPCTSTR propVal)
{
	SetProperty(0xae, VT_BSTR, propVal);
}

CString CFpspread8::GetTypePicMask()
{
	CString result;
	GetProperty(0xaf, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetTypePicMask(LPCTSTR propVal)
{
	SetProperty(0xaf, VT_BSTR, propVal);
}

BOOL CFpspread8::GetTypePictCenter()
{
	BOOL result;
	GetProperty(0xb0, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypePictCenter(BOOL propVal)
{
	SetProperty(0xb0, VT_BOOL, propVal);
}

BOOL CFpspread8::GetTypePictMaintainScale()
{
	BOOL result;
	GetProperty(0xb1, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypePictMaintainScale(BOOL propVal)
{
	SetProperty(0xb1, VT_BOOL, propVal);
}

CPicture CFpspread8::GetTypePictPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0xb2, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CFpspread8::SetTypePictPicture(LPDISPATCH propVal)
{
	SetProperty(0xb2, VT_DISPATCH, propVal);
}

BOOL CFpspread8::GetTypePictStretch()
{
	BOOL result;
	GetProperty(0xb3, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypePictStretch(BOOL propVal)
{
	SetProperty(0xb3, VT_BOOL, propVal);
}

BOOL CFpspread8::GetTypeSpin()
{
	BOOL result;
	GetProperty(0xb4, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypeSpin(BOOL propVal)
{
	SetProperty(0xb4, VT_BOOL, propVal);
}

BOOL CFpspread8::GetTypeTextPrefix()
{
	BOOL result;
	GetProperty(0xb6, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypeTextPrefix(BOOL propVal)
{
	SetProperty(0xb6, VT_BOOL, propVal);
}

BOOL CFpspread8::GetTypeTextShadow()
{
	BOOL result;
	GetProperty(0xb7, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypeTextShadow(BOOL propVal)
{
	SetProperty(0xb7, VT_BOOL, propVal);
}

BOOL CFpspread8::GetTypeTextShadowIn()
{
	BOOL result;
	GetProperty(0xb8, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypeTextShadowIn(BOOL propVal)
{
	SetProperty(0xb8, VT_BOOL, propVal);
}

BOOL CFpspread8::GetTypeTextWordWrap()
{
	BOOL result;
	GetProperty(0xb9, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypeTextWordWrap(BOOL propVal)
{
	SetProperty(0xb9, VT_BOOL, propVal);
}

long CFpspread8::GetTypeTime24Hour()
{
	long result;
	GetProperty(0xba, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeTime24Hour(long propVal)
{
	SetProperty(0xba, VT_I4, propVal);
}

CString CFpspread8::GetTypeTimeMax()
{
	CString result;
	GetProperty(0xbb, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetTypeTimeMax(LPCTSTR propVal)
{
	SetProperty(0xbb, VT_BSTR, propVal);
}

CString CFpspread8::GetTypeTimeMin()
{
	CString result;
	GetProperty(0xbc, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetTypeTimeMin(LPCTSTR propVal)
{
	SetProperty(0xbc, VT_BSTR, propVal);
}

BOOL CFpspread8::GetTypeTimeSeconds()
{
	BOOL result;
	GetProperty(0xbd, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypeTimeSeconds(BOOL propVal)
{
	SetProperty(0xbd, VT_BOOL, propVal);
}

short CFpspread8::GetTypeTimeSeparator()
{
	short result;
	GetProperty(0xbe, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetTypeTimeSeparator(short propVal)
{
	SetProperty(0xbe, VT_I2, propVal);
}

long CFpspread8::GetUnitType()
{
	long result;
	GetProperty(0xbf, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetUnitType(long propVal)
{
	SetProperty(0xbf, VT_I4, propVal);
}

long CFpspread8::GetUserResize()
{
	long result;
	GetProperty(0xc0, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetUserResize(long propVal)
{
	SetProperty(0xc0, VT_I4, propVal);
}

long CFpspread8::GetUserResizeCol()
{
	long result;
	GetProperty(0xc1, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetUserResizeCol(long propVal)
{
	SetProperty(0xc1, VT_I4, propVal);
}

long CFpspread8::GetUserResizeRow()
{
	long result;
	GetProperty(0xc2, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetUserResizeRow(long propVal)
{
	SetProperty(0xc2, VT_I4, propVal);
}

CString CFpspread8::GetValue()
{
	CString result;
	GetProperty(0xc3, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetValue(LPCTSTR propVal)
{
	SetProperty(0xc3, VT_BSTR, propVal);
}

long CFpspread8::GetVirtualCurRowCount()
{
	long result;
	GetProperty(0xc4, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetVirtualCurRowCount(long propVal)
{
	SetProperty(0xc4, VT_I4, propVal);
}

long CFpspread8::GetVirtualCurTop()
{
	long result;
	GetProperty(0xc5, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetVirtualCurTop(long propVal)
{
	SetProperty(0xc5, VT_I4, propVal);
}

long CFpspread8::GetVirtualMaxRows()
{
	long result;
	GetProperty(0xc6, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetVirtualMaxRows(long propVal)
{
	SetProperty(0xc6, VT_I4, propVal);
}

BOOL CFpspread8::GetVirtualMode()
{
	BOOL result;
	GetProperty(0xc7, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetVirtualMode(BOOL propVal)
{
	SetProperty(0xc7, VT_BOOL, propVal);
}

long CFpspread8::GetVirtualOverlap()
{
	long result;
	GetProperty(0xc8, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetVirtualOverlap(long propVal)
{
	SetProperty(0xc8, VT_I4, propVal);
}

long CFpspread8::GetVirtualRows()
{
	long result;
	GetProperty(0xc9, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetVirtualRows(long propVal)
{
	SetProperty(0xc9, VT_I4, propVal);
}

BOOL CFpspread8::GetVirtualScrollBuffer()
{
	BOOL result;
	GetProperty(0xca, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetVirtualScrollBuffer(BOOL propVal)
{
	SetProperty(0xca, VT_BOOL, propVal);
}

long CFpspread8::GetVisibleCols()
{
	long result;
	GetProperty(0xcb, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetVisibleCols(long propVal)
{
	SetProperty(0xcb, VT_I4, propVal);
}

long CFpspread8::GetVisibleRows()
{
	long result;
	GetProperty(0xcc, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetVisibleRows(long propVal)
{
	SetProperty(0xcc, VT_I4, propVal);
}

BOOL CFpspread8::GetVScrollSpecial()
{
	BOOL result;
	GetProperty(0xcd, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetVScrollSpecial(BOOL propVal)
{
	SetProperty(0xcd, VT_BOOL, propVal);
}

long CFpspread8::GetVScrollSpecialType()
{
	long result;
	GetProperty(0xce, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetVScrollSpecialType(long propVal)
{
	SetProperty(0xce, VT_I4, propVal);
}

BOOL CFpspread8::GetFontBold()
{
	BOOL result;
	GetProperty(0xcf, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetFontBold(BOOL propVal)
{
	SetProperty(0xcf, VT_BOOL, propVal);
}

BOOL CFpspread8::GetFontItalic()
{
	BOOL result;
	GetProperty(0xd0, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetFontItalic(BOOL propVal)
{
	SetProperty(0xd0, VT_BOOL, propVal);
}

CString CFpspread8::GetFontName()
{
	CString result;
	GetProperty(0xd1, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetFontName(LPCTSTR propVal)
{
	SetProperty(0xd1, VT_BSTR, propVal);
}

float CFpspread8::GetFontSize()
{
	float result;
	GetProperty(0xd2, VT_R4, (void*)&result);
	return result;
}

void CFpspread8::SetFontSize(float propVal)
{
	SetProperty(0xd2, VT_R4, propVal);
}

BOOL CFpspread8::GetFontStrikethru()
{
	BOOL result;
	GetProperty(0xd3, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetFontStrikethru(BOOL propVal)
{
	SetProperty(0xd3, VT_BOOL, propVal);
}

BOOL CFpspread8::GetFontUnderline()
{
	BOOL result;
	GetProperty(0xd4, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetFontUnderline(BOOL propVal)
{
	SetProperty(0xd4, VT_BOOL, propVal);
}

CPicture CFpspread8::GetCursorIcon()
{
	LPDISPATCH pDispatch;
	GetProperty(0xd5, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CFpspread8::SetCursorIcon(LPDISPATCH propVal)
{
	SetProperty(0xd5, VT_DISPATCH, propVal);
}

long CFpspread8::GetPrintOrientation()
{
	long result;
	GetProperty(0xd6, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetPrintOrientation(long propVal)
{
	SetProperty(0xd6, VT_I4, propVal);
}

long CFpspread8::GetBackColorStyle()
{
	long result;
	GetProperty(0xd7, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetBackColorStyle(long propVal)
{
	SetProperty(0xd7, VT_I4, propVal);
}

BOOL CFpspread8::GetFormulaSync()
{
	BOOL result;
	GetProperty(0xd8, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetFormulaSync(BOOL propVal)
{
	SetProperty(0xd8, VT_BOOL, propVal);
}

long CFpspread8::GetTypeCheckType()
{
	long result;
	GetProperty(0x110, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeCheckType(long propVal)
{
	SetProperty(0x110, VT_I4, propVal);
}

long CFpspread8::GetAppearance()
{
	long result;
	GetProperty(0x111, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetAppearance(long propVal)
{
	SetProperty(0x111, VT_I4, propVal);
}

short CFpspread8::GetTypeComboBoxMaxDrop()
{
	short result;
	GetProperty(0x112, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetTypeComboBoxMaxDrop(short propVal)
{
	SetProperty(0x112, VT_I2, propVal);
}

short CFpspread8::GetTypeMaxEditLen()
{
	short result;
	GetProperty(0x113, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetTypeMaxEditLen(short propVal)
{
	SetProperty(0x113, VT_I2, propVal);
}

short CFpspread8::GetTypeComboBoxWidth()
{
	short result;
	GetProperty(0x114, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetTypeComboBoxWidth(short propVal)
{
	SetProperty(0x114, VT_I2, propVal);
}

long CFpspread8::GetTextTip()
{
	long result;
	GetProperty(0x115, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTextTip(long propVal)
{
	SetProperty(0x115, VT_I4, propVal);
}

long CFpspread8::GetTextTipDelay()
{
	long result;
	GetProperty(0x116, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTextTipDelay(long propVal)
{
	SetProperty(0x116, VT_I4, propVal);
}

long CFpspread8::GetScrollBarTrack()
{
	long result;
	GetProperty(0x117, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetScrollBarTrack(long propVal)
{
	SetProperty(0x117, VT_I4, propVal);
}

long CFpspread8::GetTypeVAlign()
{
	long result;
	GetProperty(0x118, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeVAlign(long propVal)
{
	SetProperty(0x118, VT_I4, propVal);
}

long CFpspread8::GetClipboardOptions()
{
	long result;
	GetProperty(0x119, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetClipboardOptions(long propVal)
{
	SetProperty(0x119, VT_I4, propVal);
}

long CFpspread8::GetPrintPageOrder()
{
	long result;
	GetProperty(0x11b, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetPrintPageOrder(long propVal)
{
	SetProperty(0x11b, VT_I4, propVal);
}

long CFpspread8::GetPrintPageCount()
{
	long result;
	GetProperty(0x11c, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetPrintPageCount(long propVal)
{
	SetProperty(0x11c, VT_I4, propVal);
}

long CFpspread8::GetPrintFirstPageNumber()
{
	long result;
	GetProperty(0x11d, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetPrintFirstPageNumber(long propVal)
{
	SetProperty(0x11d, VT_I4, propVal);
}

long CFpspread8::GetPrintNextPageBreakCol()
{
	long result;
	GetProperty(0x11e, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetPrintNextPageBreakCol(long propVal)
{
	SetProperty(0x11e, VT_I4, propVal);
}

long CFpspread8::GetPrintNextPageBreakRow()
{
	long result;
	GetProperty(0x11f, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetPrintNextPageBreakRow(long propVal)
{
	SetProperty(0x11f, VT_I4, propVal);
}

long CFpspread8::GetTypeComboBoxhWnd()
{
	long result;
	GetProperty(0x120, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeComboBoxhWnd(long propVal)
{
	SetProperty(0x120, VT_I4, propVal);
}

unsigned long CFpspread8::GetSelBackColor()
{
	unsigned long result;
	GetProperty(0x121, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetSelBackColor(unsigned long propVal)
{
	SetProperty(0x121, VT_I4, propVal);
}

unsigned long CFpspread8::GetSelForeColor()
{
	unsigned long result;
	GetProperty(0x122, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetSelForeColor(unsigned long propVal)
{
	SetProperty(0x122, VT_I4, propVal);
}

short CFpspread8::GetTwoDigitYearMax()
{
	short result;
	GetProperty(0x123, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetTwoDigitYearMax(short propVal)
{
	SetProperty(0x123, VT_I2, propVal);
}

long CFpspread8::GetOLEDropMode()
{
	long result;
	GetProperty(0x13b, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetOLEDropMode(long propVal)
{
	SetProperty(0x13b, VT_I4, propVal);
}

CString CFpspread8::GetDataMember()
{
	CString result;
	GetProperty(0x13d, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetDataMember(LPCTSTR propVal)
{
	SetProperty(0x13d, VT_BSTR, propVal);
}

CString CFpspread8::GetCellNote()
{
	CString result;
	GetProperty(0x13e, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetCellNote(LPCTSTR propVal)
{
	SetProperty(0x13e, VT_BSTR, propVal);
}

long CFpspread8::GetUserColAction()
{
	long result;
	GetProperty(0x13f, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetUserColAction(long propVal)
{
	SetProperty(0x13f, VT_I4, propVal);
}

long CFpspread8::GetShowScrollTips()
{
	long result;
	GetProperty(0x140, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetShowScrollTips(long propVal)
{
	SetProperty(0x140, VT_I4, propVal);
}

long CFpspread8::GetCellNoteIndicator()
{
	long result;
	GetProperty(0x141, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetCellNoteIndicator(long propVal)
{
	SetProperty(0x141, VT_I4, propVal);
}

BOOL CFpspread8::GetTypeEllipses()
{
	BOOL result;
	GetProperty(0x14a, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypeEllipses(BOOL propVal)
{
	SetProperty(0x14a, VT_BOOL, propVal);
}

BOOL CFpspread8::GetScriptEnhanced()
{
	BOOL result;
	GetProperty(0x150, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetScriptEnhanced(BOOL propVal)
{
	SetProperty(0x150, VT_BOOL, propVal);
}

long CFpspread8::GetColMerge()
{
	long result;
	GetProperty(0x151, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetColMerge(long propVal)
{
	SetProperty(0x151, VT_I4, propVal);
}

long CFpspread8::GetRowMerge()
{
	long result;
	GetProperty(0x152, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetRowMerge(long propVal)
{
	SetProperty(0x152, VT_I4, propVal);
}

CString CFpspread8::GetColID()
{
	CString result;
	GetProperty(0x153, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetColID(LPCTSTR propVal)
{
	SetProperty(0x153, VT_BSTR, propVal);
}

long CFpspread8::GetRowHeaderCols()
{
	long result;
	GetProperty(0x154, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetRowHeaderCols(long propVal)
{
	SetProperty(0x154, VT_I4, propVal);
}

long CFpspread8::GetRowHeadersAutoTextIndex()
{
	long result;
	GetProperty(0x155, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetRowHeadersAutoTextIndex(long propVal)
{
	SetProperty(0x155, VT_I4, propVal);
}

long CFpspread8::GetColHeaderRows()
{
	long result;
	GetProperty(0x156, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetColHeaderRows(long propVal)
{
	SetProperty(0x156, VT_I4, propVal);
}

long CFpspread8::GetColHeadersAutoTextIndex()
{
	long result;
	GetProperty(0x157, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetColHeadersAutoTextIndex(long propVal)
{
	SetProperty(0x157, VT_I4, propVal);
}

long CFpspread8::GetColHeadersUserSortIndex()
{
	long result;
	GetProperty(0x158, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetColHeadersUserSortIndex(long propVal)
{
	SetProperty(0x158, VT_I4, propVal);
}

long CFpspread8::GetTypeComboBoxAutoSearch()
{
	long result;
	GetProperty(0x159, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeComboBoxAutoSearch(long propVal)
{
	SetProperty(0x159, VT_I4, propVal);
}

double CFpspread8::GetTypeSpinInc()
{
	double result;
	GetProperty(0x15a, VT_R8, (void*)&result);
	return result;
}

void CFpspread8::SetTypeSpinInc(double propVal)
{
	SetProperty(0x15a, VT_R8, propVal);
}

BOOL CFpspread8::GetTypeSpinWrap()
{
	BOOL result;
	GetProperty(0x15b, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypeSpinWrap(BOOL propVal)
{
	SetProperty(0x15b, VT_BOOL, propVal);
}

BOOL CFpspread8::GetTypeNegRed()
{
	BOOL result;
	GetProperty(0x15c, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypeNegRed(BOOL propVal)
{
	SetProperty(0x15c, VT_BOOL, propVal);
}

double CFpspread8::GetTypeCurrencyMin()
{
	double result;
	GetProperty(0x15d, VT_R8, (void*)&result);
	return result;
}

void CFpspread8::SetTypeCurrencyMin(double propVal)
{
	SetProperty(0x15d, VT_R8, propVal);
}

double CFpspread8::GetTypeCurrencyMax()
{
	double result;
	GetProperty(0x15e, VT_R8, (void*)&result);
	return result;
}

void CFpspread8::SetTypeCurrencyMax(double propVal)
{
	SetProperty(0x15e, VT_R8, propVal);
}

CString CFpspread8::GetTypeCurrencyDecimal()
{
	CString result;
	GetProperty(0x15f, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetTypeCurrencyDecimal(LPCTSTR propVal)
{
	SetProperty(0x15f, VT_BSTR, propVal);
}

CString CFpspread8::GetTypeCurrencySeparator()
{
	CString result;
	GetProperty(0x160, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetTypeCurrencySeparator(LPCTSTR propVal)
{
	SetProperty(0x160, VT_BSTR, propVal);
}

CString CFpspread8::GetTypeCurrencySymbol()
{
	CString result;
	GetProperty(0x161, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetTypeCurrencySymbol(LPCTSTR propVal)
{
	SetProperty(0x161, VT_BSTR, propVal);
}

long CFpspread8::GetTypeCurrencyLeadingZero()
{
	long result;
	GetProperty(0x162, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeCurrencyLeadingZero(long propVal)
{
	SetProperty(0x162, VT_I4, propVal);
}

short CFpspread8::GetTypeCurrencyDecPlaces()
{
	short result;
	GetProperty(0x163, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetTypeCurrencyDecPlaces(short propVal)
{
	SetProperty(0x163, VT_I2, propVal);
}

long CFpspread8::GetTypeCurrencyNegStyle()
{
	long result;
	GetProperty(0x164, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeCurrencyNegStyle(long propVal)
{
	SetProperty(0x164, VT_I4, propVal);
}

long CFpspread8::GetTypeCurrencyPosStyle()
{
	long result;
	GetProperty(0x165, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeCurrencyPosStyle(long propVal)
{
	SetProperty(0x165, VT_I4, propVal);
}

BOOL CFpspread8::GetTypeCurrencyShowSep()
{
	BOOL result;
	GetProperty(0x166, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypeCurrencyShowSep(BOOL propVal)
{
	SetProperty(0x166, VT_BOOL, propVal);
}

BOOL CFpspread8::GetTypeCurrencyShowSymbol()
{
	BOOL result;
	GetProperty(0x167, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypeCurrencyShowSymbol(BOOL propVal)
{
	SetProperty(0x167, VT_BOOL, propVal);
}

double CFpspread8::GetTypeNumberMin()
{
	double result;
	GetProperty(0x168, VT_R8, (void*)&result);
	return result;
}

void CFpspread8::SetTypeNumberMin(double propVal)
{
	SetProperty(0x168, VT_R8, propVal);
}

double CFpspread8::GetTypeNumberMax()
{
	double result;
	GetProperty(0x169, VT_R8, (void*)&result);
	return result;
}

void CFpspread8::SetTypeNumberMax(double propVal)
{
	SetProperty(0x169, VT_R8, propVal);
}

CString CFpspread8::GetTypeNumberDecimal()
{
	CString result;
	GetProperty(0x16a, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetTypeNumberDecimal(LPCTSTR propVal)
{
	SetProperty(0x16a, VT_BSTR, propVal);
}

CString CFpspread8::GetTypeNumberSeparator()
{
	CString result;
	GetProperty(0x16b, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetTypeNumberSeparator(LPCTSTR propVal)
{
	SetProperty(0x16b, VT_BSTR, propVal);
}

long CFpspread8::GetTypeNumberLeadingZero()
{
	long result;
	GetProperty(0x16c, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeNumberLeadingZero(long propVal)
{
	SetProperty(0x16c, VT_I4, propVal);
}

short CFpspread8::GetTypeNumberDecPlaces()
{
	short result;
	GetProperty(0x16d, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetTypeNumberDecPlaces(short propVal)
{
	SetProperty(0x16d, VT_I2, propVal);
}

long CFpspread8::GetTypeNumberNegStyle()
{
	long result;
	GetProperty(0x16e, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeNumberNegStyle(long propVal)
{
	SetProperty(0x16e, VT_I4, propVal);
}

BOOL CFpspread8::GetTypeNumberShowSep()
{
	BOOL result;
	GetProperty(0x16f, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetTypeNumberShowSep(BOOL propVal)
{
	SetProperty(0x16f, VT_BOOL, propVal);
}

double CFpspread8::GetTypePercentMin()
{
	double result;
	GetProperty(0x170, VT_R8, (void*)&result);
	return result;
}

void CFpspread8::SetTypePercentMin(double propVal)
{
	SetProperty(0x170, VT_R8, propVal);
}

double CFpspread8::GetTypePercentMax()
{
	double result;
	GetProperty(0x171, VT_R8, (void*)&result);
	return result;
}

void CFpspread8::SetTypePercentMax(double propVal)
{
	SetProperty(0x171, VT_R8, propVal);
}

CString CFpspread8::GetTypePercentDecimal()
{
	CString result;
	GetProperty(0x172, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetTypePercentDecimal(LPCTSTR propVal)
{
	SetProperty(0x172, VT_BSTR, propVal);
}

short CFpspread8::GetTypePercentDecPlaces()
{
	short result;
	GetProperty(0x173, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetTypePercentDecPlaces(short propVal)
{
	SetProperty(0x173, VT_I2, propVal);
}

long CFpspread8::GetTypePercentNegStyle()
{
	long result;
	GetProperty(0x174, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypePercentNegStyle(long propVal)
{
	SetProperty(0x174, VT_I4, propVal);
}

long CFpspread8::GetTypeTextOrient()
{
	long result;
	GetProperty(0x175, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeTextOrient(long propVal)
{
	SetProperty(0x175, VT_I4, propVal);
}

CString CFpspread8::GetCellTag()
{
	CString result;
	GetProperty(0x176, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetCellTag(LPCTSTR propVal)
{
	SetProperty(0x176, VT_BSTR, propVal);
}

BOOL CFpspread8::GetAllowEditOverflow()
{
	BOOL result;
	GetProperty(0x177, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetAllowEditOverflow(BOOL propVal)
{
	SetProperty(0x177, VT_BOOL, propVal);
}

long CFpspread8::GetColHeadersAutoText()
{
	long result;
	GetProperty(0x178, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetColHeadersAutoText(long propVal)
{
	SetProperty(0x178, VT_I4, propVal);
}

BOOL CFpspread8::GetColHeadersShow()
{
	BOOL result;
	GetProperty(0x179, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetColHeadersShow(BOOL propVal)
{
	SetProperty(0x179, VT_BOOL, propVal);
}

long CFpspread8::GetRowHeadersAutoText()
{
	long result;
	GetProperty(0x17a, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetRowHeadersAutoText(long propVal)
{
	SetProperty(0x17a, VT_I4, propVal);
}

BOOL CFpspread8::GetRowHeadersShow()
{
	BOOL result;
	GetProperty(0x17b, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetRowHeadersShow(BOOL propVal)
{
	SetProperty(0x17b, VT_BOOL, propVal);
}

long CFpspread8::GetTypePercentLeadingZero()
{
	long result;
	GetProperty(0x17c, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypePercentLeadingZero(long propVal)
{
	SetProperty(0x17c, VT_I4, propVal);
}

short CFpspread8::GetSheetCount()
{
	short result;
	GetProperty(0x17d, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetSheetCount(short propVal)
{
	SetProperty(0x17d, VT_I2, propVal);
}

short CFpspread8::GetActiveSheet()
{
	short result;
	GetProperty(0x17e, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetActiveSheet(short propVal)
{
	SetProperty(0x17e, VT_I2, propVal);
}

short CFpspread8::GetTabStripLeftSheet()
{
	short result;
	GetProperty(0x17f, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetTabStripLeftSheet(short propVal)
{
	SetProperty(0x17f, VT_I2, propVal);
}

COleFont CFpspread8::GetTabStripFont()
{
	LPDISPATCH pDispatch;
	GetProperty(0x180, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CFpspread8::SetTabStripFont(LPDISPATCH propVal)
{
	SetProperty(0x180, VT_DISPATCH, propVal);
}

CString CFpspread8::GetSheetName()
{
	CString result;
	GetProperty(0x181, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetSheetName(LPCTSTR propVal)
{
	SetProperty(0x181, VT_BSTR, propVal);
}

long CFpspread8::GetTabStripPolicy()
{
	long result;
	GetProperty(0x182, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTabStripPolicy(long propVal)
{
	SetProperty(0x182, VT_I4, propVal);
}

double CFpspread8::GetTabStripRatio()
{
	double result;
	GetProperty(0x183, VT_R8, (void*)&result);
	return result;
}

void CFpspread8::SetTabStripRatio(double propVal)
{
	SetProperty(0x183, VT_R8, propVal);
}

double CFpspread8::GetPrintZoomFactor()
{
	double result;
	GetProperty(0x184, VT_R8, (void*)&result);
	return result;
}

void CFpspread8::SetPrintZoomFactor(double propVal)
{
	SetProperty(0x184, VT_R8, propVal);
}

short CFpspread8::GetScrollBarWidth()
{
	short result;
	GetProperty(0x185, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetScrollBarWidth(short propVal)
{
	SetProperty(0x185, VT_I2, propVal);
}

short CFpspread8::GetScrollBarHeight()
{
	short result;
	GetProperty(0x186, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetScrollBarHeight(short propVal)
{
	SetProperty(0x186, VT_I2, propVal);
}

long CFpspread8::GetActiveCellHighlightStyle()
{
	long result;
	GetProperty(0x187, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetActiveCellHighlightStyle(long propVal)
{
	SetProperty(0x187, VT_I4, propVal);
}

long CFpspread8::GetPrintScalingMethod()
{
	long result;
	GetProperty(0x188, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetPrintScalingMethod(long propVal)
{
	SetProperty(0x188, VT_I4, propVal);
}

short CFpspread8::GetPrintBestFitPagesWide()
{
	short result;
	GetProperty(0x189, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetPrintBestFitPagesWide(short propVal)
{
	SetProperty(0x189, VT_I2, propVal);
}

short CFpspread8::GetPrintBestFitPagesTall()
{
	short result;
	GetProperty(0x18a, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetPrintBestFitPagesTall(short propVal)
{
	SetProperty(0x18a, VT_I2, propVal);
}

BOOL CFpspread8::GetPrintCenterOnPageH()
{
	BOOL result;
	GetProperty(0x18b, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetPrintCenterOnPageH(BOOL propVal)
{
	SetProperty(0x18b, VT_BOOL, propVal);
}

BOOL CFpspread8::GetPrintCenterOnPageV()
{
	BOOL result;
	GetProperty(0x18c, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetPrintCenterOnPageV(BOOL propVal)
{
	SetProperty(0x18c, VT_BOOL, propVal);
}

BOOL CFpspread8::GetAllowColMove()
{
	BOOL result;
	GetProperty(0x18d, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetAllowColMove(BOOL propVal)
{
	SetProperty(0x18d, VT_BOOL, propVal);
}

BOOL CFpspread8::GetAllowRowMove()
{
	BOOL result;
	GetProperty(0x18e, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetAllowRowMove(BOOL propVal)
{
	SetProperty(0x18e, VT_BOOL, propVal);
}

double CFpspread8::GetTypeScientificMin()
{
	double result;
	GetProperty(0x18f, VT_R8, (void*)&result);
	return result;
}

void CFpspread8::SetTypeScientificMin(double propVal)
{
	SetProperty(0x18f, VT_R8, propVal);
}

double CFpspread8::GetTypeScientificMax()
{
	double result;
	GetProperty(0x190, VT_R8, (void*)&result);
	return result;
}

void CFpspread8::SetTypeScientificMax(double propVal)
{
	SetProperty(0x190, VT_R8, propVal);
}

CString CFpspread8::GetTypeScientificDecimal()
{
	CString result;
	GetProperty(0x191, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetTypeScientificDecimal(LPCTSTR propVal)
{
	SetProperty(0x191, VT_BSTR, propVal);
}

short CFpspread8::GetTypeScientificDecPlaces()
{
	short result;
	GetProperty(0x192, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetTypeScientificDecPlaces(short propVal)
{
	SetProperty(0x192, VT_I2, propVal);
}

unsigned long CFpspread8::GetScrollBarHColor()
{
	unsigned long result;
	GetProperty(0x193, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetScrollBarHColor(unsigned long propVal)
{
	SetProperty(0x193, VT_I4, propVal);
}

unsigned long CFpspread8::GetScrollBarVColor()
{
	unsigned long result;
	GetProperty(0x194, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetScrollBarVColor(unsigned long propVal)
{
	SetProperty(0x194, VT_I4, propVal);
}

short CFpspread8::GetSheet()
{
	short result;
	GetProperty(0x195, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetSheet(short propVal)
{
	SetProperty(0x195, VT_I2, propVal);
}

short CFpspread8::GetSheetSendingEvent()
{
	short result;
	GetProperty(0x196, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetSheetSendingEvent(short propVal)
{
	SetProperty(0x196, VT_I2, propVal);
}

BOOL CFpspread8::GetSheetVisible()
{
	BOOL result;
	GetProperty(0x197, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetSheetVisible(BOOL propVal)
{
	SetProperty(0x197, VT_BOOL, propVal);
}

long CFpspread8::GetSelectionCount()
{
	long result;
	GetProperty(0x1e9, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetSelectionCount(long propVal)
{
	SetProperty(0x1e9, VT_I4, propVal);
}

long CFpspread8::GetAppearanceStyle()
{
	long result;
	GetProperty(0x20d, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetAppearanceStyle(long propVal)
{
	SetProperty(0x20d, VT_I4, propVal);
}

long CFpspread8::GetTabEnhancedShape()
{
	long result;
	GetProperty(0x215, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTabEnhancedShape(long propVal)
{
	SetProperty(0x215, VT_I4, propVal);
}

unsigned long CFpspread8::GetCellNoteIndicatorColor()
{
	unsigned long result;
	GetProperty(0x216, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetCellNoteIndicatorColor(unsigned long propVal)
{
	SetProperty(0x216, VT_I4, propVal);
}

long CFpspread8::GetCellNoteIndicatorShape()
{
	long result;
	GetProperty(0x217, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetCellNoteIndicatorShape(long propVal)
{
	SetProperty(0x217, VT_I4, propVal);
}

long CFpspread8::GetTabStripButtonPolicy()
{
	long result;
	GetProperty(0x21a, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTabStripButtonPolicy(long propVal)
{
	SetProperty(0x21a, VT_I4, propVal);
}

long CFpspread8::GetHighlightHeaders()
{
	long result;
	GetProperty(0x21b, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetHighlightHeaders(long propVal)
{
	SetProperty(0x21b, VT_I4, propVal);
}

long CFpspread8::GetHighlightStyle()
{
	long result;
	GetProperty(0x21c, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetHighlightStyle(long propVal)
{
	SetProperty(0x21c, VT_I4, propVal);
}

unsigned long CFpspread8::GetHighlightAlphaBlendColor()
{
	unsigned long result;
	GetProperty(0x221, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetHighlightAlphaBlendColor(unsigned long propVal)
{
	SetProperty(0x221, VT_I4, propVal);
}

short CFpspread8::GetHighlightAlphaBlend()
{
	short result;
	GetProperty(0x222, VT_I2, (void*)&result);
	return result;
}

void CFpspread8::SetHighlightAlphaBlend(short propVal)
{
	SetProperty(0x222, VT_I2, propVal);
}

CString CFpspread8::GetTypeCustomName()
{
	CString result;
	GetProperty(0x227, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetTypeCustomName(LPCTSTR propVal)
{
	SetProperty(0x227, VT_BSTR, propVal);
}

long CFpspread8::GetTypeCustomStyle()
{
	long result;
	GetProperty(0x228, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetTypeCustomStyle(long propVal)
{
	SetProperty(0x228, VT_I4, propVal);
}

VARIANT CFpspread8::GetTypeCustomItemData()
{
	VARIANT result;
	GetProperty(0x22d, VT_VARIANT, (void*)&result);
	return result;
}

void CFpspread8::SetTypeCustomItemData(const VARIANT& propVal)
{
	SetProperty(0x22d, VT_VARIANT, &propVal);
}

long CFpspread8::GetUseVisualStyles()
{
	long result;
	GetProperty(0x22e, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetUseVisualStyles(long propVal)
{
	SetProperty(0x22e, VT_I4, propVal);
}

BOOL CFpspread8::GetEnhanceStaticCells()
{
	BOOL result;
	GetProperty(0x22f, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetEnhanceStaticCells(BOOL propVal)
{
	SetProperty(0x22f, VT_BOOL, propVal);
}

long CFpspread8::GetScrollBarStyle()
{
	long result;
	GetProperty(0x230, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetScrollBarStyle(long propVal)
{
	SetProperty(0x230, VT_I4, propVal);
}

OLE_COLOR CFpspread8::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

short CFpspread8::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I4, propVal);
}

BOOL CFpspread8::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CFpspread8::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

COleFont CFpspread8::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CFpspread8::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

OLE_COLOR CFpspread8::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

OLE_HANDLE CFpspread8::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CFpspread8::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

CString CFpspread8::GetText()
{
	CString result;
	GetProperty(DISPID_TEXT, VT_BSTR, (void*)&result);
	return result;
}

void CFpspread8::SetText(LPCTSTR propVal)
{
	SetProperty(DISPID_TEXT, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CFpspread8 operations

double CFpspread8::GetColWidth(long lCol)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		lCol);
	return result;
}

void CFpspread8::SetColWidth(long lCol, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0xd9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		lCol, newValue);
}

double CFpspread8::GetMaxTextColWidth(long lCol)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xda, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		lCol);
	return result;
}

void CFpspread8::SetMaxTextColWidth(long lCol, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0xda, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		lCol, newValue);
}

double CFpspread8::GetMaxTextRowHeight(long lRow)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xdb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		lRow);
	return result;
}

void CFpspread8::SetMaxTextRowHeight(long lRow, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0xdb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		lRow, newValue);
}

double CFpspread8::GetRowHeight(long lRow)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xdc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		lRow);
	return result;
}

void CFpspread8::SetRowHeight(long lRow, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0xdc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		lRow, newValue);
}

long CFpspread8::GetSortKey(short nIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xdd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CFpspread8::SetSortKey(short nIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0xdd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		nIndex, nNewValue);
}

long CFpspread8::GetSortKeyOrder(short nIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xde, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CFpspread8::SetSortKeyOrder(short nIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0xde, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		nIndex, nNewValue);
}

CPicture CFpspread8::GetTypeCheckPicture(short Index)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xdf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		Index);
	return CPicture(pDispatch);
}

void CFpspread8::SetTypeCheckPicture(short Index, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_DISPATCH;
	InvokeHelper(0xdf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		Index, newValue);
}

BOOL CFpspread8::AddCustomFunction(LPCTSTR FunctionName, short ParameterCnt)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0xe0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FunctionName, ParameterCnt);
	return result;
}

BOOL CFpspread8::AddCustomFunctionExt(LPCTSTR FunctionName, short MinParamCnt, short MaxParamCnt, long Flags)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_I4;
	InvokeHelper(0xe1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FunctionName, MinParamCnt, MaxParamCnt, Flags);
	return result;
}

void CFpspread8::CFGetCellParam(short Param, long* Col, long* Row)
{
	static BYTE parms[] =
		VTS_I2 VTS_PI4 VTS_PI4;
	InvokeHelper(0xe2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Param, Col, Row);
}

double CFpspread8::CFGetDoubleParam(short Param)
{
	double result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xe3, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		Param);
	return result;
}

double CFpspread8::CFGetDoubleParamExt(short Param, double* ParamValue)
{
	double result;
	static BYTE parms[] =
		VTS_I2 VTS_PR8;
	InvokeHelper(0xe4, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		Param, ParamValue);
	return result;
}

long CFpspread8::CFGetLongParam(short Param)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xe5, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Param);
	return result;
}

BOOL CFpspread8::CFGetParamInfo(short Param, long* Type, long* Status)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_PI4 VTS_PI4;
	InvokeHelper(0xe6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Param, Type, Status);
	return result;
}

void CFpspread8::CFGetRangeParam(short Param, long* Col, long* Row, long* Col2, long* Row2)
{
	static BYTE parms[] =
		VTS_I2 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0xe7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Param, Col, Row, Col2, Row2);
}

CString CFpspread8::CFGetStringParam(short Param)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xe8, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Param);
	return result;
}

void CFpspread8::CFSetResult(const VARIANT& Var)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xe9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		&Var);
}

CString CFpspread8::ColNumberToLetter(long HeaderNumber)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xea, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		HeaderNumber);
	return result;
}

void CFpspread8::ColWidthToTwips(float Width, long* Twips)
{
	static BYTE parms[] =
		VTS_R4 VTS_PI4;
	InvokeHelper(0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Width, Twips);
}

void CFpspread8::GetBottomRightCell(long* Col, long* Row)
{
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xec, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Col, Row);
}

BOOL CFpspread8::GetCellDirtyFlag(long Col, long Row)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xed, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row);
	return result;
}

void CFpspread8::GetCellFromScreenCoord(long* Col, long* Row, long x, long y)
{
	static BYTE parms[] =
		VTS_PI4 VTS_PI4 VTS_I4 VTS_I4;
	InvokeHelper(0xee, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Col, Row, x, y);
}

BOOL CFpspread8::GetCellPos(long Col, long Row, long* x, long* y, long* Width, long* Height)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0xef, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, x, y, Width, Height);
	return result;
}

void CFpspread8::GetClientArea(long* Width, long* Height)
{
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xf0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Width, Height);
}

long CFpspread8::GetColItemData(long Col)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf1, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Col);
	return result;
}

CString CFpspread8::QueryCustomName(LPCTSTR Name)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xf2, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Name);
	return result;
}

CString CFpspread8::GetCustomName(LPCTSTR Name)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xf3, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Name);
	return result;
}

BOOL CFpspread8::GetDataFillData(VARIANT* Var, short VarType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_I2;
	InvokeHelper(0xf4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Var, VarType);
	return result;
}

void CFpspread8::GetFirstValidCell(long* Col, long* Row)
{
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xf5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Col, Row);
}

long CFpspread8::GetItemData()
{
	long result;
	InvokeHelper(0xf6, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL CFpspread8::GetIteration(short* MaxIterations, double* MaxChange)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI2 VTS_PR8;
	InvokeHelper(0xf7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		MaxIterations, MaxChange);
	return result;
}

void CFpspread8::GetLastValidCell(long* Col, long* Row)
{
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xf8, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Col, Row);
}

long CFpspread8::GetMultiSelItem(long SelPrev)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf9, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		SelPrev);
	return result;
}

long CFpspread8::GetRefStyle()
{
	long result;
	InvokeHelper(0xfa, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CFpspread8::GetRowItemData(long Row)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfb, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Row);
	return result;
}

BOOL CFpspread8::GetText(long Col, long Row, VARIANT* Var)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PVARIANT;
	InvokeHelper(0xfc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Var);
	return result;
}

BOOL CFpspread8::IsCellSelected(long Col, long Row)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xfd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row);
	return result;
}

BOOL CFpspread8::IsFormulaValid(LPCTSTR Formula)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xfe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Formula);
	return result;
}

BOOL CFpspread8::IsVisible(long Col, long Row, BOOL Partial)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0xff, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Partial);
	return result;
}

BOOL CFpspread8::LoadFromFile(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x100, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL CFpspread8::LoadTabFile(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x101, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

void CFpspread8::RowHeightToTwips(long Row, float Height, long* Twips)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_PI4;
	InvokeHelper(0x102, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Row, Height, Twips);
}

BOOL CFpspread8::SaveTabFile(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x103, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL CFpspread8::SaveToFile(LPCTSTR FileName, BOOL DataOnly)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0x104, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, DataOnly);
	return result;
}

BOOL CFpspread8::SetCellDirtyFlag(long Col, long Row, BOOL Dirty)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x105, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Dirty);
	return result;
}

void CFpspread8::SetColItemData(long Col, long Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x106, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Col, Value);
}

BOOL CFpspread8::SetCustomName(LPCTSTR Name, LPCTSTR Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x107, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, Value);
	return result;
}

BOOL CFpspread8::SetDataFillData(const VARIANT& Var)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x108, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Var);
	return result;
}

void CFpspread8::SetItemData(long Value)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x109, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Value);
}

void CFpspread8::SetIteration(BOOL Iteration, short MaxIterations, double MaxChange)
{
	static BYTE parms[] =
		VTS_BOOL VTS_I2 VTS_R8;
	InvokeHelper(0x10a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Iteration, MaxIterations, MaxChange);
}

void CFpspread8::SetRefStyle(long RefStyle)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x10b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		RefStyle);
}

void CFpspread8::SetRowItemData(long Row, long Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x10c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Row, Value);
}

void CFpspread8::SetText(long Col, long Row, const VARIANT& Var)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_VARIANT;
	InvokeHelper(0x10d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Col, Row, &Var);
}

void CFpspread8::TwipsToColWidth(long Twips, float* ColWidth)
{
	static BYTE parms[] =
		VTS_I4 VTS_PR4;
	InvokeHelper(0x10e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Twips, ColWidth);
}

void CFpspread8::TwipsToRowHeight(long Row, long Twips, float* RowHeight)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PR4;
	InvokeHelper(0x10f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Row, Twips, RowHeight);
}

BOOL CFpspread8::GetActionKey(long Action, BOOL* fShift, BOOL* fCtrl, short* Key)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PBOOL VTS_PBOOL VTS_PI2;
	InvokeHelper(0x124, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Action, fShift, fCtrl, Key);
	return result;
}

BOOL CFpspread8::SetActionKey(long Action, BOOL fShift, BOOL fCtrl, short Key)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL VTS_I2;
	InvokeHelper(0x125, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Action, fShift, fCtrl, Key);
	return result;
}

BOOL CFpspread8::GetOddEvenRowColor(long* clrBackOdd, long* clrForeOdd, long* clrBackEven, long* clrForeEven)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x126, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		clrBackOdd, clrForeOdd, clrBackEven, clrForeEven);
	return result;
}

BOOL CFpspread8::SetOddEvenRowColor(long clrBackOdd, long clrForeOdd, long clrBackEven, long clrForeEven)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x127, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		clrBackOdd, clrForeOdd, clrBackEven, clrForeEven);
	return result;
}

BOOL CFpspread8::GetFloat(long Col, long Row, double* Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PR8;
	InvokeHelper(0x128, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Value);
	return result;
}

BOOL CFpspread8::SetFloat(long Col, long Row, double Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_R8;
	InvokeHelper(0x129, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Value);
	return result;
}

BOOL CFpspread8::GetInteger(long Col, long Row, long* Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PI4;
	InvokeHelper(0x12a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Value);
	return result;
}

BOOL CFpspread8::SetInteger(long Col, long Row, long Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x12b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Value);
	return result;
}

void CFpspread8::SetCalText(LPCTSTR ShortDays, LPCTSTR LongDays, LPCTSTR ShortMonths, LPCTSTR LongMonths, LPCTSTR OkText, LPCTSTR CancelText)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x12c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		ShortDays, LongDays, ShortMonths, LongMonths, OkText, CancelText);
}

BOOL CFpspread8::GetTextTipAppearance(BSTR* FontName, short* FontSize, BOOL* FontBold, BOOL* FontItalic, long* BackColor, long* ForeColor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBSTR VTS_PI2 VTS_PBOOL VTS_PBOOL VTS_PI4 VTS_PI4;
	InvokeHelper(0x12d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FontName, FontSize, FontBold, FontItalic, BackColor, ForeColor);
	return result;
}

BOOL CFpspread8::SetTextTipAppearance(LPCTSTR FontName, short FontSize, BOOL FontBold, BOOL FontItalic, long BackColor, long ForeColor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_BOOL VTS_BOOL VTS_I4 VTS_I4;
	InvokeHelper(0x12e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FontName, FontSize, FontBold, FontItalic, BackColor, ForeColor);
	return result;
}

BOOL CFpspread8::ExportToHTML(LPCTSTR FileName, BOOL AppendFlag, LPCTSTR LogFile)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_BSTR;
	InvokeHelper(0x12f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, AppendFlag, LogFile);
	return result;
}

BOOL CFpspread8::ExportRangeToHTML(long Col, long Row, long Col2, long Row2, LPCTSTR FileName, BOOL AppendFlag, LPCTSTR LogFile)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BSTR VTS_BOOL VTS_BSTR;
	InvokeHelper(0x130, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Col2, Row2, FileName, AppendFlag, LogFile);
	return result;
}

BOOL CFpspread8::GetArray(long ColLeft, long RowTop, const VARIANT& VarArray)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_VARIANT;
	InvokeHelper(0x131, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ColLeft, RowTop, &VarArray);
	return result;
}

BOOL CFpspread8::SetArray(long ColLeft, long RowTop, const VARIANT& VarArray)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_VARIANT;
	InvokeHelper(0x132, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ColLeft, RowTop, &VarArray);
	return result;
}

short CFpspread8::IsExcelFile(LPCTSTR FileName)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x133, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		FileName);
	return result;
}

BOOL CFpspread8::GetExcelSheetList(LPCTSTR FileName, const VARIANT& VarArray, short* ListCount, LPCTSTR LogFileName, short* WorkbookHandle, BOOL Replace)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_PI2 VTS_BSTR VTS_PI2 VTS_BOOL;
	InvokeHelper(0x134, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, &VarArray, ListCount, LogFileName, WorkbookHandle, Replace);
	return result;
}

BOOL CFpspread8::ImportExcelSheet(short WorkbookHandle, const VARIANT& Sheet)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0x135, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		WorkbookHandle, &Sheet);
	return result;
}

BOOL CFpspread8::ExportToExcel(LPCTSTR FileName, LPCTSTR SheetName, LPCTSTR LogFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x136, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, SheetName, LogFileName);
	return result;
}

BOOL CFpspread8::EnumCustomFunction(LPCTSTR PrevFuncName, BSTR* FuncName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_PBSTR;
	InvokeHelper(0x137, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PrevFuncName, FuncName);
	return result;
}

BOOL CFpspread8::GetCustomFunction(LPCTSTR FuncName, short* MinArgs, short* MaxArgs, long* Flags)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_PI2 VTS_PI2 VTS_PI4;
	InvokeHelper(0x138, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FuncName, MinArgs, MaxArgs, Flags);
	return result;
}

BOOL CFpspread8::RemoveCustomFunction(LPCTSTR FuncName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x139, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FuncName);
	return result;
}

BOOL CFpspread8::ReCalcCell(long Col, long Row)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x13a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row);
	return result;
}

void CFpspread8::OLEDrag()
{
	InvokeHelper(0x13c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CFpspread8::GetColUserSortIndicator(long lCol)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x142, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lCol);
	return result;
}

void CFpspread8::SetColUserSortIndicator(long lCol, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x142, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		lCol, nNewValue);
}

BOOL CFpspread8::IsFetchCellNote()
{
	BOOL result;
	InvokeHelper(0x143, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CFpspread8::ExportToXML(LPCTSTR FileName, LPCTSTR Root, LPCTSTR Collection, long Flags, LPCTSTR LogFile)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4 VTS_BSTR;
	InvokeHelper(0x144, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, Root, Collection, Flags, LogFile);
	return result;
}

BOOL CFpspread8::ExportRangeToXML(long Col, long Row, long Col2, long Row2, LPCTSTR FileName, LPCTSTR Root, LPCTSTR Collection, long Flags, LPCTSTR LogFile)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4 VTS_BSTR;
	InvokeHelper(0x145, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Col2, Row2, FileName, Root, Collection, Flags, LogFile);
	return result;
}

BOOL CFpspread8::ExportToXMLBuffer(LPCTSTR Root, LPCTSTR Collection, BSTR* Buff, long Flags, LPCTSTR LogFile)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_PBSTR VTS_I4 VTS_BSTR;
	InvokeHelper(0x146, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Root, Collection, Buff, Flags, LogFile);
	return result;
}

BOOL CFpspread8::ExportRangeToXMLBuffer(long Col, long Row, long Col2, long Row2, LPCTSTR Root, LPCTSTR Collection, BSTR* Buff, long Flags, LPCTSTR LogFile)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BSTR VTS_BSTR VTS_PBSTR VTS_I4 VTS_BSTR;
	InvokeHelper(0x147, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Col2, Row2, Root, Collection, Buff, Flags, LogFile);
	return result;
}

BOOL CFpspread8::OwnerPrintDraw(long hDC, long Left, long Top, long Right, long Bottom, short Page)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I2;
	InvokeHelper(0x148, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hDC, Left, Top, Right, Bottom, Page);
	return result;
}

BOOL CFpspread8::OwnerPrintPageCount(long hDC, long Left, long Top, long Right, long Bottom, short* PageCount)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_PI2;
	InvokeHelper(0x149, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hDC, Left, Top, Right, Bottom, PageCount);
	return result;
}

BOOL CFpspread8::ExportRangeToTextFile(long Col, long Row, long Col2, long Row2, LPCTSTR FileName, LPCTSTR CellDelim, LPCTSTR ColDelim, LPCTSTR RowDelim, long Flags, LPCTSTR LogFile)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4 VTS_BSTR;
	InvokeHelper(0x14b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Col2, Row2, FileName, CellDelim, ColDelim, RowDelim, Flags, LogFile);
	return result;
}

BOOL CFpspread8::ExportToTextFile(LPCTSTR FileName, LPCTSTR CellDelim, LPCTSTR ColDelim, LPCTSTR RowDelim, long Flags, LPCTSTR LogFile)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4 VTS_BSTR;
	InvokeHelper(0x14c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, CellDelim, ColDelim, RowDelim, Flags, LogFile);
	return result;
}

BOOL CFpspread8::LoadTextFile(LPCTSTR FileName, LPCTSTR CellDelim, LPCTSTR ColDelim, LPCTSTR RowDelim, long Flags, LPCTSTR LogFile)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4 VTS_BSTR;
	InvokeHelper(0x14d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, CellDelim, ColDelim, RowDelim, Flags, LogFile);
	return result;
}

void CFpspread8::SetCalTextOverride(LPCTSTR ShortDays, LPCTSTR LongDays, LPCTSTR ShortMonths, LPCTSTR LongMonths, LPCTSTR OkText, LPCTSTR CancelText)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x14e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		ShortDays, LongDays, ShortMonths, LongMonths, OkText, CancelText);
}

void CFpspread8::GetCalTextOverride(BSTR* ShortDays, short* LenShortDays, BSTR* LongDays, short* LenLongDays, BSTR* ShortMonths, short* LenShortMonths, BSTR* LongMonths, short* LenLongMonths, BSTR* OkText, short* LenOkText, BSTR* CancelText, 
									  short* LenCancelText)
{
	static BYTE parms[] =
		VTS_PBSTR VTS_PI2 VTS_PBSTR VTS_PI2 VTS_PBSTR VTS_PI2 VTS_PBSTR VTS_PI2 VTS_PBSTR VTS_PI2 VTS_PBSTR VTS_PI2;
	InvokeHelper(0x14f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		ShortDays, LenShortDays, LongDays, LenLongDays, ShortMonths, LenShortMonths, LongMonths, LenLongMonths, OkText, LenOkText, CancelText, LenCancelText);
}

void CFpspread8::ScriptCFGetCellParam(short Param, VARIANT* Col, VARIANT* Row)
{
	static BYTE parms[] =
		VTS_I2 VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1b3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Param, Col, Row);
}

double CFpspread8::ScriptCFGetDoubleParamExt(short Param, VARIANT* ParamValue)
{
	double result;
	static BYTE parms[] =
		VTS_I2 VTS_PVARIANT;
	InvokeHelper(0x1b4, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		Param, ParamValue);
	return result;
}

BOOL CFpspread8::ScriptCFGetParamInfo(short Param, VARIANT* Type, VARIANT* Status)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1b5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Param, Type, Status);
	return result;
}

void CFpspread8::ScriptCFGetRangeParam(short Param, VARIANT* Col, VARIANT* Row, VARIANT* Col2, VARIANT* Row2)
{
	static BYTE parms[] =
		VTS_I2 VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1b6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Param, Col, Row, Col2, Row2);
}

void CFpspread8::ScriptColWidthToTwips(float Width, VARIANT* Twips)
{
	static BYTE parms[] =
		VTS_R4 VTS_PVARIANT;
	InvokeHelper(0x1b7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Width, Twips);
}

void CFpspread8::ScriptGetBottomRightCell(VARIANT* Col, VARIANT* Row)
{
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1b8, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Col, Row);
}

void CFpspread8::ScriptGetCellFromScreenCoord(VARIANT* Col, VARIANT* Row, long x, long y)
{
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT VTS_I4 VTS_I4;
	InvokeHelper(0x1b9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Col, Row, x, y);
}

BOOL CFpspread8::ScriptGetCellPos(long Col, long Row, VARIANT* x, VARIANT* y, VARIANT* Width, VARIANT* Height)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1ba, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, x, y, Width, Height);
	return result;
}

void CFpspread8::ScriptGetClientArea(VARIANT* Width, VARIANT* Height)
{
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1bb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Width, Height);
}

void CFpspread8::ScriptGetFirstValidCell(VARIANT* Col, VARIANT* Row)
{
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1bc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Col, Row);
}

BOOL CFpspread8::ScriptGetIteration(VARIANT* MaxIterations, VARIANT* MaxChange)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1bd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		MaxIterations, MaxChange);
	return result;
}

void CFpspread8::ScriptGetLastValidCell(VARIANT* Col, VARIANT* Row)
{
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1be, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Col, Row);
}

void CFpspread8::ScriptRowHeightToTwips(long Row, float Height, VARIANT* Twips)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_PVARIANT;
	InvokeHelper(0x1bf, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Row, Height, Twips);
}

void CFpspread8::ScriptTwipsToColWidth(long Twips, VARIANT* ColWidth)
{
	static BYTE parms[] =
		VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x1c0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Twips, ColWidth);
}

void CFpspread8::ScriptTwipsToRowHeight(long Row, long Twips, VARIANT* RowHeight)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x1c1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Row, Twips, RowHeight);
}

BOOL CFpspread8::ScriptGetActionKey(short Action, VARIANT* fShift, VARIANT* fCtrl, VARIANT* Key)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1c2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Action, fShift, fCtrl, Key);
	return result;
}

BOOL CFpspread8::ScriptGetOddEvenRowColor(VARIANT* clrBackOdd, VARIANT* clrForeOdd, VARIANT* clrBackEven, VARIANT* clrForeEven)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1c3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		clrBackOdd, clrForeOdd, clrBackEven, clrForeEven);
	return result;
}

BOOL CFpspread8::ScriptGetFloat(long Col, long Row, VARIANT* Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x1c4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Value);
	return result;
}

BOOL CFpspread8::ScriptGetInteger(long Col, long Row, VARIANT* Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x1c5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Value);
	return result;
}

BOOL CFpspread8::ScriptGetTextTipAppearance(VARIANT* FontName, VARIANT* FontSize, VARIANT* FontBold, VARIANT* FontItalic, VARIANT* BackColor, VARIANT* ForeColor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1c6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FontName, FontSize, FontBold, FontItalic, BackColor, ForeColor);
	return result;
}

BOOL CFpspread8::ScriptGetExcelSheetList(LPCTSTR FileName, const VARIANT& VarArray, VARIANT* ListCount, LPCTSTR LogFileName, VARIANT* WorkbookHandle, BOOL Replace)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_PVARIANT VTS_BSTR VTS_PVARIANT VTS_BOOL;
	InvokeHelper(0x1c7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, &VarArray, ListCount, LogFileName, WorkbookHandle, Replace);
	return result;
}

BOOL CFpspread8::ScriptEnumCustomFunction(LPCTSTR PrevFuncName, VARIANT* FuncName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_PVARIANT;
	InvokeHelper(0x1c8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PrevFuncName, FuncName);
	return result;
}

BOOL CFpspread8::ScriptGetCustomFunction(LPCTSTR FuncName, VARIANT* MinArgs, VARIANT* MaxArgs, VARIANT* Flags)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1c9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FuncName, MinArgs, MaxArgs, Flags);
	return result;
}

BOOL CFpspread8::ScriptExportToXMLBuffer(LPCTSTR Root, LPCTSTR Collection, VARIANT* Buff, long Flags, LPCTSTR LogFile)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_PVARIANT VTS_I4 VTS_BSTR;
	InvokeHelper(0x1ca, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Root, Collection, Buff, Flags, LogFile);
	return result;
}

BOOL CFpspread8::ScriptExportRangeToXMLBuffer(long Col, long Row, long Col2, long Row2, LPCTSTR Root, LPCTSTR Collection, VARIANT* Buff, long Flags, LPCTSTR LogFile)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BSTR VTS_BSTR VTS_PVARIANT VTS_I4 VTS_BSTR;
	InvokeHelper(0x1cb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Col2, Row2, Root, Collection, Buff, Flags, LogFile);
	return result;
}

long CFpspread8::ScriptOwnerPrintPageCount(long hDC, long Left, long Top, long Right, long Bottom, VARIANT* PageCount)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x1cc, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hDC, Left, Top, Right, Bottom, PageCount);
	return result;
}

void CFpspread8::ScriptGetCalTextOverride(VARIANT* ShortDays, VARIANT* LenShortDays, VARIANT* LongDays, VARIANT* LenLongDays, VARIANT* ShortMonths, VARIANT* LenShortMonths, VARIANT* LongMonths, VARIANT* LenLongMonths, VARIANT* OkText, VARIANT* LenOkText, 
											VARIANT* CancelText, VARIANT* LenCancelText)
{
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1cd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		ShortDays, LenShortDays, LongDays, LenLongDays, ShortMonths, LenShortMonths, LongMonths, LenLongMonths, OkText, LenOkText, CancelText, LenCancelText);
}

void CFpspread8::PrintSheet(VARIANT* Flags)
{
	static BYTE parms[] =
		VTS_PVARIANT;
	InvokeHelper(0x1ce, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Flags);
}

void CFpspread8::AddSelection(long lCol, long lRow, long lCol2, long lRow2)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1cf, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lCol, lRow, lCol2, lRow2);
}

void CFpspread8::ClearRange(long lCol, long lRow, long lCol2, long lRow2, BOOL bDataOnly)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x1d0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lCol, lRow, lCol2, lRow2, bDataOnly);
}

void CFpspread8::ClearSelection()
{
	InvokeHelper(0x1d1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CFpspread8::ClipboardCopy()
{
	InvokeHelper(0x1d2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CFpspread8::ClipboardCut()
{
	InvokeHelper(0x1d3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CFpspread8::ClipboardPaste()
{
	InvokeHelper(0x1d4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CFpspread8::CopyRange(long lCol, long lRow, long lCol2, long lRow2, long lColDest, long lRowDest)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1d5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lCol, lRow, lCol2, lRow2, lColDest, lRowDest);
}

void CFpspread8::DeleteCols(long lCol, long lNumCols)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x1d6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lCol, lNumCols);
}

void CFpspread8::DeleteRows(long lRow, long lNumRows)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x1d7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lRow, lNumRows);
}

void CFpspread8::DataSave()
{
	InvokeHelper(0x1d8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CFpspread8::GetCellBorder(long lCol, long lRow, long nIndex, VARIANT* pcrColor, VARIANT* pnStyle)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1d9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lCol, lRow, nIndex, pcrColor, pnStyle);
}

void CFpspread8::GetSelection(long lIndex, VARIANT* plCol, VARIANT* plRow, VARIANT* plCol2, VARIANT* plRow2)
{
	static BYTE parms[] =
		VTS_I4 VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1da, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lIndex, plCol, plRow, plCol2, plRow2);
}

void CFpspread8::InsertCols(long lCol, long lNumCols)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x1db, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lCol, lNumCols);
}

void CFpspread8::InsertRows(long lRow, long lNumRows)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x1dc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lRow, lNumRows);
}

void CFpspread8::MoveRange(long lCol, long lRow, long lCol2, long lRow2, long lColDest, long lRowDest)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1dd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lCol, lRow, lCol2, lRow2, lColDest, lRowDest);
}

void CFpspread8::ReCalc()
{
	InvokeHelper(0x1de, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CFpspread8::Reset()
{
	InvokeHelper(0x1df, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CFpspread8::SetActiveCell(long lCol, long lRow)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x1e0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lCol, lRow);
}

void CFpspread8::SetCellBorder(long lCol, long lRow, long lCol2, long lRow2, long nIndex, unsigned long crColor, long nStyle)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1e1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lCol, lRow, lCol2, lRow2, nIndex, crColor, nStyle);
}

void CFpspread8::SetSelection(long lCol, long lRow, long lCol2, long lRow2)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1e2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lCol, lRow, lCol2, lRow2);
}

void CFpspread8::ShowCell(long lCol, long lRow, long nPosition)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1e3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lCol, lRow, nPosition);
}

BOOL CFpspread8::Sort(long lCol, long lRow, long lCol2, long lRow2, long nSortBy, VARIANT* SortKeys, VARIANT* SortKeyOrders)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1e4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lCol, lRow, lCol2, lRow2, nSortBy, SortKeys, SortKeyOrders);
	return result;
}

void CFpspread8::SwapRange(long lCol, long lRow, long lCol2, long lRow2, long lColDest, long lRowDest)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1e5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lCol, lRow, lCol2, lRow2, lColDest, lRowDest);
}

void CFpspread8::TypeComboBoxClear(long lCol, long lRow)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x1e6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lCol, lRow);
}

void CFpspread8::TypeComboBoxRemoveItem(long lCol, long lRow, short nIndex)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2;
	InvokeHelper(0x1e7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lCol, lRow, nIndex);
}

void CFpspread8::VirtualRefresh()
{
	InvokeHelper(0x1e8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CFpspread8::AddCellSpan(long lCol, long lRow, long lNumCols, long lNumRows)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1ea, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lCol, lRow, lNumCols, lNumRows);
	return result;
}

long CFpspread8::GetCellSpan(long lCol, long lRow, VARIANT* pvColAnchor, VARIANT* pvRowAnchor, VARIANT* pvNumCols, VARIANT* pvNumRows)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1eb, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lCol, lRow, pvColAnchor, pvRowAnchor, pvNumCols, pvNumRows);
	return result;
}

void CFpspread8::RemoveCellSpan(long lCol, long lRow)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x1ec, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lCol, lRow);
}

long CFpspread8::GetColFromID(LPCTSTR ColID)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1ed, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ColID);
	return result;
}

void CFpspread8::CopyColRange(long lCol, long lCol2, long lColDest)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1ee, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lCol, lCol2, lColDest);
}

void CFpspread8::CopyRowRange(long lRow, long lRow2, long lRowDest)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1ef, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lRow, lRow2, lRowDest);
}

void CFpspread8::MoveColRange(long lCol, long lCol2, long lColDest)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1f0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lCol, lCol2, lColDest);
}

void CFpspread8::MoveRowRange(long lRow, long lRow2, long lRowDest)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1f1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lRow, lRow2, lRowDest);
}

void CFpspread8::SwapColRange(long lCol, long lCol2, long lColDest)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1f2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lCol, lCol2, lColDest);
}

void CFpspread8::SwapRowRange(long lRow, long lRow2, long lRowDest)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1f3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lRow, lRow2, lRowDest);
}

long CFpspread8::SearchCol(long lCol, long lRowStart, long lRowEnd, LPCTSTR Text, long SearchFlags)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_BSTR VTS_I4;
	InvokeHelper(0x1f4, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lCol, lRowStart, lRowEnd, Text, SearchFlags);
	return result;
}

long CFpspread8::SearchRow(long lRow, long lColStart, long lColEnd, LPCTSTR Text, long SearchFlags)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_BSTR VTS_I4;
	InvokeHelper(0x1f5, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lRow, lColStart, lColEnd, Text, SearchFlags);
	return result;
}

BOOL CFpspread8::GetEventEnabled(short EventID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		EventID);
	return result;
}

void CFpspread8::SetEventEnabled(short EventID, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		EventID, bNewValue);
}

BOOL CFpspread8::ExportRangeToTextFileU(long Col, long Row, long Col2, long Row2, LPCTSTR FileName, LPCTSTR CellDelim, LPCTSTR ColDelim, LPCTSTR RowDelim, long Flags, LPCTSTR LogFile)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4 VTS_BSTR;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Col2, Row2, FileName, CellDelim, ColDelim, RowDelim, Flags, LogFile);
	return result;
}

BOOL CFpspread8::ExportToTextFileU(LPCTSTR FileName, LPCTSTR CellDelim, LPCTSTR ColDelim, LPCTSTR RowDelim, long Flags, LPCTSTR LogFile)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4 VTS_BSTR;
	InvokeHelper(0x1f8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, CellDelim, ColDelim, RowDelim, Flags, LogFile);
	return result;
}

BOOL CFpspread8::SaveTabFileU(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

long CFpspread8::ColLetterToNumber(LPCTSTR HeaderLetter)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1fa, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		HeaderLetter);
	return result;
}

void CFpspread8::DataRefresh()
{
	InvokeHelper(0x1fb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CFpspread8::ImportExcelBook(LPCTSTR FileName, LPCTSTR LogFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1fc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, LogFileName);
	return result;
}

BOOL CFpspread8::ExportExcelBook(LPCTSTR FileName, LPCTSTR LogFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1fd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, LogFileName);
	return result;
}

BOOL CFpspread8::InsertSheets(short SheetIndex, short SheetCnt)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x1fe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		SheetIndex, SheetCnt);
	return result;
}

BOOL CFpspread8::DeleteSheets(short SheetIndex, short SheetCnt)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x1ff, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		SheetIndex, SheetCnt);
	return result;
}

BOOL CFpspread8::MoveSheets(short SheetSrc, short SheetCnt, short SheetDest)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x200, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		SheetSrc, SheetCnt, SheetDest);
	return result;
}

BOOL CFpspread8::ResetSheet(short Sheet)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x201, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Sheet);
	return result;
}

CPicture CFpspread8::LoadPicture(LPCTSTR FileName, long PictType)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x202, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		FileName, PictType);
	return CPicture(pDispatch);
}

CPicture CFpspread8::LoadResPicture(long hInstance, LPCTSTR ResourceName, LPCTSTR ResourceType, long PictType)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x203, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		hInstance, ResourceName, ResourceType, PictType);
	return CPicture(pDispatch);
}

CPicture CFpspread8::LoadPictureBuffer(VARIANT* Buffer, VARIANT* Size, long PictType)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT VTS_I4;
	InvokeHelper(0x204, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		Buffer, Size, PictType);
	return CPicture(pDispatch);
}

BOOL CFpspread8::SavePicture(LPDISPATCH Picture, LPCTSTR FileName, long PictType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_BSTR VTS_I4;
	InvokeHelper(0x205, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Picture, FileName, PictType);
	return result;
}

BOOL CFpspread8::SavePictureBuffer(LPDISPATCH Picture, long PictType, VARIANT* Buffer, VARIANT* Size)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_I4 VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x206, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Picture, PictType, Buffer, Size);
	return result;
}

void CFpspread8::CFGetCellParamExt(short Param, short* Sheet, long* Col, long* Row)
{
	static BYTE parms[] =
		VTS_I2 VTS_PI2 VTS_PI4 VTS_PI4;
	InvokeHelper(0x207, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Param, Sheet, Col, Row);
}

void CFpspread8::CFGetRangeParamExt(short Param, short* Sheet, long* Col, long* Row, long* Col2, long* Row2)
{
	static BYTE parms[] =
		VTS_I2 VTS_PI2 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x208, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Param, Sheet, Col, Row, Col2, Row2);
}

void CFpspread8::ScriptCFGetCellParamExt(short Param, VARIANT* Sheet, VARIANT* Col, VARIANT* Row)
{
	static BYTE parms[] =
		VTS_I2 VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x209, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Param, Sheet, Col, Row);
}

void CFpspread8::ScriptCFGetRangeParamExt(short Param, VARIANT* Sheet, VARIANT* Col, VARIANT* Row, VARIANT* Col2, VARIANT* Row2)
{
	static BYTE parms[] =
		VTS_I2 VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x20a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		Param, Sheet, Col, Row, Col2, Row2);
}

BOOL CFpspread8::ExportToExcelEx(LPCTSTR FileName, LPCTSTR SheetName, LPCTSTR LogFileName, long Flags)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x20b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, SheetName, LogFileName, Flags);
	return result;
}

BOOL CFpspread8::ExportExcelBookEx(LPCTSTR FileName, LPCTSTR LogFileName, long Flags)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x20c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, LogFileName, Flags);
	return result;
}

BOOL CFpspread8::SetEnhancedSheetTabColors(long clrNormalUpperStartColor, long clrNormalUpperEndColor, long clrNormalLowerStartColor, long clrNormalLowerEndColor, long clrHoverUpperStartColor, long clrHoverUpperEndColor, long clrHoverLowerStartColor, 
											 long clrHoverLowerEndColor, long clrTabOuterBorderColor, long clrTabInnerBorderColor, long clrButtonUpperNormalStartColor, long clrButtonUpperNormalEndColor, long clrButtonLowerNormalStartColor, long clrButtonLowerNormalEndColor, 
											 long clrButtonUpperHoverStartColor, long clrButtonUpperHoverEndColor, long clrButtonLowerHoverStartColor, long clrButtonLowerHoverEndColor, long clrButtonUpperPushedStartColor, long clrButtonUpperPushedEndColor, 
											 long clrButtonLowerPushedStartColor, long clrButtonLowerPushedEndColor, long clrArrowColor, long clrBackColorStartColor, long clrBackColorEndColor, long clrSplitBoxStartColor, long clrSplitBoxEndColor, long clrSheetTabForeColor, 
											 long clrSheetTabActiveForeColor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x20e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		clrNormalUpperStartColor, clrNormalUpperEndColor, clrNormalLowerStartColor, clrNormalLowerEndColor, clrHoverUpperStartColor, clrHoverUpperEndColor, clrHoverLowerStartColor, clrHoverLowerEndColor, clrTabOuterBorderColor, 
		clrTabInnerBorderColor, clrButtonUpperNormalStartColor, clrButtonUpperNormalEndColor, clrButtonLowerNormalStartColor, clrButtonLowerNormalEndColor, clrButtonUpperHoverStartColor, clrButtonUpperHoverEndColor, clrButtonLowerHoverStartColor, 
		clrButtonLowerHoverEndColor, clrButtonUpperPushedStartColor, clrButtonUpperPushedEndColor, clrButtonLowerPushedStartColor, clrButtonLowerPushedEndColor, clrArrowColor, clrBackColorStartColor, clrBackColorEndColor, clrSplitBoxStartColor, 
		clrSplitBoxEndColor, clrSheetTabForeColor, clrSheetTabActiveForeColor);
	return result;
}

BOOL CFpspread8::SetEnhancedScrollBarColors(long clrTrackColor, long clrArrowColor, long clrUpperNormalStartColor, long clrUpperNormalEndColor, long clrLowerNormalStartColor, long clrLowerNormalEndColor, long clrUpperPushedStartColor, 
											  long clrUpperPushedEndColor, long clrLowerPushedStartColor, long clrLowerPushedEndColor, long clrUpperHoverStartColor, long clrUpperHoverEndColor, long clrLowerHoverStartColor, long clrLowerHoverEndColor, long clrHoverButtonBorderColor, 
											  long clrButtonBorderColor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x20f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		clrTrackColor, clrArrowColor, clrUpperNormalStartColor, clrUpperNormalEndColor, clrLowerNormalStartColor, clrLowerNormalEndColor, clrUpperPushedStartColor, clrUpperPushedEndColor, clrLowerPushedStartColor, clrLowerPushedEndColor, 
		clrUpperHoverStartColor, clrUpperHoverEndColor, clrLowerHoverStartColor, clrLowerHoverEndColor, clrHoverButtonBorderColor, clrButtonBorderColor);
	return result;
}

BOOL CFpspread8::SetEnhancedColumnHeaderColors(long clrSelectedHoverUpperColor, long clrSelectedHoverLowerColor, long clrSelectedUpperColor, long clrSelectedLowerColor, long clrHoverUpperColor, long clrHoverLowerColor, long clrUpperColor, 
												 long clrLowerColor, long clrSelectedBorderColor, long clrBorderColor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x210, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		clrSelectedHoverUpperColor, clrSelectedHoverLowerColor, clrSelectedUpperColor, clrSelectedLowerColor, clrHoverUpperColor, clrHoverLowerColor, clrUpperColor, clrLowerColor, clrSelectedBorderColor, clrBorderColor);
	return result;
}

BOOL CFpspread8::SetEnhancedRowHeaderColors(long clrSelectedHoverUpperColor, long clrSelectedHoverLowerColor, long clrSelectedUpperColor, long clrSelectedLowerColor, long clrHoverUpperColor, long clrHoverLowerColor, long clrUpperColor, 
											  long clrLowerColor, long clrSelectedBorderColor, long clrBorderColor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x211, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		clrSelectedHoverUpperColor, clrSelectedHoverLowerColor, clrSelectedUpperColor, clrSelectedLowerColor, clrHoverUpperColor, clrHoverLowerColor, clrUpperColor, clrLowerColor, clrSelectedBorderColor, clrBorderColor);
	return result;
}

BOOL CFpspread8::SetEnhancedCornerColors(long BackColor, long hoverBackColor, long triangleColor, long triangleHoverColor, long triangleBorderColor, long triangleHoverBorderColor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x212, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		BackColor, hoverBackColor, triangleColor, triangleHoverColor, triangleBorderColor, triangleHoverBorderColor);
	return result;
}

BOOL CFpspread8::IsVerticalScrollBarVisible()
{
	BOOL result;
	InvokeHelper(0x213, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CFpspread8::IsHorizontalScrollBarVisible()
{
	BOOL result;
	InvokeHelper(0x214, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CFpspread8::ExportToHTMLEx(LPCTSTR FileName, BOOL AppendFlag, LPCTSTR LogFile, LPCTSTR TitleStr, LPCTSTR CssFile, LPCTSTR TableClass, LPCTSTR TRClass, LPCTSTR TDClass, LPCTSTR THClass)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x218, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, AppendFlag, LogFile, TitleStr, CssFile, TableClass, TRClass, TDClass, THClass);
	return result;
}

BOOL CFpspread8::ExportRangeToHTMLEx(long Col, long Row, long Col2, long Row2, LPCTSTR FileName, BOOL AppendFlag, LPCTSTR LogFile, LPCTSTR TitleStr, LPCTSTR CssFile, LPCTSTR TableClass, LPCTSTR TRClass, LPCTSTR TDClass, LPCTSTR THClass)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BSTR VTS_BOOL VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x219, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Col2, Row2, FileName, AppendFlag, LogFile, TitleStr, CssFile, TableClass, TRClass, TDClass, THClass);
	return result;
}

VARIANT CFpspread8::SaveToBuffer()
{
	VARIANT result;
	InvokeHelper(0x21d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL CFpspread8::LoadFromBuffer(VARIANT* Buff)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT;
	InvokeHelper(0x21e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Buff);
	return result;
}

VARIANT CFpspread8::SaveBlockToBuffer(long Col, long Row, long Col2, long Row2, BOOL fSaveColInfo, BOOL fSaveRowInfo)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x21f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		Col, Row, Col2, Row2, fSaveColInfo, fSaveRowInfo);
	return result;
}

BOOL CFpspread8::LoadBlockFromBuffer(long Col, long Row, long Col2, long Row2, VARIANT* Buff)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x220, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Col2, Row2, Buff);
	return result;
}

BOOL CFpspread8::AddCustomCellType(LPCTSTR Name, BOOL Editable, BOOL CanOverflow, BOOL CanBeOverflown, BOOL UseRendererControl)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL;
	InvokeHelper(0x223, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, Editable, CanOverflow, CanBeOverflown, UseRendererControl);
	return result;
}

BOOL CFpspread8::RemoveCustomCellType(LPCTSTR Name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x224, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name);
	return result;
}

BOOL CFpspread8::EnumCustomCellType(LPCTSTR PrevName, BSTR* Name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_PBSTR;
	InvokeHelper(0x225, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PrevName, Name);
	return result;
}

BOOL CFpspread8::GetCustomCellType(LPCTSTR Name, BOOL* Editable, BOOL* CanOverflow, BOOL* CanBeOverflown, BOOL* UseRendererControl)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_PBOOL VTS_PBOOL VTS_PBOOL VTS_PBOOL;
	InvokeHelper(0x226, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, Editable, CanOverflow, CanBeOverflown, UseRendererControl);
	return result;
}

VARIANT CFpspread8::GetCustomEditor(LPCTSTR Name, long Style)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x229, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		Name, Style);
	return result;
}

VARIANT CFpspread8::GetCustomRenderer(LPCTSTR Name, long Style)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x22a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		Name, Style);
	return result;
}

BOOL CFpspread8::PaintControl(const VARIANT& Ctrl, long hDC, long Left, long Top, long Right, long Bottom, BOOL ClientOnly)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x22b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Ctrl, hDC, Left, Top, Right, Bottom, ClientOnly);
	return result;
}

long CFpspread8::GetFontHandle(LPDISPATCH Font)
{
	long result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x22c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Font);
	return result;
}

void CFpspread8::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CFpspread8::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
